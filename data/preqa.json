{"iteration": 1, "tag": "no", "repo": "SonarSource/sonarlint-intellij", "url": "https://github.com/SonarSource/sonarlint-intellij/pull/648#discussion_r1191323983", "body": "I think we can probably add a `break` here, security hotspots should be unique so no need to keep going if we found one"}
{"iteration": 1, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/1824#discussion_r306522913", "body": "Maybe `\"-Djib.allowInsecure...=\"`, just for consistency with others? And I believe `... + imageReference.startsWith(\"localhost\")` will do `toString()` which will be either `true` or `false`."}
{"iteration": 1, "tag": "yes", "repo": "FabricMC/fabric", "url": "https://github.com/FabricMC/fabric/pull/3310#discussion_r1335152735", "body": "This logic should not be controlled via tags. When this API was first designed, it was understood that Fabric Convention Tags were not designed to be used for modifying logic (at least directly); they were used for loot tables, recipes, etc.\r\n\r\nEven if we were to reject that notion, this is still not fit for the tag system. Mods might use this as a security feature (instead of the proper safeguards), and data packs can override this inadvertently.\r\n\r\nThis is better fit, either as an interface injected API or a custom EntityType property."}
{"iteration": 1, "tag": "no", "repo": "Freeyourgadget/Gadgetbridge", "url": "https://github.com/Freeyourgadget/Gadgetbridge/pull/1743#discussion_r355910191", "body": "Ahh, sorry. Seems to work though. I saw the comments and they said it was preferable to use BONDING_STYLE_ASK :)\r\n\r\nBy default there's zero security, yes. There's a bunch of stuff it can do (including whitelisting) but it's not enabled by default now. At the start it used to be, but I was getting so many support requests like \"I paired this with A and now it's broken\" that I had to disable it :)"}
{"iteration": 1, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/847#discussion_r835868539", "body": "@nenaraab I assume `XsuaaTokenComp` is for migration scenarios where there is still a lot of code using `com.sap.cloud.security.xsuaa.token.XsuaaToken`. Then the application may switch to `XsuaaTokenComp` until complete migration.\r\n\r\nFor this purpose, the following signatures are incompatible:\r\n```Java\r\n\r\n\t@Nullable\r\n\tString getOrigin() { // This is public in com.sap.cloud.security.xsuaa.token.XsuaaToken\r\n\t\treturn token.getClaimAsString(TokenClaims.XSUAA.ORIGIN);\r\n\t}\r\n\r\n// ...\r\n\r\n\tpublic String getExpirationDate() { // Date is returned in com.sap.cloud.security.xsuaa.token.XsuaaToken\r\n\t\treturn token.getExpiration() != null ? Date.from(token.getExpiration()).toString() : null;\r\n\t}\r\n\r\n```\r\n\r\nThe `XsuaaToken` class extends `Jwt` and implements `com.sap.cloud.security.xsuaa.token.Token` which are both not present in `XsuaaTokenComp`.\r\nScenarios with `Jwt` or `com.sap.cloud.security.xsuaa.token.Token` still would break.\r\n\r\nWhat about providing a separate maven artifact (xsuaa-fallback / xsuaa-compatibility) with a slightly modified `com.sap.cloud.security.xsuaa.token.XsuaaToken` where the constructor adapts from AccessToken to XsuaaToken?\r\n(+ the required `com.sap.cloud.security.xsuaa.token.Token` dependency)\r\n\r\nExample:\r\n```Java\r\nAccessToken token = SpringSecurityContext.getAccessToken();\r\nXsuaaToken xsuaaToken = XsuaaToken.createInstance(token);\r\n```\r\n\r\nThen you can preserve the old API without introducing API changes and you don't get legacy code in the `spring-security` artifact.\r\nThere would be no major refactoring effort and only the construction need to be adapted (as in the current PR).\r\nThe separate module can be removed by the consumers after completing the migration.\r\n\r\nComing back to the original question...\r\n\r\nI think it is not an adapter because it is an incompatible type (other inheritance, different name, different package). Secondly, you typically don't use an adapter as API. It operates as an implementation for a given interface.\r\n`XsuaaTokenComp` is an \"on method signature compatible\" class.\r\n\r\nMy proposal is to go with a separate compatibility module.\r\nIf not, then I tend to something like `XsuaaTokenComp` or (less nice) `XsuaaTokenSubst` or (less nice) `XsuaaTokenAlias`.\r\n"}
{"iteration": 1, "tag": "broken", "repo": "jenkinsci/embeddable-build-status-plugin", "url": "https://github.com/jenkinsci/embeddable-build-status-plugin/pull/17#discussion_r42424764", "body": "Most of this just seems to duplicate checks which are already being done in `PublicBadgeActionTest`. IMO it would suffice to have a single test case which verifies that you can get status on a `WorkflowJob` or `WorkflowRun` generally, without paying attention to security.\n"}
{"iteration": 1, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/1104#discussion_r1132577066", "body": "see comment about `spring-security-comp` module and revert this"}
{"iteration": 1, "tag": "broken", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/609#discussion_r53484934", "body": "Spring security rules live in: ./opennms-webapp/src/main/webapp/WEB-INF/applicationContext-spring-security.xml\n"}
{"iteration": 1, "tag": "no", "repo": "apache/incubator-kie-kogito-examples", "url": "https://github.com/apache/incubator-kie-kogito-examples/pull/243#discussion_r415686731", "body": "I believe the port can be injected as a field using annotation @LocalServerPort, that removes the dependency of the test on configuration. Similarly to process-usertasks-with-security-oidc-springboot\r\n\r\n```\r\n   @LocalServerPort\r\n    int randomServerPort;\r\n\r\n    @BeforeAll\r\n    public void before() {\r\n        RestAssured.port = randomServerPort;\r\n    }\r\n```"}
{"iteration": 1, "tag": "unclear", "repo": "dockstore/dockstore", "url": "https://github.com/dockstore/dockstore/pull/2574#discussion_r297844415", "body": "If this and the previous method were POST instead of PUT, then you wouldn't run into this. Nor would you have the username nor installation id in the url (although I guess neither of those needs to be secured).\r\n\r\nJust food for thought; I know it makes things a bit trickier code-wise."}
{"iteration": 1, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/733#discussion_r205909202", "body": "Ah yes, I'm thinking about this more in the lines of having `allowInsecureRegistries` be checked in one location to launch separate codepaths, one for secure and one for insecure. The one for insecure will be essentially the one for secure, except with additional functionality for handling HTTPS connect/TLS verification errors (codepaths with cross-over, but a different entrypoint). So, rather than checking `allowInsecureRegistries` in multiple places in `callWithInsecureRegistryHandling`, a single check would determine if the insecure handling code entrypoint would be launched vs the secure handling code entrypoint. I think I need to think more about this too."}
{"iteration": 1, "tag": "unclear", "repo": "fossasia/phimpme-android", "url": "https://github.com/fossasia/phimpme-android/pull/1769#discussion_r164755008", "body": "But what if you reset the settings, then all the values in the shared preference will be removed and it will return an empty string for secur(string object) which was in the case when you install the app."}
{"iteration": 1, "tag": "yes", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/320#discussion_r177185023", "body": "The security model I'm proposing is that security is within a catalog, not across catalogs.  So Ranger etc would not have an opportunity to filter catalog names.  Everyone can always see all the catalogs that exist.  Whether they can see anything inside that catalog is up to the security configured for that catalog.  That's why I didn't implement a filterCatalogNames."}
{"iteration": 1, "tag": "no", "repo": "eclipse/kura", "url": "https://github.com/eclipse/kura/pull/1265#discussion_r108920023", "body": "`logger.debug(\"Set security level to {}\", level.toString());`"}
{"iteration": 1, "tag": "unclear", "repo": "SonarSource/sonarqube", "url": "https://github.com/SonarSource/sonarqube/pull/1494#discussion_r94600548", "body": "I agree, we should improve the API to declare secured settings."}
{"iteration": 1, "tag": "unclear", "repo": "h2database/h2database", "url": "https://github.com/h2database/h2database/pull/2415#discussion_r370988450", "body": "best to document the reason for this, something like\r\n\r\n\"to avoid a security hole with a malicously crafted serialised object\""}
{"iteration": 1, "tag": "yes", "repo": "pusher/pusher-websocket-java", "url": "https://github.com/pusher/pusher-websocket-java/pull/234#discussion_r398505881", "body": "I created this class to contain the things the private encrypted channel needs. \r\n\r\nI created a `prepare()` method to parse the json into this object once, and do all the checks to make sure we got all the things we needed.\r\n\r\nI also created a `tearDown()` method to clear all the private data more securely."}
{"iteration": 1, "tag": "unclear", "repo": "alibaba/nacos", "url": "https://github.com/alibaba/nacos/pull/6843#discussion_r705862862", "body": "Please add secure annotation. make this api can be auth check."}
{"iteration": 1, "tag": "no", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/694#discussion_r206081310", "body": "You could say `SSE_C operations must be performed over a secure connection.`"}
{"iteration": 1, "tag": "broken", "repo": "cloudant/sync-android", "url": "https://github.com/cloudant/sync-android/pull/328#discussion_r74385523", "body": "Catch security exception in 34fb8be\n"}
{"iteration": 1, "tag": "yes", "repo": "jdbi/jdbi", "url": "https://github.com/jdbi/jdbi/pull/1511#discussion_r277928127", "body": "I agree with Steven. It would be useful, but the security concern would discourage users with PCI / PHI uses from using Jdbi for fear of exposing sensitive data in logs."}
{"iteration": 1, "tag": "no", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/18215#discussion_r1541519387", "body": "What if instead of requiring a user to explicitly opt in, we derive it from the actual spec? If the spec uses aws4 security, we add the corresponding dependency to the generated code.\r\n\r\nIs there a use case where a spec relies on AWS4, but a user want to opt out? Or vice versa - the spec doesn't use AWS4, but we still want to include it in the generate files?"}
{"iteration": 1, "tag": "no", "repo": "orphan-oss/ognl", "url": "https://github.com/orphan-oss/ognl/pull/69#discussion_r279236265", "body": "Hello @yasserzamani .\r\n\r\nIf I'm reading the code correctly, if `System.getProperty(\"ognl.security.manager\")` has to be inside `synchronized (MethodBodyExecutionSandbox.class) ` it's _going to force a thread-synchronization before every OGNL method invocation_ ... _even if the library user doesn't want the sandbox enabled_ (system property false).  :(\r\n\r\nFrom what I can see that creates an issue of overhead/thread synchronization that the library user has to pay even if they have no intention of ever using the sandbox.  If it's turned off then the implementation shouldn't have any extra synchronization cost over previous ONGNL, should it ?\r\n\r\nThere is also the issue of unexpected side-effects from the more-restrictive sandbox security manager running while any OGNL expression invocations are taking place ... which could break non-OGNL code running in the same JVM while it's in effect (in hard-to-track ways) ... unless I'm missing something.   :(\r\n\r\nIt seems like the _sandbox may be too far-reaching for its intended purpose_, but maybe I'm overlooking or misunderstanding.  :confused:\r\n\r\nMaybe a sandboxed OGNL should be a parallel fork (so it can be swapped-in/swapped-out at the .jar level) ?  Or maybe a duplicate-but-separate `OgnlRuntimeSandboxed` that the library user decides at compile or runtime to use (instead of the standard `OgnlRuntime`) ?  :confused:"}
{"iteration": 1, "tag": "no", "repo": "testcontainers/testcontainers-java", "url": "https://github.com/testcontainers/testcontainers-java/pull/4574#discussion_r727305766", "body": "```suggestion\r\n        // Starting in version 8.0, security will be enabled by default, so we can remove this setting in the future\r\n```"}
{"iteration": 1, "tag": "broken", "repo": "JakeWharton/butterknife", "url": "https://github.com/JakeWharton/butterknife/pull/72#discussion_r7026570", "body": "No, that's actually suppose to be a period, that's the output I got, I need\nto figure out how to find the generated sources.\n\nOn Thursday, October 17, 2013, Jake Wharton wrote:\n\n> In butterknife/src/test/java/butterknife/internal/OnClickTest.java:\n> \n> > +import com.google.common.base.Joiner;\n> > +import com.google.testing.compile.JavaFileObjects;\n> > +\n> > +import org.junit.Test;\n> > +\n> > +import javax.tools.JavaFileObject;\n> > +\n> > +import static butterknife.internal.ProcessorTestUtilities.butterknifeProcessors;\n> > +import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;\n> > +import static org.truth0.Truth.ASSERT;\n> > +\n> > +public class OnClickTest {\n> > +\n> > -  @Test\n> > -  public void onClickInjection() {\n> > -    // NOTE: needs to be in non-default package, otherwise got \".est$$ViewInjector.java\"\n> \n> Missing a letter in the string? Should it be \"Test\"?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/JakeWharton/butterknife/pull/72/files#r7024874\n> .\n\n## \n\n## \n\nDandr\u00e9 Allison                                (323) 823-4456\nKeepandShare.com http://www.keepandshare.com\n\n```\n          Schedule & Share. Simply. Securely.\n```\n"}
{"iteration": 1, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/610#discussion_r693018519", "body": "We can not remove classes from java-api, only from java-security, as java-security depends on env."}
{"iteration": 1, "tag": "yes", "repo": "apache/cordova-plugin-inappbrowser", "url": "https://github.com/apache/cordova-plugin-inappbrowser/pull/886#discussion_r659991955", "body": "this is here to mitigate a Chromium security bug as the comment explained, so you are reintroducing the issue again"}
{"iteration": 1, "tag": "yes", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471589437", "body": "Yes it does. I won't change anything in this PR to keep it smaller, but we can add more security around this. I think the idea was going to be to add code signing, right? What else do you think should be added for security other than code signing?"}
{"iteration": 1, "tag": "yes", "repo": "apache/cxf", "url": "https://github.com/apache/cxf/pull/1645#discussion_r1453510256", "body": "They are not really removed. To adjust to use java default security provider API, I changed it to the java standard algo name \"RSASSA-PSS\" like this in code\r\n```\r\npublic static final String PS_SHA_JAVA = \"RSASSA-PSS\";\r\n```\r\nAnd the java doc for \"RSASSA-PSS\" is\r\n```\r\nThe signature algorithm that uses the RSASSA-PSS signature scheme as defined in [PKCS #1 v2.2] \r\n(https://tools.ietf.org/html/rfc8017). Note that this signature algorithm needs parameters such as a digesting\r\n algorithm, salt length and MGF1 algorithm, to be supplied before performing the RSA operation.\r\n```\r\nSo I believe with the correct parameters such as digesting algorithm, salt length and MGF1 algorithm, this is the counterpart from java default security provider of  \"SHA256withRSAandMGF1\", \"SHA384withRSAandMGF1\", or \"SHA512withRSAandMGF1\"\r\n\r\nI actually give the PSSParameterSpec in [PublicKeyJwsSignatureVerifier.java](https://github.com/apache/cxf/pull/1645/files/bd38dde2edb2fe2e6fad8be3b97fb733ece20802#diff-e7d828c0b36c1ce3cf222247c8662de235189a1d028f87e4fcd045d179c67808)\r\nlike\r\n```\r\nString javaAlgoName = supportedAlgo.getJavaName();\r\n        if (javaAlgoName.equals(AlgorithmUtils.PS_SHA_JAVA)\r\n            && spec == null) {\r\n            //must have spec in this case\r\n            String size = supportedAlgo.getJwaName().substring(2);\r\n            switch (size) {\r\n            case \"256\" : \r\n                spec = new PSSParameterSpec(\"SHA-1\", \"MGF1\", MGF1ParameterSpec.SHA256, 20, 1);\r\n                break;\r\n            case \"384\" : \r\n                spec = new PSSParameterSpec(\"SHA-1\", \"MGF1\", MGF1ParameterSpec.SHA384, 20, 1);\r\n                break;\r\n            case \"512\" : \r\n                spec = new PSSParameterSpec(\"SHA-1\", \"MGF1\", MGF1ParameterSpec.SHA512, 20, 1);\r\n                break;\r\n            default : \r\n                spec = PSSParameterSpec.DEFAULT;\r\n            }\r\n\r\n\r\n        }\r\n```\r\n\r\nI just realized that I need to revise the above code a bit,  not use \"SHA-1\" as messageDigest Algorithms for the first parameter of PSSParameterSpec, instead I need to use SHA-256, SHA-384, SHA-512 separately.\r\n"}
{"iteration": 1, "tag": "unclear", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/10901#discussion_r761334007", "body": "Indeed, I do not think this is easy to do. We would need to check all api calls and determine if at least one of them uses an access token security. It is much simpler to always output the file, even if not needed, and simply rely on the build process of the client app to discard this file if no other file imports it. I think this is good enough."}
{"iteration": 1, "tag": "unclear", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1198#discussion_r846363624", "body": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\n\nThe result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}
{"iteration": 1, "tag": "yes", "repo": "apache/jackrabbit-oak", "url": "https://github.com/apache/jackrabbit-oak/pull/471#discussion_r797977228", "body": "@anchela Yes, that is basically correct.  My proposal is not really about limiting the set of properties that can be written, I simply wish to have a more specific value constraint defined for certain property definitions (as defined by a mixin type that I have assigned).  And I don't want the existence of that more specific property definition (with the value constraint) to make the property invisible from the Authorizable.getProperty call.\r\n\r\nIf you are curious, the more specific value constraint idea is motivated by security concerns about ensuring that self-registered end users of the platform can not abuse their self-managed user profile properties to store invalid or unreasonably long values to the repository.  For an extreme example, we don't want the user to do something like encoding a large binary file as text and storing that value as the \"nickname\" property in their user profile.  We want some reasonable max length (or other) value constraint on the property definition so extremely invalid values will never be stored even if the end user somehow manages to get around the form post validation checking."}
{"iteration": 1, "tag": "unclear", "repo": "OHDSI/WebAPI", "url": "https://github.com/OHDSI/WebAPI/pull/729#discussion_r247608577", "body": "1. The core issue was in the ability to receive entity w/o permissions due to separate transactions used for the creation of the entity and creation of the permissions (versus a single transaction required). The introduced approach doesn't fix the issue because in case of permission creation failure the entity transaction won't rollback and method will finish execution successfully (the exception is not rethrown).\r\n\r\n2. This approach uses an imperative approach and tears apart the security layer. I would look for something that leaves all security related things in the Shiro related classes (tight coupling inside module) and doesn't explicitly expose it to business layer (loose coupling between modules)"}
{"iteration": 1, "tag": "broken", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/7#discussion_r21307452", "body": "Is it necessary to specify this? Would anyone expect an OTC trade to be modelled as a security if they hadn't seen our current object model?\n"}
{"iteration": 1, "tag": "no", "repo": "SonarSource/sonarlint-intellij", "url": "https://github.com/SonarSource/sonarlint-intellij/pull/652#discussion_r1196326646", "body": "Biggest issue is that we only have information about the security hotspot key, which means we cannot know in advance in which `fileNode` or `securityHospotNode` it is, so it prevents us from doing any search in the tree"}
{"iteration": 1, "tag": "unclear", "repo": "OpenRefine/OpenRefine", "url": "https://github.com/OpenRefine/OpenRefine/pull/2630#discussion_r428859593", "body": "@tfmorris: this is documented here. I was wrong, CSRF are not needed for this POST, so it's not a security thing.\r\n\r\nhttps://github.com/OpenRefine/OpenRefine/wiki/Changes-for-3.3\r\n\r\n```\r\nThe following commands can still be used with POST but do not require CSRF tokens (although supplying one will not fail), as they do not incur a state change in the backend:\r\n- compute-clusters;\r\n- compute-facets;\r\n- export-project;\r\n- export-rows;\r\n- get-all-preferences;\r\n- get-importing-configuration;\r\n- get-importing-job-status;\r\n- get-rows;\r\n- load-language.\r\n```\r\n\r\nRegards, Antoine"}
{"iteration": 1, "tag": "unclear", "repo": "Anuken/Mindustry", "url": "https://github.com/Anuken/Mindustry/pull/125#discussion_r187854781", "body": "@Anuken while I agree with the rest, the fact that the logs are given to all players is intentional, as I can see no real security risk of restricting them to admins. Players should be accountable for theirs actions regardless of whether an admin is on or not"}
{"iteration": 1, "tag": "unclear", "repo": "ESAPI/esapi-java-legacy", "url": "https://github.com/ESAPI/esapi-java-legacy/pull/535#discussion_r370462695", "body": "My rationale for making this false if because I wanted to ensure backwards compatibility (i.e., not breaking someone's production code) if the updated their ESAPI jar to 2.2.1.0 (or whatever we name the next release) but fail to update their production ESAPI.properties file, which I think is probably a pretty common thing to do. E.g., they may have ESAPI.MasterKey / ESAPI.MasterSalt set or have done other extensive customization to it so that a wholesale copying of the updated ESAPI.properties file (which you can't download from Maven Central so is a bit harder to get anyway) so they figure it is safer to leave as-is, trusting that won't break anything. And generally they would be right. So it they take that approach, at best they may look for new properties to add in, but they very well could miss one, especially given it's dubious name of \"Validator.ValidationRule.getValid.ignore509Fix\". Also, I'm still not **100%** convinced that throwing an exception is the correct behavior. I mean I _think_ that was a bug, but we have no way of absolutely knowing if the Javadoc just wasn't wrong and since AntiSamy still ends up cleanses these cases, not throwing an exception here isn't really introducing any security risk that I can see here."}
{"iteration": 1, "tag": "yes", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/1927#discussion_r224675672", "body": "There are specific properties to be set in transformation factory as well. Verify with secure coding guidelines "}
{"iteration": 1, "tag": "unclear", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/2703#discussion_r468995108", "body": "I think `serializedCache` should be Optional<SerializedCache> it will make code more secure and less error-prone"}
{"iteration": 1, "tag": "no", "repo": "NationalSecurityAgency/datawave", "url": "https://github.com/NationalSecurityAgency/datawave/pull/381#discussion_r268367031", "body": "Yeah, it seems mrunit was retired years ago. I forget exactly what tripped updating it-I think I got there through Arquillian updates. Overall, the end changes aren\u2019t too bad. We are, however, completely ignoring wildfly\u2019s new security system and using the old one\u2014took a while to find that as the best option. But as long as it\u2019s still there, we can keep upgrading..."}
{"iteration": 1, "tag": "yes", "repo": "PhoenicisOrg/phoenicis", "url": "https://github.com/PhoenicisOrg/phoenicis/pull/1833#discussion_r257455585", "body": "That is a good point. The question is whether we can make the code secure at all?\r\nI mean the previous implementation had the same problem in that you could inject code via the `engineId` and `settingId` parameters, right?"}
{"iteration": 1, "tag": "yes", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/1494#discussion_r463252783", "body": "Will the servers automatically redirect to https supported and you request http?  Defaulting to https seems good because it offers security but possibly more importantly data integrity which I don't think HTTP does?  Maybe we should implement a failover where we try https and then fall back to http if it fails?  Most of the time bam data is private and legally protected so defaulting to http seems a bit scary."}
{"iteration": 1, "tag": "no", "repo": "pentaho/pentaho-kettle", "url": "https://github.com/pentaho/pentaho-kettle/pull/3056#discussion_r84059918", "body": "This is repetitive code here - can it (and the ones like it below) be moved to a Utils class or static methods of XMLParserFactoryProducer so that it isn't repeated over and over. Eventually, there will be another security-focused setting that will need to be set, and we'll have to touch all these files. I'd rather have them all call a utility method and have the utility method be the only one responsible for knowing all the features.\n"}
{"iteration": 1, "tag": "broken", "repo": "jenkinsci/embeddable-build-status-plugin", "url": "https://github.com/jenkinsci/embeddable-build-status-plugin/pull/4#discussion_r4421905", "body": "I would love to add this but i could not figure out how to configure jenkins with this security setup during a test.\n"}
{"iteration": 1, "tag": "broken", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/842#discussion_r56366705", "body": "Is the ID on the security too?\n\nAlso, I'm surprised this is optional. Why would you have a security with no ID?\n"}
{"iteration": 1, "tag": "broken", "repo": "apache/phoenix", "url": "https://github.com/apache/phoenix/pull/120#discussion_r41285998", "body": "@maryannxue - do you think the underlying order returned is indeterminate? For our tests, we have phoenix.query.force.rowkeyorder set to true, so underlying scans will return in row key order. Just want to make sure @chiastic-security fix isn't masking a bug.\n"}
{"iteration": 1, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1198#discussion_r846366341", "body": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\n\nThe result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}
{"iteration": 1, "tag": "unclear", "repo": "googlesamples/android-testdpc", "url": "https://github.com/googlesamples/android-testdpc/pull/168#discussion_r1017657557", "body": "Could we leave this in SecurityLogsFragment and call it statically from there? then it's more obvious that this method is only related to security logs?"}
{"iteration": 1, "tag": "no", "repo": "apache/nifi-registry", "url": "https://github.com/apache/nifi-registry/pull/14#discussion_r142475289", "body": "I know this would be a tedious change, but what do you think about splitting out all of the interfaces/domain objects from nifi-registry-security into nifi-registry-security-api?\r\n\r\nMy thinking is that nifi-registry-security-api would live in the lib directory and be something that other people would implement against, where as nifi-registry-security would be bundled under the WAR for nifi-registry-web-api."}
{"iteration": 1, "tag": "no", "repo": "IQSS/dataverse", "url": "https://github.com/IQSS/dataverse/pull/5881#discussion_r287074177", "body": "@qqmyers if it helps, here is the messaging I mentioned that was added in the older pull request:\r\n\r\n- API Token will be generated. Please keep it secure as you would do with a password.\r\n- API Token has been generated. Please keep it secure as you would do with a password.\r\n\r\n(It should probably say \"An API token\". Oh well. \ud83d\ude04 .)\r\n\r\nThis is probably old news to you because now that I look at #5671 again I can see you participated quite a bit in the discussion! Thank you!"}
{"iteration": 1, "tag": "unclear", "repo": "hibernate/hibernate-search", "url": "https://github.com/hibernate/hibernate-search/pull/4124#discussion_r1574419433", "body": "hmm so maybe let's do the reflection thing and keep the `Security Exception`s in place and get this merged into the current main (7.2) and then for the next major we remove all that ?"}
{"iteration": 1, "tag": "unclear", "repo": "apache/jackrabbit-oak", "url": "https://github.com/apache/jackrabbit-oak/pull/178#discussion_r387419544", "body": "It supports both. Long-term access is obtained by using accessKey and secretKey of either the root user or an IAM user.\r\n\r\nTemporary security credentials work by using a sessionToken in conjunction with accesKey and secretKey. More details here: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#instance-metadata-security-credentials\r\n\r\nThe current implementation does support sessionToken and uses it when specified."}
{"iteration": 1, "tag": "no", "repo": "hibernate/hibernate-search", "url": "https://github.com/hibernate/hibernate-search/pull/1668#discussion_r185652299", "body": "I'm referring specifically to the securitymanager system of the JVM, not a generic \"security manager\". I changed it as the previous one was a bit alarming but it's not very important."}
{"iteration": 1, "tag": "no", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/9578#discussion_r639531191", "body": "Suggestions:\r\n\r\nThis flag with generate code => This flag will generate code\r\n\r\nthat has a know security vulnerability => that has a known security vulnerability"}
{"iteration": 1, "tag": "no", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/1418#discussion_r1094187045", "body": "**HTTP LOG**\r\n---------START-HTTP---------\r\nPUT /jrsy/2/index.vue.76f119fe7fff4b7184f87873ad788fbb.vue HTTP/1.1\r\nx-amz-copy-source: /jrsy/2/index.vue.76f119fe7fff4b7184f87873ad788fbb.vue\r\nX-Amz-Meta-Filename: dabssssichi.vue\r\nHost: xxx.xxx.xxx.xxx:9000\r\nAccept-Encoding: identity\r\nUser-Agent: MinIO (amd64; amd64) minio-java/3.19.0\r\nContent-MD5: 1B2M2Y8AsgTpgAmY7PhCfg==\r\nx-amz-content-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\nx-amz-date: 20230202T081943Z\r\nAuthorization: \u2588\u2588\r\n\r\nHTTP/1.1 400\r\nAccept-Ranges: bytes\r\nContent-Length: 543\r\nContent-Security-Policy: block-all-mixed-content\r\nContent-Type: application/xml\r\nServer: MinIO\r\nVary: Origin\r\nX-Amz-Request-Id: 173FF415CCDDA832\r\nX-Xss-Protection: 1; mode=block\r\nDate: Thu, 02 Feb 2023 08:19:20 GMT\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Error><Code>InvalidRequest</Code><Message>This copy request is illegal because it is trying to copy an object to itself without changing the object&#39;s metadata, storage class, website redirect location or encryption attributes.</Message><Key>2/index.vue.76f119fe7fff4b7184f87873ad788fbb.vue</Key><BucketName>jrsy</BucketName>\r\nource>/jrsy/2/index.vue.76f119fe7fff4b7184f87873ad788fbb.vue</Resource\r\n<RequestId>173FF415CCDDA832</RequestId><HostId>eb85c247-f8ab-4fd3-a17a-fdc628cc014b</HostId></Error>\r\n----------END-HTTP----------\r\n\r\nError given by MINIO server log\r\nThe info core is \"This copy request is illegal because it is trying to copy an object to itself without changing the object&#39;s metadata, storage class, website redirect location or encryption attributes.\"\r\n\r\n\r\n"}
{"iteration": 1, "tag": "yes", "repo": "testcontainers/testcontainers-java", "url": "https://github.com/testcontainers/testcontainers-java/pull/2983#discussion_r455301781", "body": "This endpoint is probably not available either when the cluster is secured AFAIK. I don't think this can work as is IMO.\r\nI'd let the default behavior.\r\n\r\nBut we can add this nice idea in #2321 which adds a simple `withPassword()` method which makes the cluster secured. There we can add \r\n\r\n```\r\n.withBasicCredentials(\"elastic\", password)\r\n```\r\n\r\nand just check the `HTTP_OK` status."}
{"iteration": 1, "tag": "bot", "repo": "Wurst-Imperium/Wurst7", "url": "https://github.com/Wurst-Imperium/Wurst7/pull/876#discussion_r1327776490", "body": "@Alexander01998: You're correct that the `user.home` system property is typically always available in a standard Java environment. However, it's generally good practice to add error handling for unexpected situations. While it's unlikely, there could be scenarios where the property isn't set or accessible due to security restrictions, misconfigurations, or other unforeseen circumstances. \n\nIn such cases, without proper error handling, the application could crash or behave unpredictably. A simple null check and throwing an appropriate exception if `user.home` is not available can help diagnose such issues more easily if they ever occur. Here's how you might modify the code:\n\n```java\npublic static Path chooseEncryptionFolder()\n{\n    String userHome = System.getProperty(\"user.home\");\n    if (userHome == null || userHome.isEmpty()) {\n        throw new IllegalStateException(\"System property 'user.home' is not available.\");\n    }\n    \n    // rest of the code...\n}\n```\n\nThis way, we ensure that the program fails fast with a clear message if an essential system property is missing.\n\n<!-- This is an auto-generated reply by CodeRabbit -->\n"}
{"iteration": 1, "tag": "no", "repo": "fabric8io/kubernetes-client", "url": "https://github.com/fabric8io/kubernetes-client/pull/5885#discussion_r1562365596", "body": "Please add the following snippet to this javadoc to make it more clear how it behaves:\r\n\r\n\r\n```suggestion\r\n * Java representation of the {@code format} field of JSONSchemaProps.\r\n *\r\n * <p>The following formats are validated by Kubernetes:</p>\r\n * <ul>\r\n * <li>{@code bsonobjectid}: a bson object ID, i.e. a 24 characters hex string</li>\r\n * <li>{@code uri}: an URI as parsed by Golang net/url.ParseRequestURI</li>\r\n * <li>{@code email}: an email address as parsed by Golang net/mail.ParseAddress</li>\r\n * <li>{@code hostname}: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].</li>\r\n * <li>{@code ipv4}: an IPv4 IP as parsed by Golang net.ParseIP</li>\r\n * <li>{@code ipv6}: an IPv6 IP as parsed by Golang net.ParseIP</li>\r\n * <li>{@code cidr}: a CIDR as parsed by Golang net.ParseCIDR</li>\r\n * <li>{@code mac}: a MAC address as parsed by Golang net.ParseMAC</li>\r\n * <li>{@code uuid}: an UUID that allows uppercase defined by the regex\r\n * {@code (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$}</li>\r\n * <li>{@code uuid3}: an UUID3 that allows uppercase defined by the regex\r\n * {@code (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$}</li>\r\n * <li>{@code uuid4}: an UUID4 that allows uppercase defined by the regex\r\n * {@code (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$}</li>\r\n * <li>{@code uuid5}: an UUID5 that allows uppercase defined by the regex\r\n * {@code (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$}</li>\r\n * <li>{@code isbn}: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\"</li>\r\n * <li>{@code isbn10}: an ISBN10 number string like \"0321751043\"</li>\r\n * <li>{@code isbn13}: an ISBN13 number string like \"978-0321751041\"</li>\r\n * <li>{@code creditcard}: a credit card number defined by the regex\r\n * {@code ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$}\r\n * with any non digit characters mixed in</li>\r\n * <li>{@code ssn}: a U.S. social security number following the regex {@code ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$}</li>\r\n * <li>{@code hexcolor}: an hexadecimal color code like \"#FFFFFF: following the regex {@code ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$}</li>\r\n * <li>{@code rgbcolor}: an RGB color code like rgb like \"rgb(255,255,2559\"</li>\r\n * <li>{@code byte}: base64 encoded binary data</li>\r\n * <li>{@code password}: any kind of string</li>\r\n * <li>{@code date}: a date string like \"2006-01-02\" as defined by full-date in RFC3339</li>\r\n * <li>{@code duration}: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration\r\n * format</li>\r\n * <li>{@code date-time}: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.</li>\r\n * </ul>\r\n * <p>\r\n * Unknown formats are ignored by Kubernetes and if another consumer is unaware of the meaning of the format,\r\n * they shall fall back to using the basic type without format.\r\n * </p>\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "fabric8io/kubernetes-client", "url": "https://github.com/fabric8io/kubernetes-client/pull/5064#discussion_r1178915436", "body": "in relation to my previous comment about security.\r\n\r\nIn which cases do we might want to perform a request to a non-relative URL?"}
{"iteration": 1, "tag": "yes", "repo": "apache/jackrabbit-oak", "url": "https://github.com/apache/jackrabbit-oak/pull/178#discussion_r377194549", "body": "Per Miroslav's comments: \r\n\r\nGeneral security reccomendation in AWS, when consuming services (S3 and DynamoDB in this case) is to prefer using temporary security credentials instead of long-term access keys. \r\nhttps://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html#use-roles\r\n\r\nSeems that class `AwsContext.java` is using long-term access keys.\r\nLink below explains how AWS IAM roles can be associated with k8n service account. \r\nhttps://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html\r\n\r\nCredentials provider that is used currently is fine during development/testing. "}
{"iteration": 1, "tag": "unclear", "repo": "ESAPI/esapi-java-legacy", "url": "https://github.com/ESAPI/esapi-java-legacy/pull/551#discussion_r449366247", "body": "Most of this Encoder Javadoc originated on my running across https://arxiv.org/pdf/1810.01017.pdf, which was a usability study on the ESAPI Encoder. I have been interacting with the 2 authors on Google Drive commenting on their paper and trying to gain insight as to how to improve ESAPI Encoder to make it more noob friendly. They had remarked that students had no idea how to test to see if then had secured their code correctly, thus these specific additions. So that is the target audience with these javadoc comments on testing."}
{"iteration": 1, "tag": "unclear", "repo": "SonarSource/sonarlint-intellij", "url": "https://github.com/SonarSource/sonarlint-intellij/pull/624#discussion_r1140537812", "body": "This part is the fix for security hotspots not refreshed at start"}
{"iteration": 1, "tag": "yes", "repo": "gchq/Gaffer", "url": "https://github.com/gchq/Gaffer/pull/3202#discussion_r1587713240", "body": "Just thinking will this be plain text in memory? If so, just wondering how we would go about ensuring that this is secure through the journey of the authentication?"}
{"iteration": 1, "tag": "unclear", "repo": "SasanLabs/VulnerableApp", "url": "https://github.com/SasanLabs/VulnerableApp/pull/357#discussion_r827141899", "body": "SSRF is implemented with 5 levels. A user can enter an URL to display a file which is present on the server. If the file is not present, a message will be displayed to inform the user. We have:\r\n\r\n1. No restriction for URL given\r\n2. User is disallowed from file:// protocol\r\n3. User is disallowed from localhost\r\n4. user is disallowed from any variant of localhost\r\n5. secure level where whitelist is made (whitelist with URL of the list of Projects by SasanLabs)"}
{"iteration": 1, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/3289#discussion_r744183485", "body": "can you help me understand where do we call this? I see in HiveQueryDDLExecutor, we do the following. \r\n```\r\nif (client != null) {\r\n      Hive.closeCurrent();\r\n    }\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1126#discussion_r739519609", "body": "We can rely on security service to do the right thing, just make it optional here?"}
{"iteration": 1, "tag": "bot", "repo": "Alovoa/alovoa", "url": "https://github.com/Alovoa/alovoa/pull/205#discussion_r976344126", "body": "*[INSECURE_COOKIE](https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE):*  Cookie without the secure flag could be sent in clear text if a HTTP URL is visited\n\n---\n\n<details><summary><b>\u2139\ufe0f Learn about @sonatype-lift commands</b></summary>\n\nYou can reply with the following commands. For example, reply with ***@sonatype-lift ignoreall*** to leave out all findings.\n| **Command** | **Usage** |\n| ------------- | ------------- |\n| `@sonatype-lift ignore` | Leave out the above finding from this PR |\n| `@sonatype-lift ignoreall` | Leave out all the existing findings from this PR |\n| `@sonatype-lift exclude <file\\|issue\\|path\\|tool>` | Exclude specified `file\\|issue\\|path\\|tool` from Lift findings by updating your config.toml file |\n\n**Note:** When talking to LiftBot, you need to **refresh** the page to see its response.\n<sub>[Click here](https://github.com/apps/sonatype-lift/installations/new) to add LiftBot to another repo.</sub></details>\n\n\n\n---\n\nWas this a good recommendation?\n[ [\ud83d\ude41 Not relevant](https://www.sonatype.com/lift-comment-rating?comment=335304773&lift_comment_rating=1) ] - [ [\ud83d\ude15 Won't fix](https://www.sonatype.com/lift-comment-rating?comment=335304773&lift_comment_rating=2) ] - [ [\ud83d\ude11 Not critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=335304773&lift_comment_rating=3) ] - [ [\ud83d\ude42 Critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=335304773&lift_comment_rating=4) ] - [ [\ud83d\ude0a Critical, fixing now](https://www.sonatype.com/lift-comment-rating?comment=335304773&lift_comment_rating=5) ]"}
{"iteration": 1, "tag": "yes", "repo": "apache/syncope", "url": "https://github.com/apache/syncope/pull/141#discussion_r353067687", "body": "After obtaining `userPatch`, add the following statements:\r\n\r\n```java\r\nuserPatch.setPassword(null);\r\nuserPatch.setSecurityAnswer(null);\r\n```\r\n\r\nto ensure that no security-sensible changes are actually performed during restore."}
{"iteration": 1, "tag": "unclear", "repo": "SonarSource/sonar-python", "url": "https://github.com/SonarSource/sonar-python/pull/1393#discussion_r1118504759", "body": "Same as `PythonProfile` for now, without DBD and security rules. [SONARPY-1290](https://sonarsource.atlassian.net/browse/SONARPY-1290) should remove the identified noisy rules."}
{"iteration": 1, "tag": "broken", "repo": "apache/syncope", "url": "https://github.com/apache/syncope/pull/680#discussion_r1560786908", "body": "## Use of a potentially broken or risky cryptographic algorithm\n\nCryptographic algorithm [EC](1) may not be secure, consider using a different algorithm.\n\n[Show more details](https://github.com/apache/syncope/security/code-scanning/1553)"}
{"iteration": 1, "tag": "unclear", "repo": "apache/maven-resolver", "url": "https://github.com/apache/maven-resolver/pull/255#discussion_r1121268024", "body": "The exception message looks incoherent with the code.  We're not configuring _insecure_ ssl specifically in the code block. So I think we should either restrict the `try`/`catch` block to _insecure ssl_ configuration, or change the message."}
{"iteration": 1, "tag": "yes", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/610#discussion_r519032115", "body": "Talked to Finn, although it'll be nice to add S3 access here and make it easy for customers, but security is more important, so we decided to not include S2 get and head in the policy, in future we could add an option for list of buckets and also add that option to console if there is going to be an advance setup console option. Right now we have limited time so we'll keep it like this. We also decided to document it in various places, Finn will add it to AWS docs and I've included it in the help text and logs"}
{"iteration": 1, "tag": "unclear", "repo": "ArcBees/GWTP", "url": "https://github.com/ArcBees/GWTP/pull/657#discussion_r22512097", "body": "In `ActionImpl` the default is to return true and then override with false when not secured.\n\nNot sure but it might be good to make this secure by default as well.\n"}
{"iteration": 1, "tag": "broken", "repo": "apache/cxf", "url": "https://github.com/apache/cxf/pull/1645#discussion_r1450734270", "body": "## Use of a potentially broken or risky cryptographic algorithm\n\nCryptographic algorithm [PBKDF2WithHmacSHA](1) may not be secure, consider using a different algorithm.\n\n[Show more details](https://github.com/apache/cxf/security/code-scanning/1985)"}
{"iteration": 1, "tag": "yes", "repo": "openpnp/openpnp", "url": "https://github.com/openpnp/openpnp/pull/588#discussion_r123911296", "body": "it can be replaced with 99 or any other value bigger as that. Ideally it should be greater as 360 and\r\nfor security greater as 720, so 999 fit nicely. Max_Integer fit too. The other requirement is that variable rot need to be initialized with the same value. As maxInt when converted to double is Infinite, i prefer safer value 999.  It is used inside old=Math.min(old,rot); and no , it is not a special\r\ncase  code, 765 or 123 works equals.\r\n"}
{"iteration": 1, "tag": "yes", "repo": "ArcBees/GWTP", "url": "https://github.com/ArcBees/GWTP/pull/149#discussion_r2883037", "body": "I see, really interesting. This would be a nice feature to add support for once we reach the security layer.\n"}
{"iteration": 1, "tag": "no", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/3626#discussion_r1041230117", "body": "agree, putting a comment + null check for the log line\r\n```\r\n// supposed to have a token only if security is enabled (any mismatch here implies a configuration problem)\r\n```"}
{"iteration": 1, "tag": "no", "repo": "jenkinsci/kubernetes-plugin", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/1406#discussion_r1270683501", "body": "or \r\n```suggestion\r\n                }, () -> LOGGER.severe(\"Cannot find the jnlp container to configure its security when it is expected to be present.\"));\r\n```\r\n(though this message with no context is going to be useless)"}
{"iteration": 1, "tag": "yes", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/199#discussion_r154867385", "body": "We could also just sample a random seed in this case and have a secure default. Either way, the default behavior when no seed is given should be described in the javadoc above.  "}
{"iteration": 1, "tag": "no", "repo": "h2database/h2database", "url": "https://github.com/h2database/h2database/pull/1290#discussion_r202507726", "body": "`Value.compareTo()` should convert values to the same type if necesary before invocation of `compareSecure()`. `compareTypeSafe()` should not be used with different data types.\r\n\r\nBut there is a `ValueLob.equals()` without such check. This method should be fixed."}
{"iteration": 1, "tag": "unclear", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/650#discussion_r154503218", "body": "> aws-sdk-java with ngnix configured with/without / on AWS S3 and play.minio.io\r\n\r\nBoth upstreams you mentioned are SSL enabled, and sending secure traffic to upstream servers needs detailed configuration and CA certificate (ref: https://www.nginx.com/resources/admin-guide/nginx-tcp-ssl-upstreams/) \r\n\r\nSo, I tested with both Nginx configurations `/bucketName` and `/bucketName/` with local upstream Minio server built from latest master, in both the cases `aws-sdk-java` `getBucketLocation` API sends out requests to `/bucketName/`, this is Minio server trace\r\n\r\n```sh\r\n[REQUEST (objectAPIHandlers).GetBucketLocationHandler-fm] [151223897.018844] [2017-12-02 23:52:50 +0530]\r\nGET /photos/?location\r\nHost: domain.abc\r\nConnection: close\r\nContent-Length: 0\r\nX-Amz-Date: 20171202T182250Z\r\nAmz-Sdk-Retry: 0/0/500\r\nX-Amz-Content-Sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\nAuthorization: AWS4-HMAC-SHA256 Credential=minio/20171202//s3/aws4_request, SignedHeaders=amz-sdk-invocation-id;amz-sdk-retry;content-type;host;user-agent;x-amz-content-sha256;x-amz-date, Signature=a47038e0a9611345c9a745d419951aef434eb54a899c8735289a53a0b5776d44\r\nUser-Agent: aws-sdk-java/1.11.240 Linux/4.13.0-16-lowlatency OpenJDK_64-Bit_Server_VM/25.151-b12 java/1.8.0_151\r\nAmz-Sdk-Invocation-Id: 4b598be3-0530-b9b5-222b-7626ca651776\r\nContent-Type: application/octet-stream\r\n\r\n\r\n[RESPONSE] [151223897.018844] [2017-12-02 23:52:50 +0530]\r\n200 OK\r\nX-Amz-Request-Id: 14FC8D54C99A0977\r\nServer: Minio/DEVELOPMENT.GOGET (linux; amd64)\r\nAccept-Ranges: bytes\r\nContent-Type: application/xml\r\nVary: Origin\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/908#discussion_r214117100", "body": "Okay, though it feels off having to use the deprecated `java.io.File` API to account for a security vulnerability. Perhaps we could use `Path#normalize`?"}
{"iteration": 1, "tag": "unclear", "repo": "FraunhoferISST/DataspaceConnector", "url": "https://github.com/FraunhoferISST/DataspaceConnector/pull/211#discussion_r619036636", "body": "Will also work with `@Order(1)` changed it back to use this one. Thanks for the hint on the spring boot security order. Do you know the exact order number for that bean?"}
{"iteration": 1, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/598#discussion_r674800011", "body": "We need to get rid of that as well, otherwise we need to inform customers about this incompatible change, in case they define custom security configurations in their productive or testing environment"}
{"iteration": 1, "tag": "yes", "repo": "AppliedEnergistics/Applied-Energistics-2", "url": "https://github.com/AppliedEnergistics/Applied-Energistics-2/pull/4489#discussion_r458002045", "body": "oh, also: no, the buffer is not allocated based on this value, this is just a malicious client security feature."}
{"iteration": 1, "tag": "unclear", "repo": "Nike-Inc/riposte", "url": "https://github.com/Nike-Inc/riposte/pull/20#discussion_r102098922", "body": "The info in this javadoc about how it's used in HttpChannelInitializer and how it relates to the various Netty handlers should probably be removed - it requires a depth of knowledge about the guts of Riposte that most users don't want to or need to know about. Also no need to discuss the backwards compatibility stuff - that's a meta issue for the changelog, not something relevant to users wanting to know what the method does.\r\n\r\nI would focus on how this method affects the behavior from a normal-Riposte-user perspective (where the only knobs they know how to tweak come from the `ServerConfig` for their app), and consequences for choosing before vs. after. Something like:\r\n\r\n```\r\nThis method determines whether the filter should be executed before or after any security \r\nvalidation provided by the {@link RequestSecurityValidator} from the application's \r\n{@link ServerConfig#requestSecurityValidator()}. If configured to execute before security \r\nvalidation then *all* requests will be run through this filter. If configured to execute after \r\nsecurity validation then only requests that pass the security validation will be run through \r\nthis filter.\r\n\r\n@return true if this filter should execute before any \r\n{@link ServerConfig#requestSecurityValidator()} configured for this application, false if it \r\nshould execute after {@link ServerConfig#requestSecurityValidator()}.\r\n```"}
{"iteration": 1, "tag": "no", "repo": "GoogleCloudPlatform/DataflowTemplates", "url": "https://github.com/GoogleCloudPlatform/DataflowTemplates/pull/288#discussion_r702523270", "body": "Better description would be:\r\n```\r\nAPI key for access without requiring basic authentication. Refer  https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html#security-api-create-api-key-request\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/1927#discussion_r224675449", "body": "There's a util that returns a secured document builder. Unless you have add specific properties to make sure it is not vulnerable to XXE or XEE attacks"}
{"iteration": 1, "tag": "unclear", "repo": "OHDSI/WebAPI", "url": "https://github.com/OHDSI/WebAPI/pull/1123#discussion_r287792137", "body": "This case is available with disabled or customized security. Anyway from my point of view we cannot rely on externalized setting and omit incoming parameters verification.\r\nTest case is a good idea but I'm not sure what to test?"}
{"iteration": 1, "tag": "unclear", "repo": "ReVanced/revanced-integrations", "url": "https://github.com/ReVanced/revanced-integrations/pull/608#discussion_r1551913548", "body": "The user agent is built upon a specification: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent.\r\n\r\nI think a different approach than sending information to the server is better but a little more complex.\r\nThe announcement could ship an executable with a hash. The app would dynamically execute it and evaluate if the announcement should be shown. This approach gives us a lot of freedom for the future to check for specific conditions such as the patches or app version or other kinds of situations in which we may or may not want the user to show an announcement. This approach is better than assuming that certain information will be sufficient to determine if an announcement should be shown as proposed in this PR, where we assume the patch version will be sufficient.\r\n\r\nThis idea is similar to how Google operates DroidGuard, with the difference that it operates obfuscated, leading to the following concern: Because the client would download executables remotely, this could pose a security risk. The executable must be signed, and the signer must be trusted before the executable is run. In our case, the user must trust us as the signer. Once they trust us, they can check the executable's sign before running it in a trusted manner. The executable source has to be open as well and auditable. If the signer is untrusted, the executable will not be ran, and every announcement could be shown.\r\n\r\nIn terms of bandwidth, the announcement could come with an executable hash. The client can download the executable from a specific endpoint if the hash is present. If it is not present, no evaluation is necessary for that announcement. Evaluation is only necessary once/until the user dismisses the announcement.\r\n\r\nThis idea involves a lot of implementation and more thought and decisions before being realized which is why for now, the change in user agent should be done in a different PR in consideration to this idea."}
{"iteration": 1, "tag": "yes", "repo": "orphan-oss/ognl", "url": "https://github.com/orphan-oss/ognl/pull/59#discussion_r226902841", "body": "No, I meant that we check access first and if the field is not accessible we access it anyway. This can lead to a security vulnerability as basically we ignore if the field is accessible or not.\r\n\r\nWe should throw an exception here instead of `f.get(null);`\r\n\r\n```suggestion\r\n                throw new IllegalAccessException(\"Access to \" + fieldName + \" is forbidden\");\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "alibaba/nacos", "url": "https://github.com/alibaba/nacos/pull/5345#discussion_r612064536", "body": "Please create YamlConstructor by ourselves, otherwise it might cause deserialization security problem"}
{"iteration": 1, "tag": "yes", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/1610#discussion_r731265072", "body": "Maybe we can log the value of the max size here too, don't know if it have any security implications or not btw."}
{"iteration": 1, "tag": "no", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/633#discussion_r146451615", "body": "Shouldn't `httpClient` be initialized in all other constructors (other than `MinioClient(String endpoint, int port, String accessKey, String secretKey, String region, boolean secure, OkHttpClient httpClient)` as well? "}
{"iteration": 1, "tag": "no", "repo": "strongbox/strongbox", "url": "https://github.com/strongbox/strongbox/pull/1421#discussion_r320987805", "body": "`DefaultAuthenticationEventPublisher.class.getName()` would be better than `\"org.springframework.security.authentication.DefaultAuthenticationEventPublisher\"`. What if `spring-security-core` moves it to another package or drop it ?"}
{"iteration": 1, "tag": "yes", "repo": "SasanLabs/VulnerableApp", "url": "https://github.com/SasanLabs/VulnerableApp/pull/357#discussion_r830605711", "body": "use secure random from crypto package for better security."}
{"iteration": 1, "tag": "yes", "repo": "ESAPI/esapi-java-legacy", "url": "https://github.com/ESAPI/esapi-java-legacy/pull/704#discussion_r878637350", "body": "Right, it's erring on the side of security to create a \"safe harbor\" as @planetlevel often says. In general, it's good security practice."}
{"iteration": 1, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2132#discussion_r345437061", "body": "There are two orders actually.\r\n\r\n1. secure HTTPS --> insecure HTTPS --> plain HTTP\r\n1. secure HTTPS --> plain HTTP: no HTTPS attempt in this case.\r\n\r\nBut the order of the `case`s in the `switch` doesn't matter. How exactly do you want to comment this?"}
{"iteration": 1, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2100#discussion_r341609771", "body": "wdyt about `/*insecure*/` style comments on the args here?"}
{"iteration": 1, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2100#discussion_r341630572", "body": "I was thinking some more and I agree with you: with the current allowInsecureRegistries=true/false, we need to do full verification and then failover to no-validate and then plain HTTP.  When we allow insecure-registries on a per-host basis, we can skip to just first disable cert validation.\r\n\r\n(BTW: I was referring to the original `SSLException ex` from line 223.  But unless we have allowInsecureRegistries==true then it should be thrown\u2026. Hmm.)"}
{"iteration": 1, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/1104#discussion_r1132576894", "body": "see comment about `spring-security-comp` module and revert this"}
{"iteration": 1, "tag": "yes", "repo": "dbeaver/dbeaver", "url": "https://github.com/dbeaver/dbeaver/pull/23325#discussion_r1560782682", "body": "Why are you formatting this? This is highly insecure if you're accepting user-specified parameters. Just use the variadic `exec` method and pass each argument separately."}
{"iteration": 1, "tag": "unclear", "repo": "hibernate/hibernate-search", "url": "https://github.com/hibernate/hibernate-search/pull/4124#discussion_r1574382967", "body": "References to `SecurityException` do not need to be removed, because:\r\n\r\n1. It's a runtime exception, so our code will compile even if the code inside the try block does not declare throwing that exception.\r\n2. `SecurityException` is not planned for removal at the moment:\r\n   > We will not deprecate some classes in the java.security package that are related to the Security Manager, for various reasons:\r\n    > *  SecurityException \u2014 A runtime exception thrown by Java APIs when a permission check fails. We may deprecate this API for removal at a later date, but for now the impact of doing so would be too high.\r\n  \r\n   -- https://openjdk.org/jeps/411#subject-doas\r\n\r\n\r\nIMO we'd better keep those during the transition period where we still support JDKs that could possibly be using the security manager."}
{"iteration": 1, "tag": "no", "repo": "SonarSource/sonarlint-intellij", "url": "https://github.com/SonarSource/sonarlint-intellij/pull/645#discussion_r1188526707", "body": "You are right, in the current implementation, it only highlights when an analysis is run after the security hotspot tab was selected.\r\n\r\nI fixed this in the latest commit"}
{"iteration": 1, "tag": "no", "repo": "PaperMC/Velocity", "url": "https://github.com/PaperMC/Velocity/pull/61#discussion_r214418199", "body": "Extremely verbose and unclear streams code. I'd probably do this:\r\n\r\n```\r\nprivate static String generateRandomString() {\r\n    // Generate a _cryptographically secure_ string here, somehow.\r\n}\r\n```"}
{"iteration": 1, "tag": "broken", "repo": "SufficientlySecure/document-viewer", "url": "https://github.com/SufficientlySecure/document-viewer/pull/170#discussion_r52106062", "body": "I'm worried this content provider is a security vulnerability, it looks like any app could use it to read any file on the device? Going to look into it a bit more\n"}
{"iteration": 1, "tag": "unclear", "repo": "nextcloud/android", "url": "https://github.com/nextcloud/android/pull/4859#discussion_r350825296", "body": "Let's not use arrays. Lists are more secure and we can make the code null-safe too."}
{"iteration": 1, "tag": "yes", "repo": "SpongePowered/SpongeAPI", "url": "https://github.com/SpongePowered/SpongeAPI/pull/242#discussion_r22725587", "body": "@simon816 It's certainly possible to do.  Graphically, it looks a little weird(their inventory opens then suddenly closes), so it's not exactly ideal, but it works.  The biggest issue I see, however, is the potential security issues that are created by naively closing the window.  When you close most inventories, you assume that the player(or really, the client) is unable to interact with the inventory.  Hacked clients, however, could still modify the inventory as no management of whether or not they have it open exists.\n\nIf you want to implement this \"correctly\" and in a manner that's consistent. you'd need to add in complete inventory tracking, presumably by interpreting the achievement packet as an openwindow packet and storing the state of whether they actually have their inventory open.\n"}
{"iteration": 1, "tag": "no", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/4385#discussion_r1221477757", "body": "This is for setting up the Kafka broker with a valid SASL config for the respective listener (i.e., L2). If want the Kafka broker to user Kerberos then we have to provide a valid config. It is a test-only thing cause only in tests we need to configure and start Kafka brokers.\r\n\r\nSee https://kafka.apache.org/documentation/#security_jaas_broker for more."}
{"iteration": 1, "tag": "unclear", "repo": "pentaho/pentaho-kettle", "url": "https://github.com/pentaho/pentaho-kettle/pull/7410#discussion_r416691988", "body": "The logic here is to check if the databaseMeta is not null.  With the implementation of the implementation of Security on Datasources this would be set to null if the user didn't have the correct permissions.  This allows the dialog to abort (but not before the system displays the correct error).  Again this does't fix a BUG this is a new FEATURE."}
{"iteration": 1, "tag": "unclear", "repo": "apache/cxf", "url": "https://github.com/apache/cxf/pull/525#discussion_r266759803", "body": "Will do this afternoon but not sure I get it, loadClass does not use the security manager explicitly here (vs setTccl does for instance). Anything Im missing?"}
{"iteration": 1, "tag": "yes", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/407#discussion_r196060411", "body": "I'm not sure about this, but is it possible users might not want this insecure fallback mechanism?  What if they always want to use https or fail?"}
{"iteration": 1, "tag": "unclear", "repo": "ReVanced/revanced-integrations", "url": "https://github.com/ReVanced/revanced-integrations/pull/599#discussion_r1545018667", "body": "This makes the patch dependent on GmsCore support patch. Whats the reason for security exceptions?"}
{"iteration": 1, "tag": "broken", "repo": "azkaban/azkaban-plugins", "url": "https://github.com/azkaban/azkaban-plugins/pull/201#discussion_r41455851", "body": "the original non-security enabled pig job is at line 66-70.  It checks for non-security enabled and runs without a proxy user.\n"}
{"iteration": 1, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1082#discussion_r715034747", "body": "This is what I am thinking, let me know if it makes sense. The problem with infinite retry is the case when the security service never comes up due to x reason. Then we just occupy the thread waiting for service and potentially brick greengrass, because no other code can execute in the meanwhile? If it gives up after x retries, then we can atleast inform the user by logging that \"Startup failed because PKCS is not available\". That way customers can try something different again. x could be a very large value, which kind of mimics infinite retry case, but still gives up and inform the user."}
{"iteration": 1, "tag": "yes", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/4821#discussion_r1383433677", "body": "> `hive.metastore.sasl.enabled = true` means HiveMetastore thrift interface will be secured with SASL. Clients must authenticate with Kerberos. so `UserGroupInformation.isSecurityEnabled()` is not necessary"}
{"iteration": 1, "tag": "unclear", "repo": "airsonic/airsonic", "url": "https://github.com/airsonic/airsonic/pull/1131#discussion_r332975856", "body": "No one has suggested a good solution to this issue, and I don't want fixing this security issue to wait on one.  This side effect has only become a problem because @muff1nman wanted not to keep a \"primary\" admin user, so I've changed the PR to comply with that request.  @muff1nman which would you prefer, keeping this version with this side effect, or going back to the original version of this PR that kept a \"primary\" admin user?"}
{"iteration": 1, "tag": "no", "repo": "SonarSource/sonar-python", "url": "https://github.com/SonarSource/sonar-python/pull/1299#discussion_r1039590279", "body": "(We're going to try to do without this change by caching stub files symbols on sonar-security side instead, so I'm closing this)"}
{"iteration": 1, "tag": "broken", "repo": "JakeWharton/butterknife", "url": "https://github.com/JakeWharton/butterknife/pull/72#discussion_r7026546", "body": "String format was simplicity of implementing, do you prefer inlining?\n\nOn Thursday, October 17, 2013, Jake Wharton wrote:\n\n> In butterknife/src/test/java/butterknife/internal/OnClickTest.java:\n> \n> > -    final JavaFileObject source = JavaFileObjects.forSourceString(\"test.Test\",\n> > -        Joiner.on('\\n').join(\n> > -            \"package test;\",\n> > -            \"import android.app.Activity;\",\n> > -            \"import butterknife.OnClick;\",\n> > -            \"public class Test extends Activity {\",\n> > -            \"  @OnClick(1)\",\n> > -            \"  public static void doStuff() {\",\n> > -            \"  }\",\n> > -            \"}\"));\n> >   +\n> > -    ASSERT.about(javaSource()).that(source)\n> > -        .processedWith(butterknifeProcessors())\n> > -        .failsToCompile()\n> > -        .withErrorContaining(\n> > -            String.format(\"@OnClick methods must not be private or static (%s).\",\n> \n> Any reason you're using String.format for all these instead of just\n> inlining the class and package name?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/JakeWharton/butterknife/pull/72/files#r7024902\n> .\n\n## \n\n## \n\nDandr\u00e9 Allison                                (323) 823-4456\nKeepandShare.com http://www.keepandshare.com\n\n```\n          Schedule & Share. Simply. Securely.\n```\n"}
{"iteration": 1, "tag": "unclear", "repo": "SonarSource/sonarqube", "url": "https://github.com/SonarSource/sonarqube/pull/1287#discussion_r82826882", "body": "As this is a security oriented WS, I reckon it is appropriate not to fail when login does not exist, is already root (or already not root, depending on the action) or user is not active for that matter.\nBut that's arguable.\n"}
{"iteration": 1, "tag": "no", "repo": "MyRobotLab/myrobotlab", "url": "https://github.com/MyRobotLab/myrobotlab/pull/553#discussion_r340415488", "body": "Yeah ... picocli is much better than apache commons cli .. but there are many libraries that could be adopted that could get rid of my hacky re-implemented bs ... \r\nsame comment goes for Guava too - but low priority refactoring at the moment \r\nalso - this would possibly mean another getMetaData() includeInOneJar - since Security is part of core, and core has to be packaged as part of the initial myrobotlab.jar"}
{"iteration": 1, "tag": "no", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/1735#discussion_r195678922", "body": "typo 'genericSecurity'"}
{"iteration": 1, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1587#discussion_r1561429546", "body": "Is there a reason we can\u2019t use the existing security service? It gets the private key and cert file path from the existing configuration and that\u2019s not something that can be changed with a deployment"}
{"iteration": 1, "tag": "unclear", "repo": "apache/jackrabbit-oak", "url": "https://github.com/apache/jackrabbit-oak/pull/660#discussion_r941388377", "body": "hi @joerghoh , good point. i actually was tempted to add it to `UserUtil` in _oak-security-spi_ the reason why i decided against it: the path of a User/Group is a JCR path. so to it 'right' it in a generic way the call would also need a `NamePathMapper` to convert the JCR path to an Oak path as it is required for the` Root.getTree` call. But for all usages (except maybe for one) i know that the user/group has. been retrieved using Oak API which doesn't have any namespace-remapping in place and thus decided to live with the duplication instead."}
{"iteration": 1, "tag": "no", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/456#discussion_r39959134", "body": "The underlying should not be a `Security<Swap>`. A swap is OTC, so the underlying would be a simple field, not a security (which is fungible).\n"}
{"iteration": 1, "tag": "broken", "repo": "BroadleafCommerce/BroadleafCommerce", "url": "https://github.com/BroadleafCommerce/BroadleafCommerce/pull/156#discussion_r5019605", "body": "Perchance add a comment to this class where and why it's used (reference appctx-admin-security, why did you need to subclass csrffilter with this)\n"}
{"iteration": 1, "tag": "yes", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/639#discussion_r84890532", "body": "Use method in IdentityUtil to get a secured Document builder factory instance.\n"}
{"iteration": 1, "tag": "no", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/245#discussion_r172518357", "body": "Maybe make it clear that this is an insecure broadcast."}
{"iteration": 1, "tag": "broken", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/854#discussion_r56540232", "body": "This feels like another oddity. My understanding of the model was that there was a clean separation between securities (linked by ID) and products (directly referenced). This has a security which is directly referenced which confuses the picture slightly. \n\nWhat's it for? Would it be easier to explain the trade / security / product model without this?\n"}
{"iteration": 1, "tag": "unclear", "repo": "OHDSI/WebAPI", "url": "https://github.com/OHDSI/WebAPI/pull/465#discussion_r193238827", "body": "@chrisknoll \r\n\r\nhttps://blogs.msdn.microsoft.com/openspecification/2009/07/10/understanding-unique-attributes-in-active-directory/\r\n\r\n> The UPN must be unique among all security principal objects within the directory forest.\r\n\r\nSo, if UPN is not unique, smth is wrong definetely"}
{"iteration": 1, "tag": "no", "repo": "Alfresco/alfresco-community-repo", "url": "https://github.com/Alfresco/alfresco-community-repo/pull/1210#discussion_r925840339", "body": "We use the variable name `secure` in multiple locations.  Can we make sure that what it means is adequately described in the javadoc? Someone coming to this new may not understand what we mean by \"is considered secure to be executed\""}
{"iteration": 1, "tag": "unclear", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/857#discussion_r290281759", "body": "If we're parsing the mining fields, then maybe it would be wise to cache also the RSKTAG and the ProofOfWork rule wouldn't need to compute this again (it would only call header.getRSKTAG() or something). \r\nI don't like much that the tag-handling code be duplicated in two classes, being this critical to the consensus and security of the platform."}
{"iteration": 1, "tag": "yes", "repo": "apache/phoenix", "url": "https://github.com/apache/phoenix/pull/236#discussion_r109750151", "body": "I would think that this should exit. If the expected ACL could not be set, this is a security risk."}
{"iteration": 1, "tag": "unclear", "repo": "alibaba/nacos", "url": "https://github.com/alibaba/nacos/pull/6680#discussion_r689968578", "body": "If add secured with `NamingResourceParser`, it will parse request can get namespace, group and serviceName.\r\n\r\nBut I see the api that has no request, might cause the api always no permission."}
{"iteration": 1, "tag": "unclear", "repo": "Consensys/ethsigner", "url": "https://github.com/Consensys/ethsigner/pull/204#discussion_r368387323", "body": "We don't have that custom secure random check in EthSigner"}
{"iteration": 1, "tag": "no", "repo": "apache/incubator-kie-optaplanner", "url": "https://github.com/apache/incubator-kie-optaplanner/pull/860#discussion_r463565958", "body": "Sounds good. Thanks for the update!\r\n\r\nI think this doesn't need a unit test. We don't have the bandwidth to create and maintain tests for bugs in 3rd party code that have already been fixed.\r\n\r\nMy only suggestion is to remove the security configuration that is not in fact needed."}
{"iteration": 1, "tag": "yes", "repo": "MariaDB4j/MariaDB4j", "url": "https://github.com/MariaDB4j/MariaDB4j/pull/771#discussion_r1327955235", "body": "@TheKnowles Oh, interesting. Because this test is also the \"Tutorial\" [linked prominently from the READ](https://github.com/MariaDB4j/MariaDB4j#how-java), in a sense this promotes doing something \"insecure\".  I wonder if there is a better solution for this.. What is the `System.getProperty(\"user.name\")` used for here? How does one typically do this in real applications? Should the test perhaps insert a dedicated test user? Or set the root user to a random password, which is used when connecting? Could this entire TutorialTest just not use the (DB, not OS) root user at all? Perhaps improving this is worth a separate smaller PR, as a pre-requisite for this?"}
{"iteration": 1, "tag": "broken", "repo": "jenkinsci/embeddable-build-status-plugin", "url": "https://github.com/jenkinsci/embeddable-build-status-plugin/pull/17#discussion_r41965982", "body": "I mean, there is no security configuration in this test, so I think it will work with/without login.\n"}
{"iteration": 1, "tag": "unclear", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/1994#discussion_r299299983", "body": "Is it secure to use hashmap here?"}
{"iteration": 1, "tag": "no", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/609#discussion_r53484173", "body": "This feature registers additional REST endpoints. We need to make sure there are appropriate Spring Security rules for these.\n"}
{"iteration": 1, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2132#discussion_r345434465", "body": "I don't believe it can ever happen. The host portion from `URL` cannot have `:`. And the port is an integer value.\r\n\r\nAlthough there can be a case where `https://example.com` and `https://example.com:443` will end up two different keys (the former goes into `https://example.com:-1`), but I intended to leave them separate without further optimization. In practice the number of actual hosts involved in Jib would be merely 2 to 3 at most especially if a registry is insecure, and this keeps the code simple."}
{"iteration": 1, "tag": "no", "repo": "influxdata/influxdb-java", "url": "https://github.com/influxdata/influxdb-java/pull/450#discussion_r190816053", "body": ">Ok., I don't think you got my point of view. Let me be more clear: If you have 100 different loglevels, would you still keep using a switch/case statement? AFAIK, your code can be replaced and \"secured\" with a try/catch with no collateral effects.\r\n\r\nOK, got it, fixed as your comment (use of Enum.valueOf(,))\r\nTks"}
{"iteration": 1, "tag": "unclear", "repo": "dockstore/dockstore", "url": "https://github.com/dockstore/dockstore/pull/4564#discussion_r743975600", "body": "1. Log the actual exception (second parameter).\r\n2. Filename/step would be nice as well.\r\n3. I think you should throw the exception. There's a catch at the bottom that this would ideal hit. I don't know if you can wrap it one of those exception classes, or if it's already one of them? But in any case, if there were a \"regular\" YAML error, we stop processing and throw a CustomWebApplication, so we should do the same here if it's a security error."}
{"iteration": 1, "tag": "no", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/245#discussion_r172475391", "body": "I think \"secure broadcast\" is probably the more standard term when wanting to emphasize that this is broadcast in a cryptographic setting.  "}
{"iteration": 1, "tag": "yes", "repo": "apache/nifi-registry", "url": "https://github.com/apache/nifi-registry/pull/10#discussion_r140031965", "body": "Is there any downside to having the username and password hardcoded? I suppose if an admin needs to secure the DB file they can use the OS files system permissions to prevent file access. Is there any other use case that a configurable user/pass would facilitate?"}
{"iteration": 1, "tag": "no", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/10901#discussion_r761151116", "body": "this sample is not using security at all. Does it compile?\r\n\r\nThese lines will not return anything: \r\n\r\n```\r\nclientId = configuration.getString(\"oauth.clientId\");\r\nclientSecret = configuration.getString(\"oauth.clientSecret\");\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/2037#discussion_r601159117", "body": "I tried creating a connector without the mysql JDBC URL specified properly and it went through,\r\n\r\nplease see below,\r\n\r\nCREATE CONNECTOR mysql_test_2\r\nTYPE 'mysql'\r\nURL 'jdbc://'\r\nCOMMENT 'test connector'\r\nWITH DCPROPERTIES (\r\n\"hive.sql.dbcp.username\"=\"hive1\",\r\n\"hive.sql.dbcp.password\"=\"hive1\");\r\n\r\nCREATE CONNECTOR mysql_test_3\r\nTYPE 'mysql'\r\nURL 'jdbc:derby://nightly1.apache.org:3306/hive1'\r\nCOMMENT 'test connector'\r\nWITH DCPROPERTIES (\r\n\"hive.sql.dbcp.username\"=\"hive1\",\r\n\"hive.sql.dbcp.password\"=\"hive1\");\r\n\r\n- I am not saying they are wrong, but we should probably call this out in the documentation. Document that URLs are not verified.\r\n- Another thing I noticed is that the password is displayed in plain\r\n  text on the command line. This used be considered a security problem\r\n  in a product I worked in a past life. But I notice that an external\r\n  table can be created with this semantics. I guess it is acceptable\r\n  here.\r\n\r\n- It is also stored in plain text in the metastore, please see below,\r\n\r\nCREATE TABLE `DATACONNECTOR_PARAMS` (\r\n  `NAME` VARCHAR(128) NOT NULL,\r\n  `PARAM_KEY` VARCHAR(180) NOT NULL,\r\n  `PARAM_VALUE` VARCHAR(4000),\r\n  PRIMARY KEY (`NAME`, `PARAM_KEY`),\r\n  CONSTRAINT `DATACONNECTOR_NAME_FK1` FOREIGN KEY (`NAME`) REFERENCES `DATACONNECTORS` (`NAME`) ON DELETE CASCADE\r\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\r\n\r\n  Again I am not saying this is a problem, but I thought I can call this out to you.\r\n"}
{"iteration": 1, "tag": "unclear", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/385#discussion_r64887231", "body": "hm, the problem is caused by some assumptions made in the different constructors. Seems not as easy:\n\n `\npublic MinioClient(String endpoint) throws InvalidEndpointException, InvalidPortException {\n    this(endpoint, 0, null, null, true);\n  }\n`\n\nStrange assumption, that this has to be a secure connection, if the endpoint is not interpreted. I try some more cleanup...\n"}
{"iteration": 1, "tag": "yes", "repo": "caelum/mamute", "url": "https://github.com/caelum/mamute/pull/135#discussion_r49964032", "body": "Apologies for jumping in. The current pull request is not usable with Asian languages. I would think just using URL encoding is the simplest and covers the most cases for the least work particularly as browsers now [handle the display of Unicode urls](http://stackoverflow.com/questions/2742852/unicode-characters-in-urls) better. There are a few characters such as \"?\" that are still displayed as % hex code in the url input box but there are good security reasons for that. Realizing this is a question site and most titles will end in a question mark that would show up as %3F  perhaps the only time a character should be stripped is when the title ends in a question mark.\n"}
{"iteration": 1, "tag": "unclear", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/15417#discussion_r1189398270", "body": "Sorry I may not be very clear before.\r\n\r\nI think using `OpenID` is fine to represent the security definition type."}
{"iteration": 1, "tag": "broken", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/836#discussion_r56185562", "body": "Yes its common. Every security class needs to do this.\n"}
{"iteration": 1, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/3424#discussion_r688815151", "body": "No history for this server, so we enable retrying only when failover is disabled (i.e., if HTTPS fails, then it means failure). OTOH, if failover is enabled, we don't want to retry so that we can quickly failover to test insecure HTTPS."}
{"iteration": 1, "tag": "yes", "repo": "Consensys/ethsigner", "url": "https://github.com/Consensys/ethsigner/pull/9#discussion_r265845218", "body": "Changed config to now take InetAddress so that trailing spaces are no longer an issue. Also changed to use loopback as the default same what Pantheon is doing. Seems like a better default for security."}
{"iteration": 1, "tag": "unclear", "repo": "airsonic/airsonic", "url": "https://github.com/airsonic/airsonic/pull/863#discussion_r279144228", "body": "So I re-evaluate that code, this service must not be get by component scan but declared in global security. And it will be move to the security package. \r\n\r\nAll initialisation about security it's set there and the service just use the global component.  \r\n"}
{"iteration": 1, "tag": "yes", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/1004#discussion_r143331006", "body": "I don't want to automatically follow a random URL that was given....sounds like not very secure behaviour "}
{"iteration": 1, "tag": "yes", "repo": "orphan-oss/ognl", "url": "https://github.com/orphan-oss/ognl/pull/59#discussion_r226902651", "body": "No, I meant that we check access first and if the field is not accessible we access it anyway. This can lead to a security vulnerability as basically we ignore if the field is accessible or not.\r\n\r\nWe should throw an exception here instead of `f.get(null);`\r\n\r\n```suggestion\r\n                throw new IllegalAccessException(\"Access to \" + fieldName + \" is forbidden\");\r\n```"}
{"iteration": 1, "tag": "unclear", "repo": "anthonyraymond/joal", "url": "https://github.com/anthonyraymond/joal/pull/172#discussion_r1020203323", "body": "I've always disabled UPnP on my routers due it being a slight security concern. And torrenting still works."}
{"iteration": 1, "tag": "yes", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/537#discussion_r257201191", "body": "Why this debug log is removed? Not sure, if it's there for any security issues."}
{"iteration": 1, "tag": "unclear", "repo": "apache/cordova-plugin-inappbrowser", "url": "https://github.com/apache/cordova-plugin-inappbrowser/pull/886#discussion_r660005280", "body": "The flaw applies to all versions of chrome webview prior to 83.0.4103.106.\r\n\r\nOlder android devices may not be able to run the latest webview which would contain the security patch (I know android 5.1 for example only have version 76 available on the google play store).\r\n\r\nThese android versions are still versions Cordova officially supports, which is why this mitigation line is necessary.\r\n\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2020-6506#range-6218332\r\n\r\nIf this line blocks the feature to handle intent links, then we cannot support the feature at this time. If you need this feature, you can fork this plugin, but I would recommend increasing your min sdk to a level where you can ensure that all your users can be running the patched webview."}
{"iteration": 1, "tag": "yes", "repo": "orphan-oss/ognl", "url": "https://github.com/orphan-oss/ognl/pull/59#discussion_r226902765", "body": "No, I meant that we check access first and if the field is not accessible we access it anyway. This can lead to a security vulnerability as basically we ignore if the field is accessible or not.\r\n\r\nWe should throw an exception here instead of `f.get(null);`\r\n\r\n```suggestion\r\n                throw new IllegalAccessException(\"Access to \" + fieldName + \" is forbidden\");\r\n```"}
{"iteration": 1, "tag": "unclear", "repo": "strongbox/strongbox", "url": "https://github.com/strongbox/strongbox/pull/987#discussion_r252823522", "body": "We unproxy everything from the orientdb so it wouldn't happen in orientdb case. However, I agree there is some potential bug field here.\r\n\r\nWhat do you think about adding and using here something like this:\r\n```\r\n.....\r\npublic interface ArtifactCoordinates  ....\r\n{\r\n     ....\r\n    Class<T> getType();\r\n\r\n}\r\n```\r\n\r\nand in maven case for example:\r\n```\r\npublic class MavenArtifactCoordinates ....\r\n{\r\n    @Override\r\n    public Class<MavenArtifactCoordinates> getType()\r\n    {\r\n        return MavenArtifactCoordinates.class;\r\n    }\r\n```\r\nfor security needs ?"}
{"iteration": 1, "tag": "no", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/4385#discussion_r1218055609", "body": "I missed the fact that the method is part of hadoop security and cant be modified, In that case make sense to send the string. Thanks for clarifying."}
{"iteration": 1, "tag": "yes", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/199#discussion_r154892558", "body": "How would you sample a random seed that all parties agree on which is more secure than just the 0 seed? \r\nBut yes, I will note it in the Javadoc"}
{"iteration": 1, "tag": "yes", "repo": "pusher/pusher-websocket-java", "url": "https://github.com/pusher/pusher-websocket-java/pull/234#discussion_r400028563", "body": "Also indeed it would be more secure to parse it into an array which we can immediately clear (e.g. fill with zeros) when we no longer needed it (after L109). If there were issues with parsing in into `byte[]` maybe `char[]` would work? I would expect Gson to support it out of the box, however even if not it could be achieved with a simple type adapter."}
{"iteration": 1, "tag": "yes", "repo": "ExpediaGroup/adaptive-alerting", "url": "https://github.com/ExpediaGroup/adaptive-alerting/pull/284#discussion_r244935056", "body": "Yeah. This is to secure the URL paths `/api/*` via an incoming OAuth2 token. We have a `configure` method in security class as well which contains the URL paths that should be secured in our application. \r\n\r\n"}
{"iteration": 1, "tag": "no", "repo": "jenkinsci/role-strategy-plugin", "url": "https://github.com/jenkinsci/role-strategy-plugin/pull/43#discussion_r217917441", "body": "The real configuration variable is in RoleBasedAuthorizationStrategy. That one is currently marshed/unmarshed explicitly in that RoleBasedAuthorizationStrategy.ConverterImpl. I just followed what was already there. Does the ConvererImpl entirely need to be converted or do you want the new variable managed elsewhere? \r\n\r\nThis RoleMap.caseInsensitiveUser is a copy needed to create the TreeSet  when RoleMap.addRole is called. I made it transient because I didn't want it stored in config.xml and final to show that it was not the config.xml variable. It loads correctly at startup from config.xml, but I need to recreate all the TreeSets when it's changed realtime. \r\n\r\nconfig.xml\r\n  ```<authorizationStrategy \r\n  class=\"com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\">\r\n      <caseInsensitiveUser>true</caseInsensitiveUser>\r\n```\r\n\r\nnew variable placement on Configure Global Security page.\r\n\r\n![caseinsensitveconfiguresecurity](https://user-images.githubusercontent.com/9009353/45597754-b7894c80-b99e-11e8-83cd-4d2733d4ebd1.png)\r\n\r\n"}
{"iteration": 1, "tag": "yes", "repo": "strongbox/strongbox", "url": "https://github.com/strongbox/strongbox/pull/1768#discussion_r424702989", "body": "Excuse me for joining in late, but two things:\r\n1) If the password is null, append `null`. (This should never be null, BUT it might as well be the case that during some test, someone might have overlooked it. Having it printed out in the logs as `null` should not be a security concern, in my opinion).\r\n2) If the password is set, then I think the better option would be to mask it with `********`. (People will know it's masked/redacted, for sure).\r\n"}
{"iteration": 1, "tag": "yes", "repo": "debezium/debezium", "url": "https://github.com/debezium/debezium/pull/4005#discussion_r1064678222", "body": "is it possible to use [DefaultCredentialsProvider](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html#credentials-chain) or allow usage of other credential providers like InstanceProfileCredentialsProvider ?\r\n\r\nit will enable using issuance profile credentials. for security user might not want to generate access,secret key"}
{"iteration": 1, "tag": "no", "repo": "dockstore/dockstore", "url": "https://github.com/dockstore/dockstore/pull/3234#discussion_r379527052", "body": "Ahh, I understand the issue now. Though this is out of the scope for the PR.\r\n\r\n1. The security scheme is defined multiple times (redundantly)\r\n2. The name is different from Swagger (slightly annoying)\r\n3. The name is not a constant somewhere (so easy to get the case wrong).\r\n\r\nI'll make a SEAB issue later.\r\n\r\n"}
{"iteration": 1, "tag": "no", "repo": "alfio-event/alf.io", "url": "https://github.com/alfio-event/alf.io/pull/525#discussion_r222831752", "body": "this will not work in dev mode, should be\r\n\r\n`config.setSecure(environment.acceptsProfiles(Initializer.PROFILE_LIVE ))`"}
{"iteration": 1, "tag": "no", "repo": "GreenDelta/olca-app", "url": "https://github.com/GreenDelta/olca-app/pull/193#discussion_r906701317", "body": "Better always cast in a secure way:\r\n\r\n```java\r\nif (registry.get(pane) instanceof IOPaneEditPart pane) {\r\n  cc.add(pane.getCommand(request));\r\n}\r\n```"}
{"iteration": 1, "tag": "yes", "repo": "cloudant/sync-android", "url": "https://github.com/cloudant/sync-android/pull/146#discussion_r31307361", "body": "I'm not convinced the above dance to find the brackets offers any security? Is it worthwhile?\n"}
{"iteration": 1, "tag": "unclear", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/137#discussion_r130849508", "body": "This has the disadvantage of not working in a complex network setup. The servers from BDbS have two network interfaces and host resolving is complicated for the application. Especially if it is run in a docker container.\r\n\r\nMight I suggest a different strategy (or none at all) for checking the host name and party identifying? A simple version could just to forward your own contact details - given the security of the protocols this handshake only need to be correct, not unbreakable"}
{"iteration": 1, "tag": "yes", "repo": "gchq/Gaffer", "url": "https://github.com/gchq/Gaffer/pull/1010#discussion_r124256860", "body": "Should this be taken from an option on the operation? Putting split points from a table of data which has visibilities to protect the data into /tmp could be unsecure."}
{"iteration": 1, "tag": "unclear", "repo": "microsoft/Git-Credential-Manager-for-Mac-and-Linux", "url": "https://github.com/microsoft/Git-Credential-Manager-for-Mac-and-Linux/pull/26#discussion_r51255764", "body": "In isKeychainAvailable(), is there a better way to check availability of the keychain than an attempted write and delete?  Just wondering if a different 'security' command line argument might quickly reveal the same thing, or a system call via JNA.  Perhaps the write/delete is fine.\n"}
{"iteration": 1, "tag": "unclear", "repo": "Apicurio/apicurio-registry", "url": "https://github.com/Apicurio/apicurio-registry/pull/1495#discussion_r634452943", "body": "I just disabled it until I adapt the other security stuff to the new situation. So what's missing here is a todo comment."}
{"iteration": 1, "tag": "yes", "repo": "testcontainers/testcontainers-java", "url": "https://github.com/testcontainers/testcontainers-java/pull/4303#discussion_r682410777", "body": "@bsideup we tried it before but they saw it as security problem :)\r\n\r\nhttps://github.com/Azure/azure-sdk-for-java/pull/22990\r\n\r\nThe first URL pem file download implementation I introduced in PR is also suggested by them.\r\n\r\nAnyway, copyFileFromContainer is saved the world :)"}
{"iteration": 1, "tag": "unclear", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533919491", "body": "Thanks for the explanation - to be clear, I wasn't asking about *why* the exception message needs to go the status keeper, but under what circumstances it needs to be wrapped and re-thrown.\r\n\r\nIt is unfortunate to have to guess the intention of whether an exception is useful to explain to the customer vs one that is not - Exceptions and their messages are part of our interface with the customer - granted this is not like being part of the SDK - but I'm assuming that these status messages will either end up in the status service or when the customer looks at the result of the deployment. Is that correct? If it the exception can get in front of the customer *has* to have some meaning - even if it is not the fault of the customer. It's their device that has an error - and we are the ones that are going to get tickets and have to explain.\r\n\r\nLooking at the PackageLoadingExceptions that the [ComponentStore](https://github.com/aws/aws-greengrass-nucleus/blob/master/src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java#L130) is throwing, we are going to get message given back to the status keeper like:\r\n`Unable to copy recipe for '<my awesome component>' to component store due to: Failed to save package recipe\"`\r\nwhich doesn't provide any helpful context when entered into the status keeper.\r\n\r\nThere is also an issue to improve the error messages in the component store - lets suppose it does change to add more info -and whoever updates the ComponentStore doesn't know how the exception is used downstream. We might get end up with something like:\r\n`Unable to copy recipe for '<my awesome component>' to component store due to: Failed to save package recipe for '<my awesome component>` because of No space left on device\"`\r\nIn this (hypothetical) case it would have been better to leave the PackageLoadingException alone and not modify the exception message.\r\n\r\nFor the JSON processing example here, even just changing the phrasing to something like `Unable to parse the deployment request - invalid JSON` would at least tell you something (and it might be worth logging the deployment doc here so that it can be captured - unless we have security reasons not to log that)"}
{"iteration": 1, "tag": "broken", "repo": "apache/syncope", "url": "https://github.com/apache/syncope/pull/362#discussion_r930879619", "body": "## Use of a potentially broken or risky cryptographic algorithm\n\nCryptographic algorithm [EC](1) may not be secure, consider using a different algorithm.\n\n[Show more details](https://github.com/apache/syncope/security/code-scanning/1120)"}
{"iteration": 1, "tag": "no", "repo": "MinusKube/SmartInvs", "url": "https://github.com/MinusKube/SmartInvs/pull/120#discussion_r403779381", "body": "for parameters, we should know information about \"the parameters won't change\" for security."}
{"iteration": 1, "tag": "yes", "repo": "GoogleCloudPlatform/DataflowTemplates", "url": "https://github.com/GoogleCloudPlatform/DataflowTemplates/pull/628#discussion_r1160214841", "body": "We are getting rid of Jackson on Codehaus for security purposes -- please use com.fasterxml.jackson. It should be a relatively drop-in replacement"}
{"iteration": 1, "tag": "no", "repo": "smallrye/smallrye-reactive-messaging", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/1334#discussion_r689577815", "body": "Apparently, it can change if the previous one allows it :) BTW I just saw that from Java 17 Security Manager is deprecated for removal: https://openjdk.java.net/jeps/411"}
{"iteration": 1, "tag": "no", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/825#discussion_r356922606", "body": "```\r\npriyankminio1.com \r\npriyankminio1.com \r\npriyankminio1.com [REQUEST s3.GetBucketLocation] 23:12:28.870\r\npriyankminio1.com GET /photos?location=\r\npriyankminio1.com Host: priyankminio1.com\r\npriyankminio1.com X-Forwarded-Proto: http\r\npriyankminio1.com X-Real-Ip: 192.168.1.8\r\npriyankminio1.com Content-Length: 0\r\npriyankminio1.com X-Amz-Date: 20191206T231228Z\r\npriyankminio1.com X-Amz-Content-Sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\npriyankminio1.com X-Forwarded-For: 192.168.1.8\r\npriyankminio1.com Accept-Encoding: gzip\r\npriyankminio1.com Authorization: AWS4-HMAC-SHA256 Credential=minio/20191206/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=0c644df63e1e3273827868546c0f6dd3b6113829c8b722669f7df61cc88eecaa\r\npriyankminio1.com User-Agent: MinIO (amd64; amd64) minio-java/dev\r\npriyankminio1.com \r\npriyankminio1.com [RESPONSE] [23:12:28.870] [ Duration 160\u00b5s  \u2191 137 B  \u2193 367 B ]\r\npriyankminio1.com 200 OK\r\npriyankminio1.com Vary: Origin\r\npriyankminio1.com X-Amz-Request-Id: 15DDEB1BB443DAE5\r\npriyankminio1.com X-Xss-Protection: 1; mode=block\r\npriyankminio1.com Accept-Ranges: bytes\r\npriyankminio1.com Content-Length: 128\r\npriyankminio1.com Content-Security-Policy: block-all-mixed-content\r\npriyankminio1.com Content-Type: application/xml\r\npriyankminio1.com Server: MinIO/DEVELOPMENT.GOGET\r\npriyankminio1.com <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<LocationConstraint xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"></LocationConstraint>\r\npriyankminio1.com \r\npriyankminio1.com [REQUEST s3.HeadObject] 23:12:28.899\r\npriyankminio1.com HEAD /photos/priyraj-cisco.jpg\r\npriyankminio1.com Host: priyankminio1.com\r\npriyankminio1.com Accept-Encoding: gzip\r\npriyankminio1.com User-Agent: MinIO (amd64; amd64) minio-java/dev\r\npriyankminio1.com X-Amz-Content-Sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\npriyankminio1.com X-Amz-Date: 20191206T231228Z\r\npriyankminio1.com X-Forwarded-For: 192.168.1.8\r\npriyankminio1.com X-Forwarded-Proto: http\r\npriyankminio1.com Authorization: AWS4-HMAC-SHA256 Credential=minio/20191206/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=fe6a407883a094fd6dfb3dcf6e526739b9febb663e66840d5686ba03e66259fe\r\npriyankminio1.com Content-Length: 0\r\npriyankminio1.com X-Real-Ip: 192.168.1.8\r\npriyankminio1.com \r\npriyankminio1.com [RESPONSE] [23:12:28.899] [ Duration 203\u00b5s  \u2191 137 B  \u2193 324 B ]\r\npriyankminio1.com 200 OK\r\npriyankminio1.com Content-Type: image/jpeg\r\npriyankminio1.com ETag: \"00000000000000000000000000000000-1\"\r\npriyankminio1.com Vary: Origin\r\npriyankminio1.com X-Xss-Protection: 1; mode=block\r\npriyankminio1.com Accept-Ranges: bytes\r\npriyankminio1.com Content-Length: 14780\r\npriyankminio1.com Content-Security-Policy: block-all-mixed-content\r\npriyankminio1.com Last-Modified: Wed, 04 Dec 2019 19:27:31 GMT\r\npriyankminio1.com Server: MinIO/DEVELOPMENT.GOGET\r\npriyankminio1.com X-Amz-Request-Id: 15DDEB1BB5F9B7DA\r\n\r\npriyank@priyank-MacBookPro: examples$ java -cp \"/home/priyank/ws/minio/src/github/minio-java/api/build/libs/minio-6.0.12-DEV-all.jar:.\" StatObject\r\nObjectStat{bucket='photos', name='priyraj-cisco.jpg', contentType='image/jpeg', createdTime=Wed Dec 04 11:27:31 PST 2019, length=0, etag='W/00000000000000000000000000000000-1'}\r\n\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream process non buffered upstream\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 recv: eof:0, avail:1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 recv: fd:17 6 of 4096\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 31 s:0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0D s:1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0A s:3\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 20 s:4\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http proxy out buf 000055820A9DF3C3 1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0D s:5\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0A s:6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http output filter \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http copy filter: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http postpone filter \"/minio/admin/v2/trace?all=true&err=false\" 000055820A9EC2B0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunk: 1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:1 f:0 000055820A9E05A0, pos 000055820A9E05A0, size: 3 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:0 f:0 0000000000000000, pos 000055820A9DF3C3, size: 1 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:0 f:0 000055820A9E0508, pos 0000558209465C7A, size: 2 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter: l:0 f:1 s:6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter limit 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 writev: 6 of 6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter 0000000000000000\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http copy filter: 0 \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 event timer del: 17: 7830794\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 event timer add: 17: 60000:7831294\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream dummy handler\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream process non buffered upstream\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 recv: eof:0, avail:1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 recv: fd:17 6 of 4096\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 31 s:0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0D s:1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0A s:3\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 20 s:4\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http proxy out buf 000055820A9DF3C3 1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0D s:5\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunked byte: 0A s:6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http output filter \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http copy filter: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http postpone filter \"/minio/admin/v2/trace?all=true&err=false\" 000055820A9EC2B0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http chunk: 1\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:1 f:0 000055820A9E0508, pos 000055820A9E0508, size: 3 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:0 f:0 0000000000000000, pos 000055820A9DF3C3, size: 1 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 write new buf t:0 f:0 000055820A9E05A0, pos 0000558209465C7A, size: 2 file: 0, size: 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter: l:0 f:1 s:6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter limit 0\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 writev: 6 of 6\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http write filter 0000000000000000\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http copy filter: 0 \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 event timer del: 17: 7831294\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 event timer add: 17: 60000:7831794\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:12:28 [debug] 1276#1276: *170 http upstream dummy handler\r\n\r\n\r\n\r\n\r\npriyankminio1.com \r\npriyankminio1.com [RESPONSE] [23:14:17.004] [ Duration 144\u00b5s  \u2191 137 B  \u2193 367 B ]\r\npriyankminio1.com 200 OK\r\npriyankminio1.com X-Xss-Protection: 1; mode=block\r\npriyankminio1.com Accept-Ranges: bytes\r\npriyankminio1.com Content-Length: 128\r\npriyankminio1.com Content-Security-Policy: block-all-mixed-content\r\npriyankminio1.com Content-Type: application/xml\r\npriyankminio1.com Server: MinIO/DEVELOPMENT.GOGET\r\npriyankminio1.com Vary: Origin\r\npriyankminio1.com X-Amz-Request-Id: 15DDEB34E18C7EEC\r\npriyankminio1.com <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<LocationConstraint xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"></LocationConstraint>\r\npriyankminio1.com \r\npriyankminio1.com [REQUEST s3.HeadObject] 23:14:17.033\r\npriyankminio1.com HEAD /photos/priyraj-cisco.jpg\r\npriyankminio1.com Host: priyankminio1.com\r\npriyankminio1.com X-Forwarded-Proto: http\r\npriyankminio1.com X-Real-Ip: 192.168.1.8\r\npriyankminio1.com Authorization: AWS4-HMAC-SHA256 Credential=minio/20191206/us-east-1/s3/aws4_request, SignedHeaders=accept-encoding;host;x-amz-content-sha256;x-amz-date, Signature=c368c0705954434174147e2cb447b68889d372bd121abdb95d1afe86cda0c947\r\npriyankminio1.com Content-Length: 0\r\npriyankminio1.com X-Amz-Content-Sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\r\npriyankminio1.com X-Amz-Date: 20191206T231417Z\r\npriyankminio1.com Accept-Encoding: identity\r\npriyankminio1.com User-Agent: MinIO (amd64; amd64) minio-java/dev\r\npriyankminio1.com X-Forwarded-For: 192.168.1.8\r\npriyankminio1.com \r\npriyankminio1.com [RESPONSE] [23:14:17.033] [ Duration 188\u00b5s  \u2191 137 B  \u2193 324 B ]\r\npriyankminio1.com 200 OK\r\npriyankminio1.com Content-Type: image/jpeg\r\npriyankminio1.com Server: MinIO/DEVELOPMENT.GOGET\r\npriyankminio1.com Vary: Origin\r\npriyankminio1.com X-Amz-Request-Id: 15DDEB34E33F5BED\r\npriyankminio1.com X-Xss-Protection: 1; mode=block\r\npriyankminio1.com Accept-Ranges: bytes\r\npriyankminio1.com Content-Security-Policy: block-all-mixed-content\r\npriyankminio1.com Last-Modified: Wed, 04 Dec 2019 19:27:31 GMT\r\npriyankminio1.com Content-Length: 14780\r\npriyankminio1.com ETag: \"00000000000000000000000000000000-1\"\r\n\r\npriyank@priyank-MacBookPro: examples$ java -cp \"/home/priyank/ws/minio/src/github/minio-java/api/build/libs/minio-6.0.12-DEV-all.jar:.\" StatObject\r\nObjectStat{bucket='photos', name='priyraj-cisco.jpg', contentType='image/jpeg', createdTime=Wed Dec 04 11:27:31 PST 2019, length=14780, etag='00000000000000000000000000000000-1'}\r\n\r\n\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream process non buffered upstream\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 recv: eof:0, avail:1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 recv: fd:17 6 of 4096\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 31 s:0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0D s:1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0A s:3\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 20 s:4\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http proxy out buf 000055820A9DF3C3 1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0D s:5\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0A s:6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http output filter \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http copy filter: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http postpone filter \"/minio/admin/v2/trace?all=true&err=false\" 000055820A9EC2B0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunk: 1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:1 f:0 000055820A9E05A0, pos 000055820A9E05A0, size: 3 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:0 f:0 0000000000000000, pos 000055820A9DF3C3, size: 1 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:0 f:0 000055820A9E0508, pos 0000558209465C7A, size: 2 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter: l:0 f:1 s:6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter limit 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 writev: 6 of 6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter 0000000000000000\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http copy filter: 0 \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 event timer del: 17: 7939794\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 event timer add: 17: 60000:7940294\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream dummy handler\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream process non buffered upstream\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 recv: eof:0, avail:1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 recv: fd:17 6 of 4096\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 31 s:0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0D s:1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0A s:3\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 20 s:4\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http proxy out buf 000055820A9DF3C3 1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0D s:5\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunked byte: 0A s:6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http output filter \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http copy filter: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http postpone filter \"/minio/admin/v2/trace?all=true&err=false\" 000055820A9EC2B0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http chunk: 1\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:1 f:0 000055820A9E0508, pos 000055820A9E0508, size: 3 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:0 f:0 0000000000000000, pos 000055820A9DF3C3, size: 1 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 write new buf t:0 f:0 000055820A9E05A0, pos 0000558209465C7A, size: 2 file: 0, size: 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter: l:0 f:1 s:6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter limit 0\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 writev: 6 of 6\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http write filter 0000000000000000\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http copy filter: 0 \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 event timer del: 17: 7940294\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 event timer add: 17: 60000:7940794\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream request: \"/minio/admin/v2/trace?all=true&err=false\"\r\n2019/12/06 11:14:17 [debug] 1276#1276: *170 http upstream dummy handler\r\n\r\n```"}
{"iteration": 2, "tag": "no", "repo": "molgenis/molgenis", "url": "https://github.com/molgenis/molgenis/pull/6410#discussion_r128463389", "body": "As mentioned in person by @fdlk: the indexing is broken on the security branch so SEARCH will not work as expected."}
{"iteration": 2, "tag": "yes", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/42035#discussion_r428769254", "body": "If you are going to manipulate `i` outside of the `for` line, would you kindly replace this with a `while` loop? When I see `while` I'm automatically on guard for all kinds of sneaky stuff. But `for` lulls me into a false sense of security."}
{"iteration": 2, "tag": "no", "repo": "fabric8io/kubernetes-client", "url": "https://github.com/fabric8io/kubernetes-client/pull/5007#discussion_r1155121885", "body": "I eventually decided to push a change that reflects what you initially asked for, @andreaTP. \r\nHaving more than one duplicated field seems really to be a rare (and I'd say bad) use case, which shouldn't be supported.\r\nAdditionally, this allows for us to enforce a more strict requirement about the reason for having such duplicated fields, i.e. one of them has to be deprecated. \r\n\r\nThe implementation looks better this way to me, let me know what you think. "}
{"iteration": 2, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/20549#discussion_r725751099", "body": "My concern with this approach is that if a dev forgets this annotation you potentially have a security issue."}
{"iteration": 2, "tag": "no", "repo": "eclipse-leshan/leshan", "url": "https://github.com/eclipse-leshan/leshan/pull/736#discussion_r325640206", "body": "The security object xml has been updated and a link to the OSCORE object introduced in commit ecebdfa09ce8028fa02d0d26c448ce3029069479"}
{"iteration": 2, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/3306#discussion_r675261494", "body": "As I mentioned in notes, last argument decides whether to enable bloom filter or not. In this patch, I am haven't fixed all indexes. But it is possible to fix other index to work for virtual keys. So, added this additional argument whether to enable bloom filter or not. Even for virtual keyed table, if one wants to use regular bloom index, they should be able to. "}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/16070#discussion_r1357911739", "body": "Yes, there are. for each run there is a part like this. with `# Benchmark`:\r\n```\r\n# JMH version: 1.37\r\n# VM version: JDK 22-internal, OpenJDK 64-Bit Server VM,......in...\r\n# VM invoker:.....\r\n# VM options: -XX:NativeMemoryTracking=detail --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -Djava.library.path=...\r\n# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)\r\n# Warmup: 2 iterations, 1 s each\r\n# Measurement: 5 iterations, 1 s each\r\n# Timeout: 10 min per iteration\r\n# Threads: 1 thread, will synchronize iterations\r\n# Benchmark mode: Average time, time/op\r\n# Benchmark: org.openjdk.bench.vm.runtime.NMTBenchmark.NMTDetail.mixAallocateFreeMemory\r\n# Parameters: (N = 100000, THREADS = 4)\r\n```"}
{"iteration": 2, "tag": "no", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367156139", "body": "> The spec is parsed, I am seeing the above code successfully generate authMethods:\r\n> \r\n> ```\r\n> authMethods = {ArrayList@2705}  size = 5\r\n>  0 = {CodegenSecurity@2714} \"CodegenSecurity{name='api_key', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key', isKeyInQuery=false, isKeyInHeader=true, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n>  1 = {CodegenSecurity@2715} \"CodegenSecurity{name='api_key_query', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key_query', isKeyInQuery=true, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n>  2 = {CodegenSecurity@2716} \"CodegenSecurity{name='bearer_test', type='http', scheme='bearer', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=false, isBasicBearer=true, bearerFormat='JWT', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n>  3 = {CodegenSecurity@2717} \"CodegenSecurity{name='http_basic_test', type='http', scheme='basic', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=true, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n>  4 = {CodegenSecurity@2718} \"CodegenSecurity{name='petstore_auth', type='oauth2', scheme='null', hasMore=false, isBasic=false, isOAuth=true, isApiKey=false, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='implicit', authorizationUrl='http://petstore.swagger.io/api/oauth/dialog', tokenUrl='null', scopes=[{scope=write:pets, hasMore=true, description=modify pets in your account}, {scope=read:pets, hasMore=null, description=read your pets}], isCode=false, isPassword=false, isApplication=false, isImplicit=true}\"\r\n> ```\r\n> \r\n> Are you invoking it inside processOpts?\r\n\r\nno, from the constructor. There are a few test cases when the \"openAPI\" field is null, so I have to test for that too. "}
{"iteration": 2, "tag": "no", "repo": "qbicc/qbicc", "url": "https://github.com/qbicc/qbicc/pull/569#discussion_r712274821", "body": "Got it; thanks!  Missed that in the 2132 lines & GitHub had helpfully elided the details of the big diffs when I was doing a search."}
{"iteration": 2, "tag": "yes", "repo": "OpenClinica/OpenClinica", "url": "https://github.com/OpenClinica/OpenClinica/pull/3552#discussion_r1091079575", "body": "I merged OC4 fix, and tested at my local, looks like the fix of OC4 can't fix the issue reported in OC3, OC4 fix is to handle XSS when user/attacker  enter value at input fields from matrix table, but OC3 reported the XSS issue is user/attacker start XSS attack from URL. "}
{"iteration": 2, "tag": "yes", "repo": "Aiven-Open/klaw", "url": "https://github.com/Aiven-Open/klaw/pull/60#discussion_r984603279", "body": "If I am understanding this correctly it's putting the exception message into the API response. If this is so I would remove it because it can be a security risk (you can still of course log the entire exception on server side but the client shouldn't any any information about how an exception is caused because this can be abused)."}
{"iteration": 2, "tag": "broken", "repo": "osiam/osiam", "url": "https://github.com/osiam/osiam/pull/149#discussion_r53873641", "body": "The reason is that I wasn't secure enough in my streams api usage. Using the Splitter makes the whole discussion moot. However, I just consulted the scim RFC and we have a bug here: not \"schemas\" but \"id\" is supposed to be always returned. I'll file a bug. \n"}
{"iteration": 2, "tag": "yes", "repo": "apache/jackrabbit-oak", "url": "https://github.com/apache/jackrabbit-oak/pull/510#discussion_r821138015", "body": "I'm concerned about this.  How accessible is this method?  In particular, is it exported so that it can be called outside the bundle?  I worry about security implications - it's giving access to cloud storage based on any valid connection string passed in to the method."}
{"iteration": 2, "tag": "no", "repo": "JakeWharton/dagger-reflect", "url": "https://github.com/JakeWharton/dagger-reflect/pull/50#discussion_r257083039", "body": "\"Set\" should be \"Map\"\r\n\r\n```suggestion\r\n    return \"Map\" + entryBindings;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/10241#discussion_r1346301775", "body": "Why do you need to pass this callbacks?\r\n\r\n```suggestion\r\n            new OTelTracingTelemetry(openTelemetry),\r\n```"}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/19930#discussion_r705180263", "body": "for this one, I know that s shitty, maybe a sorted hasmap with dedicated item with comparator. based on index is better. even for performance.\r\nBut I am not happy of the index technique so I want ot have this finished and discuss about solution design and refactoring."}
{"iteration": 2, "tag": "no", "repo": "wildfly/wildfly-core", "url": "https://github.com/wildfly/wildfly-core/pull/3135#discussion_r172868857", "body": "This is really what is fixing the standalone case. I would say that this is the only required change to align standalone and domain. There is no problem to disable an already disabled deployment, CLI command allows to do that.\r\n"}
{"iteration": 2, "tag": "no", "repo": "OHDSI/WebAPI", "url": "https://github.com/OHDSI/WebAPI/pull/1193#discussion_r292408106", "body": "In addition to above comment, there is an issue when some of sources became unavailable. During such case export analysis to CSV also becomes unavailable. Probably, it's better to export results for working sources and notify a user that some sources doesn't responsible."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/99956#discussion_r1342401075", "body": "typo:\r\n```suggestion\r\n    static final int QUERY_COMPRESS_THRESHOLD_CHARS = KB.toIntBytes(5);\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/4643#discussion_r571945677", "body": "fixed all Boolean to boolean, thanks for that.\r\nYes all old service offerings prior to upgrade will be marked as dynamically scalable. This is made not to break existing VMs because service offering was not part of dynamic scaling decision before. After upgrade we need to bypass that check for old VMs, which can be achieved by marking them true."}
{"iteration": 2, "tag": "no", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/3887#discussion_r331526022", "body": "```suggestion\r\n            daoTEIs.forEach( t -> {\r\n```"}
{"iteration": 2, "tag": "no", "repo": "gridgain/gridgain", "url": "https://github.com/gridgain/gridgain/pull/668#discussion_r341056138", "body": "```suggestion\r\n * Security session registry.\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "airsonic/airsonic", "url": "https://github.com/airsonic/airsonic/pull/1349#discussion_r336758297", "body": "Necessary for Spring Boot 2 Security. It has changed by default to bcrypt. Need to specify here to keep it open text"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/72186#discussion_r635112110", "body": "Naming and position for this are uninspired IMO, the setting is not used by anything related to the node (it is node-scoped, but that's a different story).\r\nI suggest we move this to [Security](https://github.com/elastic/elasticsearch/blob/master/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java) and rename to `xpack.security.enrollment.enabled`.\r\nAlso, please mention in the comments that this setting is supposed to be set by the elasticsearch start-up script and should normally not be set by administrators."}
{"iteration": 2, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/467#discussion_r50194515", "body": "I believe so.\n"}
{"iteration": 2, "tag": "yes", "repo": "aicis/fresco", "url": "https://github.com/aicis/fresco/pull/389#discussion_r916600560", "body": "This might not be secure since the caller will know the discrete log of the \"random\" element."}
{"iteration": 2, "tag": "no", "repo": "apache/iotdb", "url": "https://github.com/apache/iotdb/pull/1496#discussion_r468456634", "body": "Just to make sure, the `devicesNodes` is a parameter but is modified in the method, so I hope the caller will not still use it as `deviceNodes` any more."}
{"iteration": 2, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/6571#discussion_r961433111", "body": "```suggestion\r\n               type = CommandType.MAP,\r\n               description = \"parameters other than zoneId/serviceOfferringId/templateId of the auto deployed virtual machine.\\n\"\r\n                       + \"Example: otherdeployparams[0].name=serviceofferingid&otherdeployparams[0].value=a7fb50f6-01d9-11ed-8bc1-77f8f0228926&otherdeployparams[1].name=rootdisksize&otherdeployparams[1].value=10 .\\n\"\r\n                       + \"Possible parameters are \\\"rootdisksize\\\", \\\"diskofferingid\\\",\\\"size\\\", \\\"securitygroupids\\\", \\\"overridediskofferingid\\\", \\\"keypairs\\\", \\\"affinitygroupids'\\\" and  \\\"networkids\\\".\")\r\n```"}
{"iteration": 2, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4059#discussion_r292515042", "body": "Formatting? \r\n\r\n```\r\nif ( ...) {\r\n...\r\n\r\n```"}
{"iteration": 2, "tag": "no", "repo": "eclipse-hono/hono", "url": "https://github.com/eclipse-hono/hono/pull/2122#discussion_r473658358", "body": "how about using a random value for an *ext* property in order to make sure that the result set will always be scoped to devices that have this property? This should also safeguard against any side effects that might occur when running test cases concurrently."}
{"iteration": 2, "tag": "no", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/2207#discussion_r770424786", "body": "Add comment."}
{"iteration": 2, "tag": "unclear", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1078#discussion_r561436973", "body": "@timtay-microsoft is this something users initialize?"}
{"iteration": 2, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3201#discussion_r157554454", "body": "I think `is(new VersionNumber(\"1.34\"))` is better than the current assertion:\r\n\r\nThis test currently relies on the fact that the version of `command-launcher` in `split-plugins.txt` depends on an older version of  `script-security` than what is bundled in `@LocalData`. If we updated the version of `command-launcher` in `split-plugins.txt` to one with a newer `script-security` dependency (maybe for a security fix of `command-launcher`?), the test would still pass, but for the wrong reason. Using your assertion would cause the test to fail when `split-plugins.txt` was updated in that scenario."}
{"iteration": 2, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/1312#discussion_r102509370", "body": "In changing how these run, can you use the logger.info(\"Message is {}\", new Object[]{\"value\"}) way of doing things. At the slf4j level this is lazy so the strings and calculations aren't computed if it's not at a high enough log level."}
{"iteration": 2, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/10064#discussion_r1342840669", "body": "```suggestion\r\n         *  - args[2]: hdr config options\r\n```\r\n\r\naccidental?"}
{"iteration": 2, "tag": "unclear", "repo": "neow3j/neow3j", "url": "https://github.com/neow3j/neow3j/pull/597#discussion_r652619842", "body": "This should be `Secp256r1` now. The CI did not catch that, since the integration test files are not included in the build.\r\n\r\n```suggestion\r\n                publicKey(pubKey), byteArray(signature), integer(NamedCurve.Secp256r1));\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/6499#discussion_r589048240", "body": "`appendTemplateMapping` -> `resolveTemplateMapping`.\r\nPlease add comments about return value."}
{"iteration": 2, "tag": "no", "repo": "jakartaee/jsonp-api", "url": "https://github.com/jakartaee/jsonp-api/pull/212#discussion_r340050288", "body": "What is the point of this change? Is it required for everyone to update existing imports to fit the setup of his IDE or should the one doing a change update his/her IDE to follow conventions used by the project? I have nothing against changing wildcard imports to fqn ones but I don't like every other change to come up with re-sorted imports"}
{"iteration": 2, "tag": "unclear", "repo": "apache/cxf", "url": "https://github.com/apache/cxf/pull/1645#discussion_r1453523233", "body": "IIUC, \"PKCS7Padding\" is only available from BouncyCastle provider, in JDK default security provider, we need to use the name \"PKCS5Padding\" instead, but this doesn't mean that JDK default provider doesn't support \"PKCS7Padding\" since AES which is supported by JDK default provider actually requires \"PKCS7Padding\".  So in JDK default security provider, \"PKCS5Padding\" is a legacy name convention which also covers \"PKCS7Padding\" if I read a few related discussions correctly.\r\n\r\nFor example, this one here\r\nhttps://crypto.stackexchange.com/questions/9043/what-is-the-difference-between-pkcs5-padding-and-pkcs7-padding\r\n```\r\nMany cryptographic libraries use an identifier indicating PKCS#5 or PKCS#7 to define the same padding \r\nmechanism. The identifier should indicate PKCS#7 if block sizes other than 8 are used within the calculation. \r\nSome cryptographic libraries such as the [SUN provider in Java](http://docs.oracle.com/javase/7/docs\r\n/technotes/guides/security/StandardNames.html#Cipher) indicate PKCS#5 where PKCS#7 should be used - \r\n\"PKCS5Padding\" should have been \"PKCS7Padding\". This is - with high probability - a legacy from the time \r\nthat only 8 byte block ciphers such as (triple) DES symmetric cipher were available.\r\n```\r\n\r\nAnd this one here\r\nhttps://copyprogramming.com/howto/java-security-nosuchalgorithmexception-cannot-find-any-provider-supporting-aes-ecb-pkcs7padding\r\n```\r\n The Sun JCE provider, which is Java's implementation, required a padding method for block size of 16 bytes.\r\n To fulfill this requirement, PKCS#7 specifies a padding method that is similar to PKCS#5 padding. The only \r\ndifference is that PKCS#7 padding is defined for block sizes ranging from 2 to 255 bytes, which is the \r\nmaximum value of a byte if it encodes a zero-based unsigned integer. However, the padding method was \r\nalready available with the name \"PKCS5Padding\" . Instead of introducing a new name, the existing name \r\n\"PKCS5Padding\" was utilized.\r\n\r\n\r\nAt this point, it is crucial that the Sun provider offers support for \"PKCS7Padding\" since PKCS#5 padding is \r\nnot appropriate. This is not only a problem for Java Naming issue , but it affects all developers who are \r\nattempting to implement cryptographic protocols or transfer other software to Java. While waiting for the Sun \r\nprovider to offer support, it is recommended to use \"PKCS5Padding\" instead of \"PKCS7Padding\" . \r\n\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "Catrobat/Catroid", "url": "https://github.com/Catrobat/Catroid/pull/3515#discussion_r393454605", "body": "I don't think the import method in ProjectListFragment would work because it implemented to receive a Uri with scheme of \"file\". Whereas almost all apps share file through content URI for security. "}
{"iteration": 2, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/20549#discussion_r723138870", "body": "The way I have things now, this is mandatory (the security feature is opt-in only). Moreover it needs to be added to each method separately.\r\n\r\nI opted to make this restrictive to start out, but I am not sure if it's a great experience..."}
{"iteration": 2, "tag": "no", "repo": "minio/minio-java", "url": "https://github.com/minio/minio-java/pull/829#discussion_r360622058", "body": "java version `openjdk version \"11.0.5\" 2019-10-15`\r\nThe below code is from this PR `API.md` file. \r\n ``` \r\n try {\r\n      /* play.min.io for test and development. */\r\n      MinioClient minioClient = new MinioClient(\"https://play.min.io\", \"Q3AM3UQ867SPQQA43P2F\", \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\");\r\n      minioClient.traceOn(System.out);\r\n      String sqlExpression = \"select * from S3Object\";\r\n      InputSerialization is = InputSerialization.csv(null, false, null, null, FileHeaderInfo.USE, null, null, null);\r\n      OutputSerialization os = OutputSerialization.csv(null, null, null, QuoteFields.ASNEEDED, null);\r\n      SelectResponseStream stream = minioClient.selectObjectContent(\"sinha\", \"test.csv\", sqlExpression, is, os, true, null, null, null);\r\n      byte[] buf = new byte[512];\r\n      int bytesRead = stream.read(buf, 0, buf.length);\r\n      System.out.println(new String(buf, 0, bytesRead, StandardCharsets.UTF_8));\r\n      Stats stats = stream.stats();\r\n      System.out.println(\"bytes scanned: \" + stats.bytesScanned());\r\n      System.out.println(\"bytes processed: \" + stats.bytesProcessed());\r\n      System.out.println(\"bytes returned: \" + stats.bytesReturned());\r\n      stream.close();\r\n    } catch (MinioException e) {\r\n      System.out.println(\"Error occurred: \" + e);\r\n    }\r\n```\r\n\r\nOutput \r\n```\r\n/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -javaagent:/opt/idea-IC-191.6183.87/lib/idea_rt.jar=34865:/opt/idea-IC-191.6183.87/bin -Dfile.encoding=UTF-8 -classpath /home/ashish/code/go/src/github.com/minio/minio-java/api/build/libs/minio-6.0.12-DEV-all.jar:/home/ashish/client/target/classes SelectObjectExample\r\n---------START-HTTP---------\r\nGET /sinha?location= HTTP/1.1\r\nHost: play.min.io\r\nUser-Agent: MinIO (amd64; amd64) minio-java/dev\r\nx-amz-content-sha256: UNSIGNED-PAYLOAD\r\nx-amz-date: 20191221T015201Z\r\nAuthorization: AWS4-HMAC-SHA256 Credential=*REDACTED*/20191221/us-east-1/s3/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=*REDACTED*\r\n\r\nHTTP/1.1 200\r\nServer: nginx/1.10.3 (Ubuntu)\r\nDate: Sat, 21 Dec 2019 01:52:03 GMT\r\nContent-Type: application/xml\r\nContent-Length: 137\r\nConnection: keep-alive\r\nAccept-Ranges: bytes\r\nContent-Security-Policy: block-all-mixed-content\r\nVary: Origin\r\nX-Amz-Bucket-Region: us-east-1\r\nX-Amz-Request-Id: 15E23FF0EAC2F5B8\r\nX-Xss-Protection: 1; mode=block\r\n\r\n----------END-HTTP----------\r\nException in thread \"main\" java.lang.IllegalArgumentException\r\n\tat com.google.api.client.repackaged.com.google.common.base.Preconditions.checkArgument(Preconditions.java:108)\r\n\tat com.google.api.client.util.Preconditions.checkArgument(Preconditions.java:37)\r\n\tat com.google.api.client.util.DataMap.<init>(DataMap.java:45)\r\n\tat com.google.api.client.util.Data.mapOf(Data.java:186)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.computeAliases(XmlNamespaceDictionary.java:248)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.computeAliases(XmlNamespaceDictionary.java:266)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.computeAliases(XmlNamespaceDictionary.java:266)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.computeAliases(XmlNamespaceDictionary.java:266)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.startDoc(XmlNamespaceDictionary.java:236)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.serialize(XmlNamespaceDictionary.java:227)\r\n\tat com.google.api.client.xml.XmlNamespaceDictionary.toStringOf(XmlNamespaceDictionary.java:174)\r\n\tat com.google.api.client.xml.GenericXml.toString(GenericXml.java:66)\r\n\tat io.minio.MinioClient.executeReq(MinioClient.java:1092)\r\n\tat io.minio.MinioClient.execute(MinioClient.java:1078)\r\n\tat io.minio.MinioClient.selectObjectContent(MinioClient.java:5818)\r\n\tat SelectObjectExample.main(SelectObjectExample.java:48)\r\n\r\n```\r\nCan you tell what wrong i am doing here."}
{"iteration": 2, "tag": "no", "repo": "openjdk/skara", "url": "https://github.com/openjdk/skara/pull/1443#discussion_r1049945210", "body": "```suggestion\r\n            // All the issues associated with this pr either don't have csr issue or the csr issue has been withdrawn,\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "pentaho/pentaho-kettle", "url": "https://github.com/pentaho/pentaho-kettle/pull/6943#discussion_r334641292", "body": "It should not be getting called from anywhere.  It would be called during client SSL authentication.  The only usage we have here is in initiating a connection to the server.  Having the exception in place stops us from unknowingly extending the usage of this to a client SSL situation where it wouldn't be secured."}
{"iteration": 2, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/6204#discussion_r141248852", "body": "in my test setup, I'm authenticated. but jets3t can not return a not-null account owner.... I'm not sure why this is the case, maybe something changed on Google Cloud service side... I can't find the root cause yet. So I can only treat this as a possible corner case."}
{"iteration": 2, "tag": "no", "repo": "microsoft/ApplicationInsights-Java", "url": "https://github.com/microsoft/ApplicationInsights-Java/pull/449#discussion_r146095734", "body": "So the default signature of the constructor for JDBC driver version 6.2 is the one I changed. With the previous signature we were missing the constructor instrumentation. Now with the older drivers it might well be possible that signature was one mentioned before but nonetheless I believe enterprise can upgrade to latest JDBC drivers."}
{"iteration": 2, "tag": "no", "repo": "hortonworks/cloudbreak", "url": "https://github.com/hortonworks/cloudbreak/pull/13952#discussion_r1072175719", "body": "if thunderhead PR will also be merged very soon then it will just be a matter of few days where feature won't work locally. other option is to revert mock thunderhead changes and do them only after thunderhead is merged. I don't know who works on these features and need to test locally. "}
{"iteration": 2, "tag": "unclear", "repo": "OpenRefine/OpenRefine", "url": "https://github.com/OpenRefine/OpenRefine/pull/1398#discussion_r158998602", "body": "It seems quite dangerous to do this if we allow types to be any string."}
{"iteration": 2, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/462#discussion_r49652760", "body": "We certainly could.\n"}
{"iteration": 2, "tag": "no", "repo": "aws-amplify/amplify-android", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399346359", "body": "So the thing with this is that it's intentionally left open because the customer needs to be able to pass a map of any key/value pairs. There's no limit on what they could be."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/82885#discussion_r790355302", "body": "```suggestion\r\n                // \"Alerts as data\" public indices used in Security Solution\r\n```\r\n?"}
{"iteration": 2, "tag": "no", "repo": "googleapis/java-bigtable-hbase", "url": "https://github.com/googleapis/java-bigtable-hbase/pull/2149#discussion_r275166331", "body": "Please move `Pipeline.create(options)` to a return statement...\r\n\r\n```\r\nreturn Pipeline.create(options)\r\n  .apply(...)\r\n  ... ;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "TheAlgorithms/Java", "url": "https://github.com/TheAlgorithms/Java/pull/4456#discussion_r1348317486", "body": "```suggestion\r\n     * @param s the input string\r\n```"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/8097#discussion_r715689276", "body": "nit:\r\n```suggestion\r\n      final Optional<PlanInfo> oldPlanInfo\r\n```"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/3354#discussion_r326604173", "body": "nit: formatting\r\n\r\n```suggestion\r\n        hybridQueryIdGenerator\r\n```"}
{"iteration": 2, "tag": "no", "repo": "Freeyourgadget/Gadgetbridge", "url": "https://github.com/Freeyourgadget/Gadgetbridge/pull/1416#discussion_r255359269", "body": "I think we should use something similarto setDeviceConnectionState(State.WAITING_FOR_RECONNECT) to show the user that a reconnect is in progress."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/66295#discussion_r547218180", "body": "The way that this is used looks suspicious to me. I see it being used with runtime fields, which don't have a corresponding mapper normally. With this method they end up being exposed as ordinary fields to tests?"}
{"iteration": 2, "tag": "no", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/5548#discussion_r559976769", "body": "Can you elaborate a bit more about the root cause of the issue associated to this PR and the fix provided? Apparently, this change is suggesting that the way of initializing the `ClientConfig` is the problem, but it is not explicitly state anywhere. If this is the case, is the `Utils.buildClientConfig()` method handling cases in which system tests are executed with and without security enabled?"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/1103#discussion_r179417511", "body": "Could use `Arrays.fill(charArray, '-')` and then create the separator string once and use here and on line 331?\r\n"}
{"iteration": 2, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/6944#discussion_r173921945", "body": "What if we want to add fields in the future which could be large or expensive to compute? Specifying the set of fields we want gives us a lot more flexibility in what this endpoint can be used for."}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/5822#discussion_r739371971", "body": "Thanks for highlighting that: Changed `\"system\"` to `\"the system-wide\"` - that's what was originally meant by `\"system resolver\"` (f660cc6ecc7a31c83de220160b9fd8d0fbacd1be)."}
{"iteration": 2, "tag": "yes", "repo": "rancher/cattle", "url": "https://github.com/rancher/cattle/pull/2717#discussion_r118734840", "body": "We have no ability to really create a hard coded setting so a setting to hide settings just creates a security problem.  I would opt for a change in design in that you can create a setting that has a hidden=true flag on it.  Then we can properly encrypt the values.  If that is too much up front effort and you want to do a two phased approach, then start here with a hardcoded list of properties to hide.\r\n\r\nA third option is to have a regexp setting of what to hide, like `.*password.*|.*secret.*`.  If it was one simple static setting then we could put it in the `Dockerfile` of `rancher/server` and it wouldn't be changeable by the user\r\n\r\n@cjellick "}
{"iteration": 2, "tag": "no", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/3294#discussion_r1167229662", "body": "Why was the check for offline added?  I think this code is trying to detect holes in the metadata table to know that maybe it did not see every tablet.  Would be another PR, but may be able to add checkConsistency() call when building ample that should avoid holes."}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/21781#discussion_r758983340", "body": "I agree but the problem is that if you annotate a class with an interceptor binding then all methods (incl. inherited ones) should be intercepted and sometimes you need to extend a class from a different package which you don't control. Such an extended class may declare e.g. a package-private method that accepts a private param type. And since you're not able to modify the extended class you'd be screwed. An example from the [original issue](https://github.com/quarkusio/quarkus/issues/18477) is `java.util.concurrent.ThreadPoolExecutor` and `ThreadPoolExecutor.runWorker(Worker)`."}
{"iteration": 2, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/72300#discussion_r681512972", "body": "Realms wouldn't be built if security is off"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/9052#discussion_r857901033", "body": "Sure, that makes sense. Will add parens to make it clear."}
{"iteration": 2, "tag": "yes", "repo": "questdb/questdb", "url": "https://github.com/questdb/questdb/pull/3145#discussion_r1172322625", "body": "nit: do we have any plans to secure function calls? I don't see any existing functions that could be used as a critical security breach, but this might change in future."}
{"iteration": 2, "tag": "unclear", "repo": "spotify/styx", "url": "https://github.com/spotify/styx/pull/612#discussion_r230329023", "body": "I think in many cases, we will receive a normal service account to validate. It feels beneficial to avoid making that API call. The tradeoff is of course less secure."}
{"iteration": 2, "tag": "no", "repo": "algorithmfoundry/Foundry", "url": "https://github.com/algorithmfoundry/Foundry/pull/67#discussion_r106510260", "body": "This seems dangerous: Returning the raw data will allow the caller the ability to alter our own data directly and voids encapsulation.  Is there a reason not to use ArrayList<Integer> and return Collections.unmodifiableList()?"}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/31124#discussion_r1104630141", "body": "```suggestion\r\n        return new NewCookie.Builder(cookieName)\r\n                .value(cookieValue)\r\n                .path(path)\r\n                .domain(domain)\r\n                .version(version)\r\n                .maxAge(maxAge)\r\n                .expiry(expiry)\r\n                .secure(secure)\r\n                .httpOnly(httpOnly)\r\n                .sameSite(sameSite)\r\n                .build();\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/14039#discussion_r795035547", "body": "```suggestion\r\n                .thenAccept(entry -> {\r\n```"}
{"iteration": 2, "tag": "no", "repo": "enonic/xp", "url": "https://github.com/enonic/xp/pull/8620#discussion_r560795035", "body": "int values?\r\n```suggestion\r\n        final int[] intValues = {1, 2, 3};\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "strimzi/strimzi-kafka-operator", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/5073#discussion_r705527698", "body": "This method is called for every client request. So we are recreating this trust store file and password for every single request? Is that strictly required? Can this not be done once when the client is created? Or is there some security thing I am missing?"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/37707#discussion_r249822352", "body": "```suggestion\r\n             templates.remove(SECURITY_TEMPLATE_NAME);\r\n             templates.remove(\"security_audit_log\");\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/349#discussion_r65374220", "body": "I'm on the fence about appending a random string to the client ID to ensure uniqueness. This could lead to laziness when creating the clientId and making it so the user doesn't know where a connection came from (when looking at the AWS UI). Wouldn't it be better to not append the random string and instead force a user to create a better clientIds?\n"}
{"iteration": 2, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2268#discussion_r136482603", "body": "\u2753 If we do, should we perform additional checks to make sure we're not loading a malicious bundle? This might be unnecessary if we are comfortable with the encryption of the zip file as our only countermeasure. "}
{"iteration": 2, "tag": "broken", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/10209#discussion_r27009735", "body": "Should we make this method either abstract or return false to avoid traps? For instance I was worried that CompletionFieldMapper does not override it to return false. Maybe it works since completion fields are tokenized so the default value is false but I think making it explicit would be less error-prone?\n"}
{"iteration": 2, "tag": "no", "repo": "hortonworks/cloudbreak", "url": "https://github.com/hortonworks/cloudbreak/pull/14735#discussion_r1190259909", "body": "so if restart timeout occurs we just assume everything is ok and continue the flow?"}
{"iteration": 2, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/7258#discussion_r1200318430", "body": "If this PR is applied to `support/nifi-1.x`, we should be aware that the server startup text is changing.  Prior to this PR, the startup text looked like this:\r\n```\r\n2023-05-22 06:14:36,044 INFO [main] org.eclipse.jetty.server.Server Started @10783ms\r\n2023-05-22 06:14:36,048 INFO [main] o.apache.nifi.registry.jetty.JettyServer NiFi Registry has started. The UI is available at the following URLs:\r\n2023-05-22 06:14:36,049 INFO [main] o.apache.nifi.registry.jetty.JettyServer http://192.168.1.146:18080/nifi-registry\r\n2023-05-22 06:14:36,049 INFO [main] o.apache.nifi.registry.jetty.JettyServer http://10.19.8.251:18080/nifi-registry\r\n2023-05-22 06:14:36,049 INFO [main] o.apache.nifi.registry.jetty.JettyServer http://127.0.0.1:18080/nifi-registry\r\n2023-05-22 06:14:36,050 INFO [main] o.apache.nifi.registry.BootstrapListener Successfully initiated communication with Bootstrap\r\n2023-05-22 06:14:36,050 INFO [main] org.apache.nifi.registry.NiFiRegistry Registry initialization took 9841683488 nanoseconds (9 seconds).\r\n```\r\n\r\nNow it looks like this:\r\n```\r\n2023-05-22 06:23:40,314 INFO [main] org.eclipse.jetty.server.Server Started @10053ms\r\n2023-05-22 06:23:40,315 INFO [main] o.apache.nifi.registry.jetty.JettyServer Started Server on http://0.0.0.0:18080/nifi-registry\r\n2023-05-22 06:23:40,316 INFO [main] o.apache.nifi.registry.BootstrapListener Successfully initiated communication with Bootstrap\r\n2023-05-22 06:23:40,317 INFO [main] org.apache.nifi.registry.NiFiRegistry Started Application in 9.26 seconds (9260276707 ns)\r\n```\r\n\r\nThis may not be an issue, but I wanted to at least point it out in case there are any users who detect server startup using any of these log statements.  The line `org.eclipse.jetty.server.Server Started` is at least consistent."}
{"iteration": 2, "tag": "no", "repo": "open-telemetry/opentelemetry-java-instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515742259", "body": "Though I wonder if supporting stream is actually important. Looking at this, it seems like the body is encoded into JSON anyways so there is no benefit in the stream handler - so maybe it's a reasonable and practical limitation for us to just detect that event type?"}
{"iteration": 2, "tag": "no", "repo": "wso2/product-microgateway", "url": "https://github.com/wso2/product-microgateway/pull/3059#discussion_r968005866", "body": "This is AND\r\n```\r\nSecurity:\r\n   - api_key: []\r\n      oauth: [] \r\n```\r\n\r\nThis is OR\r\n```\r\nSecurity:\r\n   - api_key: []\r\n   - oauth: [] \r\n```\r\nWe only support OR"}
{"iteration": 2, "tag": "no", "repo": "OpenAPITools/openapi-style-validator", "url": "https://github.com/OpenAPITools/openapi-style-validator/pull/48#discussion_r329413227", "body": "typo?\r\n\r\n```suggestion\r\n    void initEach() {\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "apache/zookeeper", "url": "https://github.com/apache/zookeeper/pull/1919#discussion_r1340759056", "body": "> We added the 2 optimized list of cipher suites for performance reasons. GCM ciphers are better under JDK8, while CBC ciphers are better with JDK9+. We support all of them, just building a list for cipher preference.\r\n\r\nGiven that TLS is off by default, I suspect people who turn it on are doing so for security considerations. Performance is a deciding factor, but I think it's trying to read the mind of users by making a pre-made set, and further deciding what is \"better\" for a given JDK. GCM and CBC are very different in terms of the security features.\r\n\r\nI would leave the optimizations to the user's JDK distro and just stick with the defaults, rather than trying to override it with hard-coded lists. It'd be better to just write a simple doc that makes suggestions for users, or point them to an external resource that stays up to date with the latest in security news, if that's a concern, rather than hard-code your own lists."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/97630#discussion_r1277323428", "body": "```suggestion\r\n        req.setJsonEntity(\"{\\\"security-tokens\\\": {\\\"index.auto_expand_replicas\\\": \\\"0-all\\\"}}\"); \r\n```"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/7812#discussion_r671881964", "body": "Make deep-copy instead of suppress spotbug warning."}
{"iteration": 2, "tag": "no", "repo": "SORMAS-Foundation/SORMAS-Project", "url": "https://github.com/SORMAS-Foundation/SORMAS-Project/pull/3135#discussion_r509161874", "body": "You're right - that will probably lead to confusion. Still I think it's not okay to go with the approach of just putting the information into the URL, so we need to find some kind of solution.\r\n\r\nA VERY hacky approach could be to automatically also apply the UUID to the filter field that is visible to the user. So the UUID filter would actually be applied twice, but that should be fine. Clicking on \"Reset filters\" would then also get rid of the \"hidden\" filter applied by clicking the button in the event. Do you think that makes sense?"}
{"iteration": 2, "tag": "no", "repo": "apache/phoenix", "url": "https://github.com/apache/phoenix/pull/1660#discussion_r1306915553", "body": "?\r\n```suggestion\r\n            \"SELECT TENANT_ID, TABLE_SCHEM, TABLE_NAME, TTL FROM \" +\r\n```"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/62916#discussion_r507247291", "body": "```suggestion\r\n    // the fields below are used exclusively for \"security_config_change\" type of events, and show the configuration\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/7986#discussion_r225314432", "body": "This could be a security issue if the user expects the group mapping to work but it silently fails. Perhaps we could disable FUSE group mapping by default, and error out if the user tries to map an unknown user/group? "}
{"iteration": 2, "tag": "no", "repo": "apache/solr", "url": "https://github.com/apache/solr/pull/759#discussion_r836503361", "body": "Ahhh sorry I forgot to mention this Mike, I had already fixed it on my curator branch when we were talking."}
{"iteration": 2, "tag": "no", "repo": "vert-x3/vertx-mysql-postgresql-client", "url": "https://github.com/vert-x3/vertx-mysql-postgresql-client/pull/74#discussion_r113190446", "body": "Unsure if there might be a need to overwrite this: Do all SQL databases need to replace `CALL` with `SELECT`?"}
{"iteration": 2, "tag": "yes", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/13546#discussion_r1163691088", "body": "mmm... maybe this is not a problem in this particular case as the importer is considering the user running it the one present in the params and it is validating all ownerships against it, but it could potentially still be a security issue if we can get some metadata that we shouldn't have access to.\r\n\r\nNow my doubt is, is it safe that AsyncTaskExecutor is not carrying the SecurityContext? Even more that we assume that a `null` authentication object is equivalent to `ALL` superuser?"}
{"iteration": 2, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/19851#discussion_r1144258938", "body": "I think we can remove `Optional<ServiceUnitId> topic` and pass just `bundleUnit` only to getOwnershipAsync, like the one below. Let the leader own all system namespace topics, and we don't auto-unload system topics.\r\n\r\n```\r\nprivate CompletableFuture<Optional<String>> getOwnershipAsync(ServiceUnitId bundleUnit) {\r\n        final String bundle = bundleUnit.toString();\r\n        CompletableFuture<Optional<String>> owner;\r\n        if (isSystemNamespace(bundleUnit.toString())) {\r\n            owner = serviceUnitStateChannel.getChannelOwnerAsync();\r\n        } else {\r\n            owner = serviceUnitStateChannel.getOwnerAsync(bundle);\r\n        }\r\n        return owner;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "AxonFramework/AxonFramework", "url": "https://github.com/AxonFramework/AxonFramework/pull/2487#discussion_r1033434623", "body": "Why is the `message` package-private?\r\n```suggestion\r\n    private final EventMessage<Object> message = GenericEventMessage.asEventMessage(\"payload\");\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/16879#discussion_r1100224526", "body": "I assumed it had something to do with security, the health probes may be bound to loopback only? I didn't check this. Using the built-in probes would be far more convenient "}
{"iteration": 2, "tag": "broken", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/3623#discussion_r37162321", "body": "Is this a change in behavior from earlier? Or just an artifact of not being able to use `AbstractIterator` (but I thought the logic from that class has been copied in this PR)?\n"}
{"iteration": 2, "tag": "no", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/23312#discussion_r1208973840", "body": "In the mv rewrite case, there are only join and scan operator."}
{"iteration": 2, "tag": "yes", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/4328#discussion_r42423214", "body": "I think in general, the framework shouldn't log user data as it can easily become a security breach. For example, if I configure the script transform wrongly then suddenly all user sensitive data that is supposed to be readable by me is now readable by whoever can read system log (most likely operation people).\n"}
{"iteration": 2, "tag": "no", "repo": "vesoft-inc/nebula-java", "url": "https://github.com/vesoft-inc/nebula-java/pull/543#discussion_r1317028786", "body": "connect/read timeout is the same?"}
{"iteration": 2, "tag": "yes", "repo": "confluentinc/kafka-connect-elasticsearch", "url": "https://github.com/confluentinc/kafka-connect-elasticsearch/pull/77#discussion_r110420065", "body": "Could we change the Type here to `Type.PASSWORD`? This will mask the output when the value is logged so passwords aren't accidentally leaked via logs."}
{"iteration": 2, "tag": "no", "repo": "lightsail-network/java-stellar-sdk", "url": "https://github.com/lightsail-network/java-stellar-sdk/pull/276#discussion_r413956847", "body": "Isn't `xdr.Transaction` a default now?\r\n\r\n```suggestion\r\n  public Transaction toXdr() {\r\n```"}
{"iteration": 2, "tag": "no", "repo": "stanford-futuredata/macrobase", "url": "https://github.com/stanford-futuredata/macrobase/pull/216#discussion_r135859634", "body": "Should the results be sorted before printing?"}
{"iteration": 2, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4374#discussion_r352750309", "body": "I have the same concern but IMO credentials in env vars or system props can be considered a security design flaw. A pipeline can already access them, so if a user is storing credentials there, they are already exposed..."}
{"iteration": 2, "tag": "no", "repo": "apache/shardingsphere", "url": "https://github.com/apache/shardingsphere/pull/3379#discussion_r339396960", "body": "'isNullable' means the column can be null. Why the primaryKey can be null?"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/94936#discussion_r1154261073", "body": "Nit: one word:\r\n\r\n```suggestion\r\n        private final HeartbeatStore heartbeatStore;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "JanusGraph/janusgraph", "url": "https://github.com/JanusGraph/janusgraph/pull/336#discussion_r121649072", "body": "It's a store parameter and is used directly without case check in the existing implementation. So I think it's okay not to protect it but if you want to improve what about checking it in the ElasticSearchIndex constructor when it's first read and throw an illegal argument exception if it's not lower case?"}
{"iteration": 2, "tag": "no", "repo": "wildfly/wildfly-core", "url": "https://github.com/wildfly/wildfly-core/pull/4173#discussion_r412065437", "body": "@darranl @fjuma After fix for WFCORE-4407 security domain service was not started before attempting to read the identity which resulted in NPE. \r\n\r\nThis fix removes NPE but it is still not possible to read the identity and resulting message is \"Identity with name [myIdentity] not authorized.\" This is also invalid response as I should be able to read the identity I just added, right?"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/77718#discussion_r736056595", "body": "```suggestion\r\n        // Skip security auto configuration when Security is already configured.\r\n```"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/72186#discussion_r634703156", "body": "```suggestion\r\n        return \"security_create_enrollment_token_action\";\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "GeyserMC/Geyser", "url": "https://github.com/GeyserMC/Geyser/pull/2822#discussion_r857156088", "body": "Item ID is a magic value I'm not too keen on exposing this in the API. Is there any purpose that we'd miss out on if we excluded this?"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/9052#discussion_r857899945", "body": "Sure, that makes sense. Will add parens to make it clear."}
{"iteration": 2, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/8900#discussion_r1294893420", "body": "```suggestion\r\n            String resolvedProtocol = getFirstNode().getHttpProtocol(), getFirstNode().isSecure() ? \"https\" : \"http\";\r\n```"}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/3537#discussion_r617444071", "body": "Yes, the repo was a bit outdated on BigSur system. I have updated the fix to check BigSur OS too."}
{"iteration": 2, "tag": "yes", "repo": "Catrobat/Catroid", "url": "https://github.com/Catrobat/Catroid/pull/3369#discussion_r347367931", "body": "Since only the string representation is splitting the device type (connection checks if BLE is in device name), someone could exploit this name by calling himself \"BLE - \" which leads to false behaviour ... You could try writing a custom adapter to show only strings but save type in an object behind. https://stackoverflow.com/questions/17818969/displaying-custom-objects-in-arrayadapter-the-easy-way"}
{"iteration": 2, "tag": "no", "repo": "reposense/RepoSense", "url": "https://github.com/reposense/RepoSense/pull/425#discussion_r244285140", "body": "Thanks for the tips!"}
{"iteration": 2, "tag": "yes", "repo": "allegro/hermes", "url": "https://github.com/allegro/hermes/pull/1446#discussion_r907170040", "body": "I'm not sure if this should be the default behavior. What if someone propagates headers with sensitive data? In my opinion, we should either return an empty map here or give users a parameter where they can specify which headers they want to log."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/106715#discussion_r1540698925", "body": "Partially related to previous comments, but thought I'd put it as a separate comment anyway: do we want to have the `FailureStoreOptions` as a dedicated field like this, or do we want a generic `IndicesOptions` field with `IndicesOptions.strictSingleIndexNoExpandForbidClosed()` as default, so that we don't have to refactor in case we want to set other parts of the indices options in the future?"}
{"iteration": 2, "tag": "no", "repo": "US-CBP/GTAS", "url": "https://github.com/US-CBP/GTAS/pull/1715#discussion_r394551968", "body": "Ah gotcha."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/53130#discussion_r396222834", "body": "```suggestion\r\n            \"       privileges: [ sso:superuser ]\\n\";\r\n```\r\nWe're proposing to name these \"sso:\" so it's clear within the security cluster that they have a \"magic\" SSO purpose and aren't just \"cloud RBAC\"."}
{"iteration": 2, "tag": "no", "repo": "apache/phoenix", "url": "https://github.com/apache/phoenix/pull/294#discussion_r172603085", "body": "Does it make sense to have a default value for the second parameter? Seems like no, as then you'd be missing the element to remove which is illegal."}
{"iteration": 2, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/1379#discussion_r85199882", "body": "Just to be sure, Can we not guard the place that is concurrently accessing this over using a concurrent hashmap? These internals are _really_ heavily accessed, so this could bring performance implications. \n"}
{"iteration": 2, "tag": "no", "repo": "prometheus/client_java", "url": "https://github.com/prometheus/client_java/pull/41#discussion_r20571176", "body": "The usage of `static` objects I think is the biggest complain we have internally about the current java client. It makes harder to test our applications. Is it possible to avoid it in this new client?\n\ncc/ @pcalcado \n"}
{"iteration": 2, "tag": "no", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/7826#discussion_r717322743", "body": "Forgot to update to `V78Codec` after splitting the de/ser for `[7.0, 7.8)` `[7.8, 8.0)`"}
{"iteration": 2, "tag": "unclear", "repo": "SasanLabs/VulnerableApp", "url": "https://github.com/SasanLabs/VulnerableApp/pull/357#discussion_r821600500", "body": "ok so the current level is not right because of the following issues:\r\n1. It fetches the image and then sends it to UI as a base64 encoded string using data URI which is currently only working with PNG, not with GIF images or other types. I think it doesn't even work for large images.\r\n2. The UI code has some odd check that data should start with \"i\" which seems unmaintainable in the longer run and doesn't seems like a real world application works this way, atleast i have not seen any application like that (https://github.com/SasanLabs/VulnerableApp/blob/master/src%2Fmain%2Fresources%2Fstatic%2Ftemplates%2FSSRFVulnerability%2FLEVEL_1%2FSSRF.js#L14)\r\n\r\nAlso blacklist is not a secured way for handling such usecases, it is very complex to implement the secured level for the current implementation."}
{"iteration": 2, "tag": "no", "repo": "wildfly/wildfly-core", "url": "https://github.com/wildfly/wildfly-core/pull/270#discussion_r23450811", "body": "It truly is.\n"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/83119#discussion_r792582106", "body": "It ties to the security model we want for this new type of action. I also think we should avoid introducing another action prefix as we already have `cluster:admin`, `cluster:monitor` and `cluster:internal`."}
{"iteration": 2, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4848#discussion_r510454908", "body": "No particular reason to switch to the Spring Security version of this package, which would require pulling in the `spring-security-acl` module as well as disruption to existing `AuthorizationStrategy`s: so long as you stick to the `String`-based constructors, there is no conflict with usage of other Spring Security types."}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/7809#discussion_r671806770", "body": "Make deep-copy instead of suppress spotbug warning."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/72300#discussion_r668399043", "body": "Per other coments, this component isn't created is security is disabled."}
{"iteration": 2, "tag": "no", "repo": "radixdlt/olympia-node", "url": "https://github.com/radixdlt/olympia-node/pull/538#discussion_r742695362", "body": "Ah I think you mean the deserialisation process won't create a List with null inside? But this isn't the only way of creating the object and allowing this could cause unexpected behaviour in the system."}
{"iteration": 2, "tag": "no", "repo": "wso2/product-apim", "url": "https://github.com/wso2/product-apim/pull/10467#discussion_r603000854", "body": "Let's add a comment saying why this sleep is added. Let's do the same in other places as well."}
{"iteration": 2, "tag": "no", "repo": "deepjavalibrary/djl", "url": "https://github.com/deepjavalibrary/djl/pull/1852#discussion_r934975232", "body": "```suggestion\r\n            logger.warn(\"Security manager doesn't allow access to the environment variable\");\r\n```"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/95040#discussion_r1160176143", "body": "nit: do these need to be public ?"}
{"iteration": 2, "tag": "no", "repo": "OfficeDev/ews-java-api", "url": "https://github.com/OfficeDev/ews-java-api/pull/126#discussion_r20593310", "body": "```\nmmmh, I remember I had a lot of problem due to my environement.\nI put that to ignore all network security problems and try to make\nthis code working in Intranet-like, because I had security problem\nwith http client 4.3.x. \n\nIndeed, I forgot to remove it => \nsuper(context)\n\"Strict\" would be better for a library used in PROD.\n\n\n\nLe 19/11/2014 06:35, Victor Boctor a\n  \u00e9crit\u00a0:\n\n\n  In\n```\n\nsrc/main/java/microsoft/exchange/webservices/data/EwsSSLProtocolSocketFactory.java:\n      > -     */\n\n> -    public Socket createSocket(\n> -        String host,\n> -        int port,\n> -        InetAddress clientHost,\n> -        int clientPort)\n> \n> ## \\-        throws IOException, UnknownHostException {\n> -        return getSSLContext().getSocketFactory().createSocket(\n> -            host,\n> -            port,\n> -            clientHost,\n> -            clientPort\n> -        );\n> -    public EwsSSLProtocolSocketFactory(SSLContext context) {\n> -     super(context, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n```\n  Good point @ecki\n    -- @casimirenslip\n    any reason you elect to use this instead of\n    BrowserCompatHostnameVerifier or StrictHostnameVerifier?\n  \u2014\n    Reply to this email directly or view\n      it on GitHub.\n```\n"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/83883#discussion_r833098103", "body": "Hi,\r\nsorry for all this. I agree to update gradle minimum version, IF it would not be 6.8. Many projects that are using the plugin look like still on Gradle 6. Indeed the problem is also the minimum Java version while compiling, but this will change soon.\r\n\r\nIn the meantime I am about to release forbiddenapis 3.3 soon.\r\n\r\nI know that many developers of Elasticsearch want to use forbiddenapis, but because of behavior of Gradle community and people (not willing to help) and with their shitload of changes (partly ununderstandable), this leads to issues that make plugin maintenance harder and harder. Because of this, I will in the future refuse to accept issues / PRs regarding Gradle. I mentioned this on Twitter already: https://twitter.com/thetaph1/status/1498631483887689732\r\n\r\n@breskeby As you were working for Gradle before, maybe take your contacts and ask for including the plugin (which is only a few lines of Gradle-specific code) to the distribution and let people only configure the backend forbiddenapis JAR file (like this is done with other checkers like PMD or checkstyle which have plugin stubs in source code of Gradle and seem to be configurable to use a specific checkstyle/PMD backend). I will then only maintain the actual detection code, but I don't need to maintain the plugin in this ever-changing Gradle world which is a pain in the ass.\r\n\r\nI may have a solution for the current problem:\r\n- simply skip task execution on my own and remove the @SkipIfEmpty annotation. @reta already tried this out also in a first attempt to fix many other plugins for OpenSearch. From my checks this brings no performance problems, because you just move the check into the code if the FileTree is empty or not. Only downside is that it won't print \"NO-SOURCE\".\r\n- Do the same like done here in forbiddenapi's `plugin-init.groovy` by subclassing and use the subclassed Task class when Gradle 6.8 is detected.\r\n\r\nThe first fix would be easiest and works also with custom Task setup like done in Elasticsearch (looks like you have your own plugin code to setup, because you have many more sourcesets and also use forbiddenapis to scan JAR files going back to Robert Muir's code.\r\n\r\nIf you want to have the \"NO-SOURCE\" message back, you can do the same like done here: subclass.\r\n"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/49827#discussion_r359881361", "body": "__typo:__ \r\n```suggestion\r\n        terminal.println(\"These values have been selected based on secure defaults.\");\r\n```"}
{"iteration": 2, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/15100#discussion_r1111319169", "body": "this comment is not revlevant anymore, because now `UPDATE_PROFILE` is triggered"}
{"iteration": 2, "tag": "no", "repo": "aklivity/zilla", "url": "https://github.com/aklivity/zilla/pull/861#discussion_r1528531746", "body": "```suggestion\r\n                .inject(n -> this.injectTlsServer(n, qvault, tlsOption, secure))\r\n```"}
{"iteration": 2, "tag": "no", "repo": "JanusGraph/janusgraph", "url": "https://github.com/JanusGraph/janusgraph/pull/170#discussion_r109695640", "body": "I'll fix this in another commit. There's _quite_ a few places that mention `Precision` and `Decimal`. They've been out of Titan for a while though. "}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/22151#discussion_r767807352", "body": "```suggestion\r\n                        \"Hot deployment of the application is not supported when updating the Quarkus version. The application needs to be stopped and dev mode started up again\");\r\n```\r\n(we call it dev mode without dash in the guides if I'm not mistaken)"}
{"iteration": 2, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/6544#discussion_r1012412040", "body": "I have reservations about this approach for verification because it's very possible users could end up using EL to specify a dynamic index name based on an Elastic template. How do you see that scenario playing out with verification since the index may not exist yet for a good reason? Also, this could potentially block users who are iterating quickly and relying on Elastic to autogenerate the schema during their initial setup before formalizing one."}
{"iteration": 2, "tag": "broken", "repo": "spoutdev/Vanilla", "url": "https://github.com/spoutdev/Vanilla/pull/335#discussion_r1902980", "body": "Needed for the new layout of the packet. It's listed like that now: \u00a71\\047\\012w42b\\0Wiki.vg Minecraft Server\\05\\010 (protocol version 47, minecraft version 12w42b, motd 'Wiki.vg Minecraft Server', 5 users, 10 slots)\n"}
{"iteration": 2, "tag": "no", "repo": "gridgain/gridgain", "url": "https://github.com/gridgain/gridgain/pull/1566#discussion_r522987937", "body": "Let's change to\r\n\r\n```suggestion\r\n            log.warning(\"Failed to wait for security context propagation [subj=\" + secCtx.subject().id() + \", err=\" + e + ']');\r\n```\r\n\r\nbecause we don't really \"check\" the context (we already have it), we just wait for it to be written."}
{"iteration": 2, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/3858#discussion_r232733972", "body": "\u2753 We're only using the old cached value to create better logs right? I see the appeal but I think it might make the source polling method a little easier to read if we didn't have to carry this old value all the way through it."}
{"iteration": 2, "tag": "no", "repo": "hapifhir/hapi-fhir", "url": "https://github.com/hapifhir/hapi-fhir/pull/2508#discussion_r602928708", "body": "It feels to me like in this case we'd be better off excluding the extension all together.  I'm worried consumers will try to parse the value as a reference and get an error."}
{"iteration": 2, "tag": "yes", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/2889#discussion_r288823037", "body": "I feel like there are security implications of passing down the KSQL user ServiceContext for arbitrary code to be executed. Obviously we don't have anyone to impersonate, but is there any way to make this slightly more secure?\r\n\r\ncc @spena "}
{"iteration": 2, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/22283#discussion_r1534887661", "body": "```suggestion\r\n                         * Do not remove the future feature at current line, it will be removed after the progress of\r\n```"}
{"iteration": 2, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/5675#discussion_r61282424", "body": "Please note that this is separate issue found while testing HIVE on secure cluster. We need to disable SPNEGO authentication if it is enabled in hive-site.\n"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/62541#discussion_r490240729", "body": "It might be safer to not apply the default routing option. \r\n\r\nrouting is exceptionally tricky and difficult to debug. Might be better to create an issue and remove it from this PR."}
{"iteration": 2, "tag": "no", "repo": "jenkinsci/plugin-installation-manager-tool", "url": "https://github.com/jenkinsci/plugin-installation-manager-tool/pull/24#discussion_r300099629", "body": "```suggestion\r\n    @Option(name = \"--view-security-warnings\",\r\n```"}
{"iteration": 2, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/10540#discussion_r1358854660", "body": "`RestHandler` is public API and won't be changed in a backward incompatible way, `DelegatingRestHandler` will not solve the problem if added methods are `default` anyway. Please move this change to `security` plugin, thanks a lot for staying with me, regarding catching API changes, I think we could have a generic mechanisms to do that during build time."}
{"iteration": 2, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/7015#discussion_r1057652816", "body": "```suggestion\r\n            case RfbConstants.NO_AUTH: \r\n                return Collections.singletonList(new NoneVncSecurity());\r\n            case RfbConstants.VNC_AUTH: \r\n                return Collections.singletonList(new VncAuthSecurity(vmPassword));\r\n```"}
{"iteration": 2, "tag": "no", "repo": "oracle/tribuo", "url": "https://github.com/oracle/tribuo/pull/81#discussion_r517614035", "body": "Basically you need to install the Windows SDK to get the msbuild system and then run mvn package in the jvm-packages directory. I can talk to the XGBoost people about it and maybe firm up some instructions."}
{"iteration": 2, "tag": "no", "repo": "mulesoft/mule", "url": "https://github.com/mulesoft/mule/pull/2156#discussion_r44853706", "body": "Fix identation.\n"}
{"iteration": 2, "tag": "no", "repo": "polypheny/Polypheny-DB", "url": "https://github.com/polypheny/Polypheny-DB/pull/393#discussion_r808836682", "body": "Please add a proper exception handling."}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/3355#discussion_r325104891", "body": "Still outstanding."}
{"iteration": 2, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4053#discussion_r379712766", "body": "I had considered that, but decided against it in case there were any security concerns with that type of content being logged. This shouldn't be an issue which someone needs to track down and if it is, they should be able to debug it by cross referencing the fields and the table schema themselves. "}
{"iteration": 2, "tag": "broken", "repo": "wildfly/wildfly-core", "url": "https://github.com/wildfly/wildfly-core/pull/287#discussion_r19899513", "body": "This is a great convenience, but we shouldn't disable the ability to actually encode bytes. If the assumption that the user-provided value is a file name is incorrect, then the user-provided input should be passed through.\n"}
{"iteration": 2, "tag": "no", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396957075", "body": "That's true. If another agent approves to setting more than element count or value length. So we will delete their data? "}
{"iteration": 2, "tag": "no", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/5279#discussion_r1516619329", "body": "```suggestion\r\n            /* This covers step with a local authenticator, and the scenarios where step/idp is not set\r\n            if the step/idp is not set, user is assumed to be a local user. */\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/13845#discussion_r788344094", "body": "```suggestion\r\n       future.thenAccept(__ -> {\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/4413#discussion_r335505857", "body": "It means that you cannot accidentally expose something because an annotation was forgotten. IMHO this is a useful feature as the 'public by default' approach can be a security risk."}
{"iteration": 2, "tag": "no", "repo": "radixdlt/olympia-node", "url": "https://github.com/radixdlt/olympia-node/pull/538#discussion_r742743554", "body": "Ah I think you mean the deserialisation process won't create a List with null inside? But this isn't the only way of creating the object and allowing this could cause unexpected behaviour in the system."}
{"iteration": 2, "tag": "yes", "repo": "corona-warn-app/cwa-server", "url": "https://github.com/corona-warn-app/cwa-server/pull/1350#discussion_r620151768", "body": "Maybe we need to think about security here. A SecureRandom does not produce the same random number when using the same seed. Does this provide an advantage?"}
{"iteration": 2, "tag": "no", "repo": "gridgain/gridgain", "url": "https://github.com/gridgain/gridgain/pull/945#discussion_r383878547", "body": "false is only option here because inlining of decimals were introduced when when metapage already has supported the flags. We need to upgrade metapage version only when it is not supported flags, so inlining of decimals is not supported either."}
{"iteration": 2, "tag": "no", "repo": "FoundationDB/fdb-record-layer", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/2134#discussion_r1205138478", "body": "no worries at all"}
{"iteration": 2, "tag": "no", "repo": "OpenLiberty/ci.maven", "url": "https://github.com/OpenLiberty/ci.maven/pull/174#discussion_r111799364", "body": "new file, so the copyright should just be 2017."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/64024#discussion_r509841400", "body": "Nit:\r\n```suggestion\r\n        if (inFipsJvm()) {\r\n```"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/97621#discussion_r1261728895", "body": "I checked doing the following setup:\r\n\r\n`PUT /_security/role/test-role`\r\n```json\r\n{\r\n  \"cluster\": [],\r\n  \"indices\": [\r\n    {\r\n      \"names\": [\"test-index\"],\r\n      \"privileges\": [\"read\"]\r\n    }\r\n  ],\r\n  \"applications\": [],\r\n  \"run_as\": []\r\n}\r\n```\r\n\r\n`POST /_security/user/test-user`\r\n```json\r\n{\r\n  \"password\" : \"testtest\",\r\n  \"roles\" : [\"test-role\"]\r\n}\r\n```\r\n\r\n`curl -u test-user:testtest -X POST http://localhost:9200/test-index/_reload_search_analyzers`\r\n```json\r\n{\r\n  \"error\": {\r\n    \"root_cause\": [\r\n      {\r\n        \"type\": \"security_exception\",\r\n        \"reason\": \"action [indices:admin/reload_analyzers] is unauthorized for user [test-user] with effective roles [test-role] on indices [test-index], this action is granted by the index privileges [manage,all]\"\r\n      }\r\n    ],\r\n    \"type\": \"security_exception\",\r\n    \"reason\": \"action [indices:admin/reload_analyzers] is unauthorized for user [test-user] with effective roles [test-role] on indices [test-index], this action is granted by the index privileges [manage,all]\"\r\n  },\r\n  \"status\": 403\r\n}\r\n```\r\nI checked using `view_index_metadata`, same result.\r\n\r\nDo you see this as a concern that we should raise?"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/83760#discussion_r803393665", "body": "nit:\r\n\r\n```suggestion\r\n                    Collections.addAll(indicesToOpen, task.request.indices());\r\n```"}
{"iteration": 2, "tag": "no", "repo": "TheAlgorithms/Java", "url": "https://github.com/TheAlgorithms/Java/pull/3662#discussion_r1005119393", "body": "```suggestion\r\n        int[] numbers1 = {};\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/6645#discussion_r1204562826", "body": "Security plugin already removes duplicates for PIT ID - need to handle only in transport layer, let me know if the new approach works which doesn't mutate the request."}
{"iteration": 2, "tag": "no", "repo": "apache/phoenix", "url": "https://github.com/apache/phoenix/pull/518#discussion_r296950826", "body": "used constant `PherfConstants.LOG_PER_NROWS_NAME` instead of `string`"}
{"iteration": 2, "tag": "no", "repo": "axelor/axelor-open-suite", "url": "https://github.com/axelor/axelor-open-suite/pull/11731#discussion_r1417510115", "body": "You put the addressTemplate as an argument in the constructor but in the message you never use it. In the message you need to put a %s somewhere to use the value.\r\nAnd you should put addressTemplate.getName(), not the whole object."}
{"iteration": 2, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/2177#discussion_r141149326", "body": "The `toString()` doesn't contain any unique identifying information, so overriding this removes the hashcode that is usually present. Is this a security concern, or does it simply make debugging more difficult?"}
{"iteration": 2, "tag": "no", "repo": "fabric8io/docker-maven-plugin", "url": "https://github.com/fabric8io/docker-maven-plugin/pull/664#discussion_r93191327", "body": "fyi, we use \r\n\r\n```java\r\n\r\nfor (VolumeConfiguration volume : getVolumes()) {\r\n   doSomething():\r\n}\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/72300#discussion_r627954627", "body": "Once this is merged, I'll open an issue to track the fact that we should change all the remaining packaging tests to work with security enabled ( which will be the default behavior ) . Given the fact that we will be making further changes to how elasticsearch starts in the context of the Security On by Default project and the changes this would mean for the packaging tests, it didn't make much sense to spend too much time to do this now. "}
{"iteration": 2, "tag": "no", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/1974#discussion_r301392894", "body": "Add comment."}
{"iteration": 2, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/7901#discussion_r626491133", "body": "I did this intentionally, because it will success only inside this integration test, not in real world, due to different CORS environment. When running JavaScript test suite together with  default PhantomJS browser, CORS is allowed with PhantomJS' `--web-security=false` option. So XHR is not blocked on 404 HTTP error response. The same behavior I observe when running tests with Firefox browser. Not sure why CORS is allowed in this case, maybe because JS test code and local Authorization Server runs under same origin...\r\n\r\nCommands I've used to run tests:\r\n```\r\n$ mvn -s maven-settings.xml -f testsuite/integration-arquillian/tests/base/pom.xml clean install -Dtest=JavascriptAdapterTest#checkInitWithInvalidRealm+checkInitWithUnavailableAuthServer -Pauth-server-wildfly\r\n\r\n$ mvn -s maven-settings.xml -f testsuite/integration-arquillian/tests/base/pom.xml clean install -Dtest=JavascriptAdapterTest#checkInitWithInvalidRealm+checkInitWithUnavailableAuthServer -Pauth-server-wildfly -Dbrowser=firefox -Djs.browser=firefox -DfirefoxHeadless=true -Dwebdriver.gecko.driver=$HOME/.local/bin/geckodriver\r\n```\r\n\r\nSo I've decided not to check error details and error message in tests, only fact that KeycloakError is returned from Promise, because this fine-grained details will not be available nowadays in real world scenario where errors are returned by Authorization Server without CORS headers and rejected by XHR.\r\n\r\nSo as you wish, we can make this changes and check error message contents in tests.\r\n"}
{"iteration": 2, "tag": "yes", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/6499#discussion_r588866141", "body": "You need to check all, but don't scan all templates. This is not allowed due to security reason."}
{"iteration": 2, "tag": "unclear", "repo": "SasanLabs/VulnerableApp", "url": "https://github.com/SasanLabs/VulnerableApp/pull/433#discussion_r1144274272", "body": "I think secure flag will not work as we are not hosting application on https."}
{"iteration": 2, "tag": "no", "repo": "gridgain/gridgain", "url": "https://github.com/gridgain/gridgain/pull/535#discussion_r325464849", "body": "```suggestion\r\n     * @param secCtx Security context.\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/4565#discussion_r551206332", "body": "I would do that just for the sake of security"}
{"iteration": 2, "tag": "no", "repo": "azkaban/azkaban", "url": "https://github.com/azkaban/azkaban/pull/2172#discussion_r271138449", "body": "since it's a public API might be used by other UserManager, should we have stricter argument validation? Like file existence check and null pointer check."}
{"iteration": 2, "tag": "no", "repo": "jboss-developer/jboss-eap-quickstarts", "url": "https://github.com/jboss-developer/jboss-eap-quickstarts/pull/131#discussion_r573639", "body": "Can we stop adding comments to this closed pull? It's getting confusing. :-)\nJust add the comments to the appropriate new pull and reference the \ncomment in the closed pull.\n\nOn 03/19/2012 08:13 AM, Sherif Makary wrote:\n\n> > -   \n> > -    /**\n> > -     *<p>\n> > -     \\* sample Secured ejb method using security annotations\n> > -     *</p>\n> > -     *\n> > -     */ \n> > -   \n> > -    @Override\n> > -    @RolesAllowed({\"gooduser\"})\n> > -    public String getSecurityInfo()\n> > -       {\n> > -        //Session context injected using the resource annotation\n> > -        principal = ctx.getCallerPrincipal();\n> > -   \n> > -        return principal.toString();\n> >   Regarding the \"Principal\", the idea was to show how to get the principal to use it in is in role, I'll change the variable scope to local variable in the new branch, also I'm going to remove the CDI support.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/jbossas/quickstart/pull/131/files#r573591\n"}
{"iteration": 2, "tag": "no", "repo": "GeyserMC/Geyser", "url": "https://github.com/GeyserMC/Geyser/pull/1579#discussion_r528344518", "body": "Extra space isn't showing for me in intellij"}
{"iteration": 2, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/5472#discussion_r628766753", "body": "normally updated in batch, no guarantees on a release version\r\n\r\n```suggestion\r\n     * @since TODO\r\n```"}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/12800#discussion_r1121824686", "body": "```suggestion\r\n            T[] = {\r\n```"}
{"iteration": 2, "tag": "broken", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/5908#discussion_r11869020", "body": "this seems unused anyways I think we should just drop these default ctors?\n"}
{"iteration": 2, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/33531#discussion_r229069963", "body": "this is needed. The wrap here uses a supplier from a different context because we switch to the xpack security user here"}
{"iteration": 2, "tag": "no", "repo": "nextcloud/android", "url": "https://github.com/nextcloud/android/pull/12540#discussion_r1489218468", "body": "Current implementation on master is broken. We should't see SortListGroup in file detail or file sharing tab also we have crash right now. Crash has been fixed and appearance of SortListGroup working as expected (visible in file list not visible in file details, sharing). \r\n\r\nThis PR aims to fix crash and appearance of SortListGroup not refactor."}
{"iteration": 2, "tag": "no", "repo": "GoogleCloudPlatform/cloud-sql-jdbc-socket-factory", "url": "https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/pull/1329#discussion_r1232797395", "body": "We should strive to avoid this annotation. Could we just expose this constructor as the primary one and rely on constants for default configuration?"}
{"iteration": 2, "tag": "no", "repo": "ballerina-platform/openapi-tools", "url": "https://github.com/ballerina-platform/openapi-tools/pull/806#discussion_r767631781", "body": "Can't we use `minutiaeList` to create empty space?"}
{"iteration": 2, "tag": "no", "repo": "FoundationDB/fdb-record-layer", "url": "https://github.com/FoundationDB/fdb-record-layer/pull/1939#discussion_r1060912024", "body": "```suggestion\r\n        // First crash, 5 threads, crash after 1:\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "mulesoft/mule", "url": "https://github.com/mulesoft/mule/pull/5736#discussion_r139524667", "body": "I'm wondering whether we should fail in this scenario because otherwise missing this log might mean believing your app is secure when it's not."}
{"iteration": 2, "tag": "no", "repo": "spring-io/start.spring.io", "url": "https://github.com/spring-io/start.spring.io/pull/1455#discussion_r1582059883", "body": "`Security` -> `Shell`"}
{"iteration": 2, "tag": "no", "repo": "allegro/hermes", "url": "https://github.com/allegro/hermes/pull/1087#discussion_r319387463", "body": "Can `objectMapper` return null value?"}
{"iteration": 2, "tag": "no", "repo": "soot-oss/SootUp", "url": "https://github.com/soot-oss/SootUp/pull/919#discussion_r1568692205", "body": "how about moving the whole construct into it?"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/65275#discussion_r527238170", "body": "These have changed slightly the following indexes are needed:\r\n\r\n```\r\n.fleet-servers\r\n.fleet-policies\r\n.fleet-policies-leader\r\n.fleet-agents\r\n.fleet-actions\r\n.fleet-actions-results\r\n```\r\n\r\nAs for the Agent check-ins that will occur in `logs-elastic_agent.checkin-default`. This will follow the indexing strategy of Fleet and will be a datastream. I don't know if this needs to be registered in this plugin or not?"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/kafka-connect-hdfs", "url": "https://github.com/confluentinc/kafka-connect-hdfs/pull/501#discussion_r450377458", "body": "nit: let's use `{}` for strings like we do elsewhere for consistency. In practice this message won't be skipped. "}
{"iteration": 2, "tag": "language", "repo": "qiscus/qiscus-sdk-android", "url": "https://github.com/qiscus/qiscus-sdk-android/pull/3#discussion_r85773725", "body": "ini pasti true\n"}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/8476#discussion_r405769814", "body": "Since the only thing that changes is the `Path`, I'd just change that: \r\n\r\n```suggestion\r\n                Path graalVmCacertsPath = Paths.get(graalVmHome, \"jre\", \"lib\", \"security\", \"cacerts\");\r\n                if (!Files.exists(graalVmCacertsPath)) {\r\n                   graalVmCacertsPath = Paths.get(graalVmHome, \"lib\", \"security\", \"cacerts\");\r\n                }\r\n                // This is useful for testing but the user will have to override it.\r\n                sslTrustStoreSystemProperty.produce(new SslTrustStoreSystemPropertyBuildItem(graalVmCacertsPath.toString()));\r\n                \r\n```"}
{"iteration": 2, "tag": "no", "repo": "AzureAD/microsoft-authentication-library-for-java", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-java/pull/343#discussion_r565494740", "body": "Can use `StringHelper.EmtpyString` here"}
{"iteration": 2, "tag": "no", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/5647#discussion_r867857386", "body": "```suggestion\r\n                        \"distribution by is not supported by SYNC refresh type in materialized view\");\r\n```"}
{"iteration": 2, "tag": "no", "repo": "neoforged/NeoForge", "url": "https://github.com/neoforged/NeoForge/pull/915#discussion_r1589968110", "body": "Tested on dedicated server, the server and common configs are working and sending correct names to client without the click actions. The client config is crashing tho since it doesn't exist on server.\r\n![image](https://github.com/neoforged/NeoForge/assets/40846040/44f8a69d-2678-49c6-8165-5e0c9bff827e)\r\n\r\nHow would you like to proceed? Should this client config arg be split off into it's own PR to figure out how to handle that right? Or is there an example that I can easily use for splitting off an command's one argument to be a client argument? Or would that be it's own command? `/config showfileclient neoforge CLIENT` vs current `/config showfile neoforge CLIENT`"}
{"iteration": 2, "tag": "no", "repo": "VoltDB/voltdb", "url": "https://github.com/VoltDB/voltdb/pull/1949#discussion_r22962608", "body": "I think I added those.\n"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/94894#discussion_r1152970114", "body": "\u2139\ufe0f  We could be more strict on which module can use our code but I do not see a huge benefits in doing it like in security."}
{"iteration": 2, "tag": "no", "repo": "danikula/AndroidVideoCache", "url": "https://github.com/danikula/AndroidVideoCache/pull/69#discussion_r72791649", "body": "Are you sure this fix resolves issue? Bypassing system proxy allows **only ping cacheproxy**, but MediaPlayer will not whatever.\n"}
{"iteration": 2, "tag": "no", "repo": "corona-warn-app/cwa-server", "url": "https://github.com/corona-warn-app/cwa-server/pull/1709#discussion_r796717066", "body": "why `endsWith(\"stats\")` ???\r\n\r\n```suggestion\r\n    return s3Key.matches(\".*config-v\\\\d\");\r\n```"}
{"iteration": 2, "tag": "no", "repo": "hashgraph/hedera-mirror-node", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/8166#discussion_r1581407986", "body": "nit,\r\n```suggestion\r\n        var tokenUpdateTransaction = new TokenUpdateTransaction()\r\n```"}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/13686#discussion_r1228411093", "body": "nit\r\n```suggestion\r\n                            } catch (InvalidPathException e) {}\r\n```"}
{"iteration": 2, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/13899#discussion_r695309658", "body": "nit: mark `final` whenever possible\r\n\r\n```suggestion\r\n  private final MetricsInScope mMetricsInScope;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apolloconfig/apollo", "url": "https://github.com/apolloconfig/apollo/pull/723#discussion_r136558236", "body": "i understand your concern, for a open source product like Apollo, your point is right, but on my env, i also setup '127.0.0.1\tlocalhost peer1 peer2',  but i get the correct result, i also test on my vm, the result as follow:\r\n\r\n\u279c  classes git:(johnson) \u2717 java com.ctrip.framework.foundation.internals.provider.DefaultNetworkProvider\r\n1 \"host.ip\" null\r\n2 \"host.ip\" null\r\nfe80:0:0:0:482d:fff:febf:7ae9%docker0\r\nfe80:0:0:0:482d:fff:febf:7ae9%docker0\r\nfe80:0:0:0:482d:fff:febf:7ae9%docker0\r\n\u672c\u5730\u4e3b\u673aip  10.211.55.9\r\n172.17.42.1\r\n172.17.42.1\r\n172.17.42.1\r\n\u672c\u5730\u4e3b\u673aip  10.211.55.9\r\nfe80:0:0:0:21c:42ff:fe39:aa50%eth0\r\nfe80:0:0:0:21c:42ff:fe39:aa50%eth0\r\nfe80:0:0:0:21c:42ff:fe39:aa50%eth0\r\n\u672c\u5730\u4e3b\u673aip  10.211.55.9\r\nfdb2:2c26:f4e4:0:21c:42ff:fe39:aa50%eth0\r\n^C%     \r\n\r\n==the vm host file==                                                                                                                                                                             \u279c  classes git:(johnson) \u2717 cat /etc/hosts\r\n127.0.0.1   quill.net localhost localhost.localdomain localhost4 localhost4.localdomain4\r\n::1         quill.net localhost localhost.localdomain localhost6 localhost6.localdomain6\r\n10.211.55.7 centoslocal1 CentOS-6-Mini-1\r\n10.211.55.9 centoslocal0 CentOS-6-Mini-0\r\n10.211.55.10 centoslocal2 CentOS-6-Mini-2\r\n\r\n==the ifconfig command on vm==\r\n\u279c  classes git:(johnson) \u2717 ifconfig\r\ndocker0   Link encap:Ethernet  HWaddr 4A:2D:0F:BF:7A:E9\r\n          inet addr:172.17.42.1  Bcast:0.0.0.0  Mask:255.255.0.0\r\n          inet6 addr: fe80::482d:fff:febf:7ae9/64 Scope:Link\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 b)  TX bytes:468 (468.0 b)\r\n\r\neth0      Link encap:Ethernet  HWaddr 00:1C:42:39:AA:50\r\n          inet addr:10.211.55.9  Bcast:10.211.55.255  Mask:255.255.255.0\r\n          inet6 addr: fdb2:2c26:f4e4:0:21c:42ff:fe39:aa50/64 Scope:Global\r\n          inet6 addr: fe80::21c:42ff:fe39:aa50/64 Scope:Link\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:1745542 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:859744 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:244734342 (233.3 MiB)  TX bytes:254961265 (243.1 MiB)\r\n\r\nlo        Link encap:Local Loopback\r\n          inet addr:127.0.0.1  Mask:255.0.0.0\r\n          inet6 addr: ::1/128 Scope:Host\r\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\r\n          RX packets:104 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:104 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:6240 (6.0 KiB)  TX bytes:6240 (6.0 KiB)\r\n\r\nso, can you test for other environment, i mean not only ctrip?\r\n\r\n\r\n\r\n==the mac host file==\r\n10.211.55.7 centoslocal1\r\n#10.211.55.9 centoslocal0 quill.net\r\n10.211.55.10 centoslocal2\r\n127.0.0.1\tlocalhost peer1 peer2\r\n255.255.255.255\tbroadcasthost\r\n::1             localhost\r\n#173.194.75.141 golang.org\r\n#fe80::1%lo0\tlocalhost\r\n###envision start###\r\n#172.17.250.250   en-lab-vcd-01.envisionlab.com\r\n###envision end###\r\n10.211.55.9    \tcentos-6-mini-0.shared centos-6-mini-0 #prl_hostonly shared\r\n\r\n==the ifconfig command on my mac==\r\nifconfig                                                                                                                                      \r\nlo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384\r\n\toptions=1203<RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP>\r\n\tinet 127.0.0.1 netmask 0xff000000\r\n\tinet6 ::1 prefixlen 128\r\n\tinet6 fe80::1%lo0 prefixlen 64 scopeid 0x1\r\n\tnd6 options=201<PERFORMNUD,DAD>\r\ngif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280\r\nstf0: flags=0<> mtu 1280\r\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\tether f4:5c:89:ae:6f:cd\r\n\tinet6 fe80::c26:ade8:4fba:ee27%en0 prefixlen 64 secured scopeid 0x4\r\n\tinet 192.168.3.6 netmask 0xffffff00 broadcast 192.168.3.255\r\n\tnd6 options=201<PERFORMNUD,DAD>\r\n\tmedia: autoselect\r\n\tstatus: active\r\nen1: flags=963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX> mtu 1500\r\n\toptions=60<TSO4,TSO6>\r\n\tether 4a:00:05:5e:19:e0\r\n\tmedia: autoselect <full-duplex>\r\n\tstatus: inactive\r\nen2: flags=963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX> mtu 1500\r\n\toptions=60<TSO4,TSO6>\r\n\tether 4a:00:05:5e:19:e1\r\n\tmedia: autoselect <full-duplex>\r\n\tstatus: inactive\r\nbridge0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\toptions=63<RXCSUM,TXCSUM,TSO4,TSO6>\r\n\tether 4a:00:05:5e:19:e0\r\n\tConfiguration:\r\n\t\tid 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0\r\n\t\tmaxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200\r\n\t\troot id 0:0:0:0:0:0 priority 0 ifcost 0 port 0\r\n\t\tipfilter disabled flags 0x2\r\n\tmember: en1 flags=3<LEARNING,DISCOVER>\r\n\t        ifmaxaddr 0 port 5 priority 0 path cost 0\r\n\tmember: en2 flags=3<LEARNING,DISCOVER>\r\n\t        ifmaxaddr 0 port 6 priority 0 path cost 0\r\n\tnd6 options=201<PERFORMNUD,DAD>\r\n\tmedia: <unknown type>\r\n\tstatus: inactive\r\np2p0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 2304\r\n\tether 06:5c:89:ae:6f:cd\r\n\tmedia: autoselect\r\n\tstatus: inactive\r\nawdl0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1484\r\n\tether ea:92:a5:3b:47:13\r\n\tinet6 fe80::e892:a5ff:fe3b:4713%awdl0 prefixlen 64 scopeid 0x9\r\n\tnd6 options=201<PERFORMNUD,DAD>\r\n\tmedia: autoselect\r\n\tstatus: active\r\nutun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000\r\n\tinet6 fe80::7d1e:25ff:e7e2:4c7a%utun0 prefixlen 64 scopeid 0xa\r\n\tnd6 options=201<PERFORMNUD,DAD>\r\nvnic0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\toptions=3<RXCSUM,TXCSUM>\r\n\tether 00:1c:42:00:00:08\r\n\tinet 10.211.55.2 netmask 0xffffff00 broadcast 10.211.55.255\r\n\tmedia: autoselect\r\n\tstatus: active\r\nvnic1: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\toptions=3<RXCSUM,TXCSUM>\r\n\tether 00:1c:42:00:00:09\r\n\tinet 10.37.129.2 netmask 0xffffff00 broadcast 10.37.129.255\r\n\tmedia: autoselect\r\n\tstatus: active\r\nvboxnet0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n\tether 0a:00:27:00:00:00\r\n\tinet 192.168.99.1 netmask 0xffffff00 broadcast 192.168.99.255\r\n\r\n\r\n==================\r\ntest the Foundation.net().getHostAddress() on my mac, i got result is \r\n192.168.99.1, it's worng for me.\r\n\r\ntest the Foundation.net().getHostAddress() on vm, i got result is \r\n10.211.55.9, it's right for me.\r\n\r\nfor some investigation, the main reason is i have less net-interfaces on my vm, but i have more on my mac. \r\n\r\nthe Foundation.net().getHostAddress() origin implement just get first right as meet order, the right also obtain your alg, but the meet order is not make sure, use the InetAddress.getLocalHost().getHostAddress() i think it right for mostly env.\r\n\r\n"}
{"iteration": 2, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/13357#discussion_r626113411", "body": "I have removed this.\r\n\r\nIt's weird, this is the dependency tree I see:\r\n\r\n```\r\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ cdap-etl-api ---\r\n[INFO] io.cdap.cdap:cdap-etl-api:jar:6.5.0-SNAPSHOT\r\n[INFO] +- io.cdap.cdap:cdap-api:jar:6.5.0-SNAPSHOT:compile\r\n[INFO] |  +- io.cdap.cdap:cdap-api-common:jar:6.5.0-SNAPSHOT:compile\r\n[INFO] |  +- com.google.code.findbugs:jsr305:jar:2.0.1:compile\r\n[INFO] |  +- com.google.code.gson:gson:jar:2.2.4:compile\r\n[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.5:compile\r\n[INFO] |  +- org.apache.tephra:tephra-api:jar:0.15.0-incubating:compile\r\n[INFO] |  +- org.apache.twill:twill-api:jar:0.14.0:compile\r\n[INFO] |  |  +- org.apache.twill:twill-common:jar:0.14.0:compile\r\n[INFO] |  |  \\- org.apache.twill:twill-discovery-api:jar:0.14.0:compile\r\n[INFO] |  \\- javax.ws.rs:javax.ws.rs-api:jar:2.0:compile\r\n[INFO] +- io.cdap.cdap:cdap-unit-test:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- com.google.guava:guava:jar:13.0.1:provided\r\n[INFO] |  +- io.cdap.cdap:cdap-test:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-proto:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  \\- io.cdap.cdap:cdap-common:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- io.cdap.cdap:cdap-app-fabric:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-data-fabric:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  |  +- io.cdap.cdap:cdap-metadata-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  |  +- io.cdap.cdap:cdap-elastic:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  |  |  \\- org.elasticsearch.client:elasticsearch-rest-high-level-client:jar:6.5.3:test\r\n[INFO] |  |  |  |     +- org.elasticsearch:elasticsearch:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  +- org.elasticsearch:elasticsearch-core:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  +- org.elasticsearch:elasticsearch-secure-sm:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  +- org.elasticsearch:elasticsearch-x-content:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  |  +- org.yaml:snakeyaml:jar:1.17:test\r\n[INFO] |  |  |  |     |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.11:test\r\n[INFO] |  |  |  |     |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.8.11:test\r\n[INFO] |  |  |  |     |  |  \\- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.8.8:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-core:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-analyzers-common:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-backward-codecs:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-grouping:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-highlighter:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-join:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-memory:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-misc:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-queries:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-queryparser:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-sandbox:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-spatial:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-spatial-extras:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-spatial3d:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.apache.lucene:lucene-suggest:jar:7.5.0:test\r\n[INFO] |  |  |  |     |  +- org.elasticsearch:elasticsearch-cli:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  +- com.carrotsearch:hppc:jar:0.7.1:test\r\n[INFO] |  |  |  |     |  +- com.tdunning:t-digest:jar:3.2:test\r\n[INFO] |  |  |  |     |  +- org.hdrhistogram:HdrHistogram:jar:2.1.9:test\r\n[INFO] |  |  |  |     |  +- org.apache.logging.log4j:log4j-api:jar:2.11.1:test\r\n[INFO] |  |  |  |     |  \\- org.elasticsearch:jna:jar:4.5.1:test\r\n[INFO] |  |  |  |     +- org.elasticsearch.client:elasticsearch-rest-client:jar:6.5.3:test\r\n[INFO] |  |  |  |     |  +- org.apache.httpcomponents:httpasyncclient:jar:4.1.2:test\r\n[INFO] |  |  |  |     |  +- org.apache.httpcomponents:httpcore-nio:jar:4.4.5:test\r\n[INFO] |  |  |  |     |  \\- commons-logging:commons-logging:jar:1.1.3:test\r\n[INFO] |  |  |  |     +- org.elasticsearch.plugin:parent-join-client:jar:6.5.3:test\r\n[INFO] |  |  |  |     +- org.elasticsearch.plugin:aggs-matrix-stats-client:jar:6.5.3:test\r\n[INFO] |  |  |  |     +- org.elasticsearch.plugin:rank-eval-client:jar:6.5.3:test\r\n[INFO] |  |  |  |     \\- org.elasticsearch.plugin:lang-mustache-client:jar:6.5.3:test\r\n[INFO] |  |  |  |        \\- com.github.spullara.mustache.java:compiler:jar:0.9.3:test\r\n[INFO] |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-core:jar:2.6.0:provided\r\n[INFO] |  |  |  \\- org.apache.commons:commons-dbcp2:jar:2.6.0:test\r\n[INFO] |  |  |     \\- org.apache.commons:commons-pool2:jar:2.6.1:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-system-app-api:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-master-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-runtime-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-security-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-security:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- org.quartz-scheduler:quartz:jar:2.2.0:test\r\n[INFO] |  |  +- org.quartz-scheduler:quartz-jobs:jar:2.2.0:test\r\n[INFO] |  |  +- com.ning:async-http-client:jar:1.7.18:test\r\n[INFO] |  |  +- org.apache.twill:twill-yarn:jar:0.14.0:test\r\n[INFO] |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.5:test\r\n[INFO] |  |  |  \\- org.apache.hadoop:hadoop-hdfs:jar:2.6.0:test\r\n[INFO] |  |  |     \\- xerces:xercesImpl:jar:2.9.1:test\r\n[INFO] |  |  |        \\- xml-apis:xml-apis:jar:1.3.04:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-client:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  |  +- commons-lang:commons-lang:jar:2.6:provided\r\n[INFO] |  |  |  \\- io.cdap.cdap:cdap-authentication-client:jar:1.4.0:test\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-mapreduce-client-common:jar:2.6.0:test\r\n[INFO] |  |  |  +- org.apache.hadoop:hadoop-yarn-server-common:jar:2.6.0:test\r\n[INFO] |  |  |  |  \\- org.fusesource.leveldbjni:leveldbjni-all:jar:1.8:test\r\n[INFO] |  |  |  +- com.google.protobuf:protobuf-java:jar:2.5.0:provided\r\n[INFO] |  |  |  +- org.apache.hadoop:hadoop-annotations:jar:2.6.0:provided\r\n[INFO] |  |  |  \\- io.netty:netty:jar:3.6.2.Final:provided\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-yarn-api:jar:2.6.0:provided\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-yarn-client:jar:2.6.0:test\r\n[INFO] |  |  |  +- commons-cli:commons-cli:jar:1.2:provided\r\n[INFO] |  |  |  \\- log4j:log4j:jar:1.2.17:provided\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-yarn-common:jar:2.6.0:provided\r\n[INFO] |  |  |  +- commons-codec:commons-codec:jar:1.4:provided\r\n[INFO] |  |  |  +- org.mortbay.jetty:jetty-util:jar:6.1.26:provided\r\n[INFO] |  |  |  +- com.sun.jersey:jersey-client:jar:1.9:provided\r\n[INFO] |  |  |  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:provided\r\n[INFO] |  |  |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:provided\r\n[INFO] |  |  |  +- org.codehaus.jackson:jackson-jaxrs:jar:1.9.13:provided\r\n[INFO] |  |  |  +- org.codehaus.jackson:jackson-xc:jar:1.9.13:provided\r\n[INFO] |  |  |  \\- commons-io:commons-io:jar:2.4:provided\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-mapreduce-client-jobclient:jar:2.6.0:test\r\n[INFO] |  |  |  \\- com.google.inject.extensions:guice-servlet:jar:3.0:test\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-mapreduce-client-app:jar:2.6.0:test\r\n[INFO] |  |  +- org.apache.hbase:hbase-common:jar:1.0.1.1:test\r\n[INFO] |  |  |  +- org.apache.hbase:hbase-annotations:jar:1.0.1.1:test\r\n[INFO] |  |  |  |  \\- jdk.tools:jdk.tools:jar:1.7:system\r\n[INFO] |  |  |  +- commons-collections:commons-collections:jar:3.2.1:provided\r\n[INFO] |  |  |  +- org.apache.htrace:htrace-core:jar:3.1.0-incubating:test\r\n[INFO] |  |  |  \\- com.github.stephenc.findbugs:findbugs-annotations:jar:1.3.9-1:test\r\n[INFO] |  |  +- org.apache.commons:commons-compress:jar:1.18:provided\r\n[INFO] |  |  +- com.jcraft:jsch:jar:0.1.54:provided\r\n[INFO] |  |  +- org.apache.hive:hive-service:jar:1.2.1:test\r\n[INFO] |  |  |  +- net.sf.jpam:jpam:jar:1.1:test\r\n[INFO] |  |  |  +- org.apache.thrift:libfb303:jar:0.9.2:test\r\n[INFO] |  |  |  +- org.apache.curator:curator-framework:jar:2.6.0:provided\r\n[INFO] |  |  |  \\- org.apache.curator:curator-recipes:jar:2.6.0:provided\r\n[INFO] |  |  +- org.apache.avro:avro:jar:1.8.2:provided\r\n[INFO] |  |  |  \\- org.tukaani:xz:jar:1.5:provided\r\n[INFO] |  |  \\- org.slf4j:jul-to-slf4j:jar:1.7.5:test\r\n[INFO] |  +- io.cdap.cdap:cdap-app-fabric:test-jar:tests:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- io.cdap.cdap:cdap-common:test-jar:tests:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-watchdog-api:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-formats:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.http:netty-http:jar:1.5.0:test\r\n[INFO] |  |  |  \\- commons-beanutils:commons-beanutils-core:jar:1.8.3:provided\r\n[INFO] |  |  +- io.netty:netty-all:jar:4.1.16.Final:test\r\n[INFO] |  |  +- com.google.inject:guice:jar:4.0:provided\r\n[INFO] |  |  |  +- javax.inject:javax.inject:jar:1:provided\r\n[INFO] |  |  |  \\- aopalliance:aopalliance:jar:1.0:provided\r\n[INFO] |  |  +- com.google.inject.extensions:guice-multibindings:jar:4.0:test\r\n[INFO] |  |  +- com.google.inject.extensions:guice-assistedinject:jar:4.0:test\r\n[INFO] |  |  +- org.ow2.asm:asm-commons:jar:7.1:test\r\n[INFO] |  |  |  +- org.ow2.asm:asm:jar:7.1:test\r\n[INFO] |  |  |  +- org.ow2.asm:asm-tree:jar:7.1:test\r\n[INFO] |  |  |  \\- org.ow2.asm:asm-analysis:jar:7.1:test\r\n[INFO] |  |  +- org.apache.thrift:libthrift:jar:0.9.3:test\r\n[INFO] |  |  +- org.apache.twill:twill-discovery-core:jar:0.14.0:test\r\n[INFO] |  |  +- org.apache.twill:twill-core:jar:0.14.0:test\r\n[INFO] |  |  |  +- io.netty:netty-buffer:jar:4.1.16.Final:test\r\n[INFO] |  |  |  |  \\- io.netty:netty-common:jar:4.1.16.Final:test\r\n[INFO] |  |  |  +- io.netty:netty-codec-http:jar:4.1.16.Final:test\r\n[INFO] |  |  |  |  \\- io.netty:netty-codec:jar:4.1.16.Final:test\r\n[INFO] |  |  |  +- io.netty:netty-handler:jar:4.1.16.Final:test\r\n[INFO] |  |  |  |  \\- io.netty:netty-transport:jar:4.1.16.Final:test\r\n[INFO] |  |  |  |     \\- io.netty:netty-resolver:jar:4.1.16.Final:test\r\n[INFO] |  |  |  \\- net.sf.jopt-simple:jopt-simple:jar:3.2:test\r\n[INFO] |  |  +- org.apache.twill:twill-zookeeper:jar:0.14.0:test\r\n[INFO] |  |  |  \\- org.apache.zookeeper:zookeeper:jar:3.4.5:provided\r\n[INFO] |  |  +- org.apache.hadoop:hadoop-common:jar:2.6.0:provided\r\n[INFO] |  |  |  +- org.apache.commons:commons-math3:jar:3.1.1:provided\r\n[INFO] |  |  |  +- xmlenc:xmlenc:jar:0.52:provided\r\n[INFO] |  |  |  +- commons-httpclient:commons-httpclient:jar:3.1:provided\r\n[INFO] |  |  |  +- commons-net:commons-net:jar:3.1:provided\r\n[INFO] |  |  |  +- commons-el:commons-el:jar:1.0:provided\r\n[INFO] |  |  |  +- net.java.dev.jets3t:jets3t:jar:0.9.0:provided\r\n[INFO] |  |  |  |  \\- com.jamesmurty.utils:java-xmlbuilder:jar:0.4:provided\r\n[INFO] |  |  |  +- commons-configuration:commons-configuration:jar:1.6:provided\r\n[INFO] |  |  |  |  \\- commons-digester:commons-digester:jar:1.8:provided\r\n[INFO] |  |  |  |     \\- commons-beanutils:commons-beanutils:jar:1.7.0:provided\r\n[INFO] |  |  |  +- org.apache.hadoop:hadoop-auth:jar:2.6.0:provided\r\n[INFO] |  |  |  |  \\- org.apache.directory.server:apacheds-kerberos-codec:jar:2.0.0-M15:provided\r\n[INFO] |  |  |  |     +- org.apache.directory.server:apacheds-i18n:jar:2.0.0-M15:provided\r\n[INFO] |  |  |  |     +- org.apache.directory.api:api-asn1-api:jar:1.0.0-M20:provided\r\n[INFO] |  |  |  |     \\- org.apache.directory.api:api-util:jar:1.0.0-M20:provided\r\n[INFO] |  |  |  +- org.apache.curator:curator-client:jar:2.6.0:provided\r\n[INFO] |  |  |  \\- org.htrace:htrace-core:jar:3.0.4:provided\r\n[INFO] |  |  +- org.bouncycastle:bcprov-jdk15on:jar:1.60:test\r\n[INFO] |  |  +- org.bouncycastle:bcpkix-jdk15on:jar:1.60:test\r\n[INFO] |  |  +- javax.servlet:javax.servlet-api:jar:3.0.1:test\r\n[INFO] |  |  +- io.cdap.common:common-http:jar:0.13.0:test\r\n[INFO] |  |  \\- io.cdap.common:common-io:jar:0.13.0:test\r\n[INFO] |  |     \\- io.cdap.common:common-lang:jar:0.13.0:test\r\n[INFO] |  +- io.cdap.cdap:cdap-watchdog:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  \\- org.xerial.snappy:snappy-java:jar:1.1.1.7:provided\r\n[INFO] |  +- io.cdap.cdap:cdap-explore:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- org.apache.hive:hive-jdbc:jar:1.2.1:test\r\n[INFO] |  |  |  +- org.apache.hive:hive-common:jar:1.2.1:test\r\n[INFO] |  |  |  |  +- joda-time:joda-time:jar:2.5:test\r\n[INFO] |  |  |  |  +- log4j:apache-log4j-extras:jar:1.2.17:test\r\n[INFO] |  |  |  |  +- org.apache.ant:ant:jar:1.9.1:test\r\n[INFO] |  |  |  |  |  \\- org.apache.ant:ant-launcher:jar:1.9.1:test\r\n[INFO] |  |  |  |  \\- org.json:json:jar:20090211:test\r\n[INFO] |  |  |  +- org.apache.hive:hive-serde:jar:1.2.1:test\r\n[INFO] |  |  |  |  \\- net.sf.opencsv:opencsv:jar:2.3:test\r\n[INFO] |  |  |  +- org.apache.hive:hive-shims:jar:1.2.1:test\r\n[INFO] |  |  |  |  +- org.apache.hive.shims:hive-shims-common:jar:1.2.1:test\r\n[INFO] |  |  |  |  +- org.apache.hive.shims:hive-shims-0.20S:jar:1.2.1:test\r\n[INFO] |  |  |  |  +- org.apache.hive.shims:hive-shims-0.23:jar:1.2.1:test\r\n[INFO] |  |  |  |  \\- org.apache.hive.shims:hive-shims-scheduler:jar:1.2.1:test\r\n[INFO] |  |  |  +- org.apache.httpcomponents:httpclient:jar:4.4:provided\r\n[INFO] |  |  |  \\- org.apache.httpcomponents:httpcore:jar:4.4:provided\r\n[INFO] |  |  +- org.apache.hive:hive-metastore:jar:1.2.1:test\r\n[INFO] |  |  |  +- com.jolbox:bonecp:jar:0.8.0.RELEASE:test\r\n[INFO] |  |  |  +- org.apache.derby:derby:jar:10.10.2.0:test\r\n[INFO] |  |  |  +- org.datanucleus:datanucleus-api-jdo:jar:3.2.6:test\r\n[INFO] |  |  |  +- org.datanucleus:datanucleus-core:jar:3.2.10:test\r\n[INFO] |  |  |  +- org.datanucleus:datanucleus-rdbms:jar:3.2.9:test\r\n[INFO] |  |  |  +- commons-pool:commons-pool:jar:1.5.4:test\r\n[INFO] |  |  |  +- commons-dbcp:commons-dbcp:jar:1.4:test\r\n[INFO] |  |  |  +- javax.jdo:jdo-api:jar:3.0.1:test\r\n[INFO] |  |  |  |  \\- javax.transaction:jta:jar:1.1:test\r\n[INFO] |  |  |  \\- org.antlr:antlr-runtime:jar:3.4:test\r\n[INFO] |  |  |     +- org.antlr:stringtemplate:jar:3.2.1:test\r\n[INFO] |  |  |     \\- antlr:antlr:jar:2.7.7:test\r\n[INFO] |  |  \\- org.apache.avro:avro-mapred:jar:1.8.2:test\r\n[INFO] |  |     \\- org.apache.avro:avro-ipc:jar:1.8.2:test\r\n[INFO] |  |        +- org.mortbay.jetty:jetty:jar:6.1.22:test\r\n[INFO] |  |        \\- org.apache.velocity:velocity:jar:1.7:test\r\n[INFO] |  +- io.cdap.cdap:cdap-explore-client:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- io.cdap.cdap:cdap-explore-jdbc:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- io.cdap.cdap:cdap-api-spark2_2.11:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  \\- org.scala-lang:scala-library:jar:2.11.8:test\r\n[INFO] |  +- io.cdap.cdap:cdap-spark-core2_2.11:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-spark-python:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- org.apache.spark:spark-core_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.avro:avro-mapred:jar:hadoop2:1.7.7:test\r\n[INFO] |  |  |  |  \\- org.apache.avro:avro-ipc:jar:tests:1.7.7:test\r\n[INFO] |  |  |  +- com.twitter:chill_2.11:jar:0.8.0:test\r\n[INFO] |  |  |  |  \\- com.esotericsoftware:kryo-shaded:jar:3.0.3:test\r\n[INFO] |  |  |  |     +- com.esotericsoftware:minlog:jar:1.3.0:test\r\n[INFO] |  |  |  |     \\- org.objenesis:objenesis:jar:2.1:test\r\n[INFO] |  |  |  +- com.twitter:chill-java:jar:0.8.0:test\r\n[INFO] |  |  |  +- org.apache.xbean:xbean-asm5-shaded:jar:4.4:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-launcher_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-network-common_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  |  \\- com.fasterxml.jackson.core:jackson-annotations:jar:2.8.8:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-network-shuffle_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-unsafe_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.commons:commons-lang3:jar:3.5:test\r\n[INFO] |  |  |  +- com.ning:compress-lzf:jar:1.0.3:test\r\n[INFO] |  |  |  +- net.jpountz.lz4:lz4:jar:1.3.0:test\r\n[INFO] |  |  |  +- org.roaringbitmap:RoaringBitmap:jar:0.5.11:test\r\n[INFO] |  |  |  +- org.json4s:json4s-jackson_2.11:jar:3.2.11:test\r\n[INFO] |  |  |  |  \\- org.json4s:json4s-core_2.11:jar:3.2.11:test\r\n[INFO] |  |  |  |     +- org.json4s:json4s-ast_2.11:jar:3.2.11:test\r\n[INFO] |  |  |  |     +- com.thoughtworks.paranamer:paranamer:jar:2.6:test\r\n[INFO] |  |  |  |     \\- org.scala-lang:scalap:jar:2.11.0:test\r\n[INFO] |  |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.22.2:test\r\n[INFO] |  |  |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b34:test\r\n[INFO] |  |  |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b34:test\r\n[INFO] |  |  |  |  |  \\- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b34:test\r\n[INFO] |  |  |  |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b34:test\r\n[INFO] |  |  |  |  \\- org.glassfish.hk2:hk2-locator:jar:2.4.0-b34:test\r\n[INFO] |  |  |  |     \\- org.javassist:javassist:jar:3.18.1-GA:test\r\n[INFO] |  |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.22.2:test\r\n[INFO] |  |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:test\r\n[INFO] |  |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.22.2:test\r\n[INFO] |  |  |  |  \\- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:test\r\n[INFO] |  |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.22.2:test\r\n[INFO] |  |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.22.2:test\r\n[INFO] |  |  |  |  \\- javax.validation:validation-api:jar:1.1.0.Final:test\r\n[INFO] |  |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.22.2:test\r\n[INFO] |  |  |  +- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.22.2:test\r\n[INFO] |  |  |  +- com.clearspring.analytics:stream:jar:2.7.0:test\r\n[INFO] |  |  |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:test\r\n[INFO] |  |  |  +- io.dropwizard.metrics:metrics-json:jar:3.1.2:test\r\n[INFO] |  |  |  +- io.dropwizard.metrics:metrics-graphite:jar:3.1.2:test\r\n[INFO] |  |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.8.8:test\r\n[INFO] |  |  |  |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.8.8:test\r\n[INFO] |  |  |  +- com.fasterxml.jackson.module:jackson-module-scala_2.11:jar:2.8.8:test\r\n[INFO] |  |  |  |  \\- com.fasterxml.jackson.module:jackson-module-paranamer:jar:2.8.8:test\r\n[INFO] |  |  |  +- org.apache.ivy:ivy:jar:2.4.0:test\r\n[INFO] |  |  |  +- oro:oro:jar:2.0.8:test\r\n[INFO] |  |  |  +- net.razorvine:pyrolite:jar:4.13:test\r\n[INFO] |  |  |  +- net.sf.py4j:py4j:jar:0.10.7:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-tags_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.commons:commons-crypto:jar:1.0.0:test\r\n[INFO] |  |  |  \\- org.spark-project.spark:unused:jar:1.0.0:test\r\n[INFO] |  |  +- org.apache.spark:spark-streaming_2.11:jar:2.1.3:test\r\n[INFO] |  |  +- org.apache.spark:spark-sql_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- com.univocity:univocity-parsers:jar:2.2.1:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-sketch_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-catalyst_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  |  +- org.codehaus.janino:janino:jar:3.0.8:test\r\n[INFO] |  |  |  |  +- org.codehaus.janino:commons-compiler:jar:3.0.8:test\r\n[INFO] |  |  |  |  \\- org.antlr:antlr4-runtime:jar:4.5.3:test\r\n[INFO] |  |  |  +- org.apache.parquet:parquet-column:jar:1.8.1:test\r\n[INFO] |  |  |  |  +- org.apache.parquet:parquet-common:jar:1.8.1:test\r\n[INFO] |  |  |  |  \\- org.apache.parquet:parquet-encoding:jar:1.8.1:test\r\n[INFO] |  |  |  \\- org.apache.parquet:parquet-hadoop:jar:1.8.1:test\r\n[INFO] |  |  |     +- org.apache.parquet:parquet-format:jar:2.3.0-incubating:test\r\n[INFO] |  |  |     \\- org.apache.parquet:parquet-jackson:jar:1.8.1:test\r\n[INFO] |  |  +- org.apache.spark:spark-mllib_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-graphx_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  |  +- com.github.fommil.netlib:core:jar:1.1.2:test\r\n[INFO] |  |  |  |  \\- net.sourceforge.f2j:arpack_combined_all:jar:0.1:test\r\n[INFO] |  |  |  +- org.apache.spark:spark-mllib-local_2.11:jar:2.1.3:test\r\n[INFO] |  |  |  +- org.scalanlp:breeze_2.11:jar:0.12:test\r\n[INFO] |  |  |  |  +- org.scalanlp:breeze-macros_2.11:jar:0.12:test\r\n[INFO] |  |  |  |  +- com.github.rwl:jtransforms:jar:2.4.0:test\r\n[INFO] |  |  |  |  +- org.spire-math:spire_2.11:jar:0.7.4:test\r\n[INFO] |  |  |  |  |  \\- org.spire-math:spire-macros_2.11:jar:0.7.4:test\r\n[INFO] |  |  |  |  \\- com.chuusai:shapeless_2.11:jar:2.0.0:test\r\n[INFO] |  |  |  \\- org.jpmml:pmml-model:jar:1.2.15:test\r\n[INFO] |  |  |     \\- org.jpmml:pmml-schema:jar:1.2.15:test\r\n[INFO] |  |  \\- org.apache.spark:spark-repl_2.11:jar:2.1.3:test\r\n[INFO] |  |     +- org.scala-lang:scala-compiler:jar:2.11.8:test\r\n[INFO] |  |     |  +- org.scala-lang.modules:scala-xml_2.11:jar:1.0.4:test\r\n[INFO] |  |     |  \\- org.scala-lang.modules:scala-parser-combinators_2.11:jar:1.0.4:test\r\n[INFO] |  |     +- org.scala-lang:scala-reflect:jar:2.11.8:test\r\n[INFO] |  |     \\- jline:jline:jar:2.12:test\r\n[INFO] |  +- io.cdap.cdap:cdap-tms:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-hbase-compat-base:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  |  \\- io.cdap.cdap:cdap-hbase-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- org.iq80.leveldb:leveldb:jar:uber:0.12:test\r\n[INFO] |  |  |  \\- org.iq80.leveldb:leveldb-api:jar:0.12:test\r\n[INFO] |  |  \\- io.cdap.cdap:cdap-storage-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  +- io.cdap.cdap:cdap-security:test-jar:tests:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- io.cdap.cdap:cdap-securestore-spi:jar:6.5.0-SNAPSHOT:test\r\n[INFO] |  |  +- ch.qos.logback:logback-core:jar:1.0.9:test\r\n[INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.0.9:test\r\n[INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  +- org.eclipse.jetty.orbit:javax.servlet:jar:3.0.0.v201112011016:test\r\n[INFO] |  |  |  +- org.eclipse.jetty:jetty-continuation:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-http:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |     \\- org.eclipse.jetty:jetty-io:jar:8.1.15.v20140411:test\r\n[INFO] |  |  +- org.eclipse.jetty:jetty-security:jar:8.1.15.v20140411:test\r\n[INFO] |  |  +- org.eclipse.jetty:jetty-util:jar:8.1.15.v20140411:test\r\n[INFO] |  |  +- org.eclipse.jetty:jetty-jaspi:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  \\- org.eclipse.jetty.orbit:javax.security.auth.message:jar:1.0.0.v201108011116:test\r\n[INFO] |  |  +- org.eclipse.jetty:jetty-plus:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  +- org.eclipse.jetty.orbit:javax.transaction:jar:1.1.1.v201105210645:test\r\n[INFO] |  |  |  +- org.eclipse.jetty:jetty-webapp:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  |  +- org.eclipse.jetty:jetty-xml:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  |  \\- org.eclipse.jetty:jetty-servlet:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |  \\- org.eclipse.jetty:jetty-jndi:jar:8.1.15.v20140411:test\r\n[INFO] |  |  |     \\- org.eclipse.jetty.orbit:javax.mail.glassfish:jar:1.4.1.v201005082020:test\r\n[INFO] |  |  |        \\- org.eclipse.jetty.orbit:javax.activation:jar:1.1.0.v201105071233:test\r\n[INFO] |  |  +- org.apache.geronimo.components:geronimo-jaspi:jar:2.0.0:test\r\n[INFO] |  |  |  +- org.apache.geronimo.specs:geronimo-jaspic_1.0_spec:jar:1.1:test\r\n[INFO] |  |  |  \\- org.apache.xbean:xbean-reflect:jar:3.6:test\r\n[INFO] |  |  +- org.jboss.resteasy:resteasy-servlet-initializer:jar:3.0.8.Final:test\r\n[INFO] |  |  |  +- org.jboss.resteasy:resteasy-jaxrs:jar:3.0.8.Final:test\r\n[INFO] |  |  |  |  +- org.jboss.spec.javax.annotation:jboss-annotations-api_1.1_spec:jar:1.0.1.Final:test\r\n[INFO] |  |  |  |  +- javax.activation:activation:jar:1.1:test\r\n[INFO] |  |  |  |  \\- net.jcip:jcip-annotations:jar:1.0:test\r\n[INFO] |  |  |  +- org.jboss.resteasy:async-http-servlet-3.0:jar:3.0.8.Final:test\r\n[INFO] |  |  |  \\- org.jboss.resteasy:jaxrs-api:jar:3.0.8.Final:test\r\n[INFO] |  |  \\- org.jboss.resteasy:resteasy-guice:jar:3.0.8.Final:test\r\n[INFO] |  |     \\- javax.annotation:jsr250-api:jar:1.0:test\r\n[INFO] |  +- junit:junit:jar:4.11:test\r\n[INFO] |  |  \\- org.hamcrest:hamcrest-core:jar:1.3:test\r\n[INFO] |  +- org.apache.tephra:tephra-core:jar:0.15.0-incubating:test\r\n[INFO] |  |  +- it.unimi.dsi:fastutil:jar:6.5.6:test\r\n[INFO] |  |  \\- io.dropwizard.metrics:metrics-core:jar:3.1.2:test\r\n[INFO] |  \\- com.sun.jersey:jersey-servlet:jar:1.18:test\r\n[INFO] |     \\- com.sun.jersey:jersey-server:jar:1.18:test\r\n[INFO] |        \\- com.sun.jersey:jersey-core:jar:1.18:test\r\n[INFO] \\- io.cdap.cdap:cdap-common-unit-test:jar:6.5.0-SNAPSHOT:test\r\n```\r\n\r\nWhich only shows Guava in the `test` scope..."}
{"iteration": 2, "tag": "no", "repo": "confluentinc/kafka-connect-elasticsearch", "url": "https://github.com/confluentinc/kafka-connect-elasticsearch/pull/475#discussion_r535674649", "body": "asdf\r\n```suggestion\r\n        Wait.forLogMessage(\".*(Security is enabled|license .* valid).*\", 1)\r\n```"}
{"iteration": 2, "tag": "no", "repo": "openjdk/skara", "url": "https://github.com/openjdk/skara/pull/1443#discussion_r1049948770", "body": "```suggestion\r\n            // Found a csr issue for one of the issues associated with this pr\r\n```"}
{"iteration": 2, "tag": "no", "repo": "hortonworks/cloudbreak", "url": "https://github.com/hortonworks/cloudbreak/pull/5668#discussion_r306863945", "body": "The database vendor is available in the DatabaseServerV4Response object, and that can determine whether the URL should include \"postgresql\" or some other string.\r\n\r\nAlso, DatabaseCommon has a method for forming JDBC connection strings for several different vendors."}
{"iteration": 2, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/1132#discussion_r224839648", "body": "Yea, we should definitely try other strategies if certain strategies like inferring the credential helper fails. However, for the case where a path is specified and the file doesn't exist, this should be an invalid input error for the user since the user defined it themselves."}
{"iteration": 2, "tag": "yes", "repo": "azkaban/azkaban", "url": "https://github.com/azkaban/azkaban/pull/2432#discussion_r373142577", "body": "I don't think we're able to parse expected property names like \"space_id\" here. Also, using the model class to auto map input parameters can be dangerous as malicious users can guess and provide values for model properties not exposed or expected in the user facing form which will potentially be persisted. "}
{"iteration": 2, "tag": "yes", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1235#discussion_r647780068", "body": "unsecure"}
{"iteration": 2, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/14394#discussion_r1255945485", "body": "I think we need to harden this area of code actually. Some JDK configurations may not have an SSL provider.\r\n\r\ne.g. (removing JSSE from config)   \r\n\r\n```\r\n    See \"java -X\" for verbose security settings options\r\n    Security provider static configuration: (in order of preference)\r\n        Provider name: SUN\r\n        Provider name: SunRsaSign\r\nException in thread \"main\" java.lang.InternalError: Failed to create SSL socket\r\n\tat java.base/sun.launcher.SecuritySettings.printSecurityTLSConfig(SecuritySettings.java:121)\r\n\tat java.base/sun.launcher.SecuritySettings.printSecuritySummarySettings(SecuritySettings.java:75)\r\n\tat java.base/sun.launcher.LauncherHelper.showSettings(LauncherHelper.java:188)\r\n\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4738#discussion_r551542640", "body": "The only option I see is to log the payload but this would raise security concerns IMO. I can change the loop to have the log message only once and say how many messages we could not re-insert in the queue."}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/94736#discussion_r1149346396", "body": "I think you're looking for this:\r\n\r\n```suggestion\r\n            internalResponse.toXContentChunked(params)\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "OpenAPITools/openapi-generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367144652", "body": "The spec is parsed, I am seeing the above code successfully generate authMethods:\r\n```\r\nauthMethods = {ArrayList@2705}  size = 5\r\n 0 = {CodegenSecurity@2714} \"CodegenSecurity{name='api_key', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key', isKeyInQuery=false, isKeyInHeader=true, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n 1 = {CodegenSecurity@2715} \"CodegenSecurity{name='api_key_query', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key_query', isKeyInQuery=true, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n 2 = {CodegenSecurity@2716} \"CodegenSecurity{name='bearer_test', type='http', scheme='bearer', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=false, isBasicBearer=true, bearerFormat='JWT', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n 3 = {CodegenSecurity@2717} \"CodegenSecurity{name='http_basic_test', type='http', scheme='basic', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=true, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\r\n 4 = {CodegenSecurity@2718} \"CodegenSecurity{name='petstore_auth', type='oauth2', scheme='null', hasMore=false, isBasic=false, isOAuth=true, isApiKey=false, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='implicit', authorizationUrl='http://petstore.swagger.io/api/oauth/dialog', tokenUrl='null', scopes=[{scope=write:pets, hasMore=true, description=modify pets in your account}, {scope=read:pets, hasMore=null, description=read your pets}], isCode=false, isPassword=false, isApplication=false, isImplicit=true}\"\r\n```\r\nAre you invoking it inside processOpts?"}
{"iteration": 2, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/3078#discussion_r301002843", "body": "@pedroigor your PR to get it addressed at the `elytron-security` level looks nice. I guess once it is in, the code which @loicmathieu did for checking the claim properties can be wrapped into this extension specific RoleDecoder :-). May be some ordering constraints can be applied in time as well"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/2582#discussion_r276283587", "body": "nit: normal convention is for:\r\n\r\n```suggestion\r\n    final Checksum that = (Checksum) o;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/9311#discussion_r1278798315", "body": "Maybe we don't need as we are always picking the latest payload. But, should we even allow such switching? Maybe add a validation?"}
{"iteration": 2, "tag": "no", "repo": "apache/netbeans", "url": "https://github.com/apache/netbeans/pull/3620#discussion_r809715158", "body": "Apologies :( Also please bump spec version of the module. Not only GradleOptionItem, but more importantly the Flag and Parameter changed, so a module that uses the new symbol need to depend on new spec version to avoid potential issues if distributed through Plugin Portal."}
{"iteration": 2, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/13646#discussion_r44270282", "body": "This worries me a bit since we allow any string as a field name. So should we use a control character instead, like the null byte? ('\\0`) Then we could also index into the same field that terms could not be extracted by using an arbitrary field value that does not contain this separator.\n"}
{"iteration": 2, "tag": "no", "repo": "wso2/product-microgateway", "url": "https://github.com/wso2/product-microgateway/pull/1537#discussion_r553724482", "body": "```suggestion\r\n     * Holds the configurations related to threading of gRPC netty server.\r\n```"}
{"iteration": 2, "tag": "no", "repo": "polypheny/Polypheny-DB", "url": "https://github.com/polypheny/Polypheny-DB/pull/393#discussion_r808852365", "body": "Please add a proper exception handling."}
{"iteration": 2, "tag": "no", "repo": "azkaban/azkaban", "url": "https://github.com/azkaban/azkaban/pull/566#discussion_r89665515", "body": "I am not sure why the API requires both project name and project ID as inputs. Wouldn't it introduce more opportunities for clients to make mistakes? "}
{"iteration": 2, "tag": "yes", "repo": "apache/storm", "url": "https://github.com/apache/storm/pull/2738#discussion_r198544889", "body": "We need to do more than just print a stack trace if we cannot make these classes, because it is going to quietly disable security."}
{"iteration": 2, "tag": "no", "repo": "spring-cloud/spring-cloud-stream", "url": "https://github.com/spring-cloud/spring-cloud-stream/pull/923#discussion_r111769356", "body": "@garyrussell @viniciusccarvalho I would prefer the formatters pool as well if we can have it (as opposed to the ThreadLocal). I don't believe we will go full Java 8 before Spring Cloud Stream 2. "}
{"iteration": 2, "tag": "yes", "repo": "jclouds/jclouds", "url": "https://github.com/jclouds/jclouds/pull/1128#discussion_r131720327", "body": "Wouldn't give as nice error message as the above one - not clear which security group is missing with your suggestion.\r\n\r\nLGTM overall."}
{"iteration": 2, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4753#discussion_r561208666", "body": "```suggestion\r\n        return (isZooKeeperClientSecure && isTlsConfigPresent);\r\n```"}
{"iteration": 2, "tag": "yes", "repo": "yahoo/fili", "url": "https://github.com/yahoo/fili/pull/405#discussion_r127072163", "body": "I don't think we want to treat a `null` mapper as the identity. This effectively means that if a user doesn't have any of the specified roles, they get FULL ACCESS TO EVERYTHING FOREVER.  People concerned about security usually get twitchy when the default is FULL ACCESS TO EVERYTHING FOREVER.\r\n\r\nInstead, we should probably throw an exception here (an `IllegalArgumentException` or something)."}
{"iteration": 2, "tag": "no", "repo": "apache/solr", "url": "https://github.com/apache/solr/pull/207#discussion_r667381791", "body": "```suggestion\r\n      attrsCopy.put(e.getKey(), e.getValue());\r\n```"}
{"iteration": 2, "tag": "unclear", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/17192#discussion_r647057507", "body": "The whole mechanism abstraction adds overhead to every request which will exist if the user isn't using AWS security.  I don't know yet if users will always use AWS security, so I'd like to keep the default false."}
{"iteration": 2, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/14737#discussion_r1018568043", "body": "no worries at all"}
{"iteration": 2, "tag": "yes", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/289#discussion_r132199113", "body": "Wouldn't defaulting to ignored annotation introduce a vulnerability in the validation? Say if an admin doesn't setup the monitor correctly or disables the auto-discovery.  I am wondering why we would ever want to disable the validation and can we prevent it from being disabled?"}
{"iteration": 2, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/4686#discussion_r96999287", "body": "I think have two reasons leads to inconsistency, one is that ufs's file changes, and another is alluxio's file changes and do not persist to ufs. So, I will provide two options for user to choice how to fix the inconsistency problem."}
{"iteration": 2, "tag": "no", "repo": "aws-amplify/amplify-android", "url": "https://github.com/aws-amplify/amplify-android/pull/1129#discussion_r563943094", "body": "Little `l`?\r\n```suggestion\r\n    private long syncStartTime;\r\n```"}
{"iteration": 2, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/70956#discussion_r609443477", "body": "Can we put a bit of logging here ?\r\n```suggestion\r\n            final Version securityMappingVersion = securityIndex.getInstallableMappingVersion() \r\n            if (securityMappingVersion.before(METADATA_INTRODUCED)) {\r\n                logger.info(\"The security index [{}] mapping is for version [{}] but API Key metadata requires [{}];\"\r\n                    + \" the mapping will automatically upgrade to a supported version when the cluster no longer\"\r\n                    + \" has nodes that are [{}] or earlier\", \r\n                    securityIndex.aliasName(), \r\n                    securityMappingVersion, \r\n                    METADATA_INTRODUCED, \r\n                    FLATTENED_FIELD_TYPE_INTRODUCED);\r\n```"}
{"iteration": 2, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/1185#discussion_r363072541", "body": "Add comment."}
{"iteration": 2, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/6135#discussion_r957025649", "body": "let's make a note to call it out in release notes."}
{"iteration": 2, "tag": "no", "repo": "square/javapoet", "url": "https://github.com/square/javapoet/pull/187#discussion_r23136122", "body": "Ie. we don't do `containsAll()` checks with `asMemberModifiers`.\n"}
{"iteration": 2, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/7810#discussion_r671808072", "body": "Make deep-copy instead of suppress spotbug warning."}
{"iteration": 2, "tag": "yes", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/4028#discussion_r943984567", "body": "The notion was to avoid the risky pattern `if (obj == null) { do something }`, but when considering the where/how this code is written is a great example to say plugins shouldn't be doing this directly - they shouldn't access the user object at all in a security centric concept.  If we were going to move forward with this implementation I would step this back."}
{"iteration": 2, "tag": "no", "repo": "mulesoft/mule", "url": "https://github.com/mulesoft/mule/pull/948#discussion_r16805428", "body": "ExceptionListener will always be not null. Null only happens for SAP connector which is a must for backward compatibility of the connector. The issue fixed here won't apply to SAP connector but most likely users are not affected by this issue and there's no easy way to make the fix in SAP connector until we release a new version.\n"}
{"iteration": 2, "tag": "no", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/15824#discussion_r1415523455", "body": "It would be good to use `@ToString` here but as this shows this would be a problem since we are dealing with objects already. I think a input to an operation should not supply instances but UIDs. This is for ease of use for the caller but also to avoid any sort of transaction boundary issues. It is better to let any loading and storing happen within the scope of the service method that performs the merge. The only exception to this would be methods that support bulk operation where we want to work with preloaded instances."}
{"iteration": 2, "tag": "no", "repo": "delta-io/connectors", "url": "https://github.com/delta-io/connectors/pull/293#discussion_r833697159", "body": "```suggestion\r\n     * The Delta Table snapshot version used to create this checkpoint.\r\n```\r\nisnt it?"}
{"iteration": 3, "tag": "no", "repo": "apache/incubator-kie-optaplanner", "url": "https://github.com/apache/incubator-kie-optaplanner/pull/872#discussion_r467882821", "body": "https://github.com/kiegroup/optaplanner/pull/872/commits/7dd155181c6f1f7f867667d82eb53de3aa1d5a38"}
{"iteration": 3, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/19260#discussion_r1346282476", "body": "What kind of micro benchmarks would you suggest?\r\n\r\nI believe benchmarks with narrow tables, like tpch, should not show this as a significant improvement, or maybe even not an improvement at all. Open to guidance."}
{"iteration": 3, "tag": "yes", "repo": "openmrs/openmrs-core", "url": "https://github.com/openmrs/openmrs-core/pull/334#discussion_r4571427", "body": "does this expose Context to being insecurely impacted by modules directly, or is that not a big deal (or even a feature)?\n"}
{"iteration": 3, "tag": "unclear", "repo": "azkaban/azkaban", "url": "https://github.com/azkaban/azkaban/pull/2030#discussion_r234755365", "body": "Have you checked if this method is currently used by any external user?"}
{"iteration": 3, "tag": "no", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/4555#discussion_r194527063", "body": "It was not the internal lint check. It's from my local spotbugs plug-in."}
{"iteration": 3, "tag": "unclear", "repo": "neoforged/NeoForge", "url": "https://github.com/neoforged/NeoForge/pull/73#discussion_r1390255008", "body": "Do we want to validate they aren't trying to attach a capability to air? For blocks I maybe could see some reasons for certain types of caps people would want to attach to air (though that may be a very bad idea), but for the empty item stack? Seems like it would potentially just introduce bugs."}
{"iteration": 3, "tag": "no", "repo": "neoforged/NeoForge", "url": "https://github.com/neoforged/NeoForge/pull/246#discussion_r1395745914", "body": "Magic numbers make me itch. Based on [the Minecraft Wiki](https://minecraft.wiki/w/Pointed_Dripstone#Cauldrons), the percent chance for a cauldron being filled with water by pointed dripstone stalactites is 45/256, which (according to my calculators) equals to this number exactly."}
{"iteration": 3, "tag": "no", "repo": "hashgraph/hedera-mirror-node", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/2006#discussion_r648991096", "body": "Captured missing items"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/96629#discussion_r1223068120", "body": "What are the pros/cons of not doing binary serialization? It's space vs. convenience right? Anything I'm missing? I'd be OK if we just want to store everything as text. "}
{"iteration": 3, "tag": "yes", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414185072", "body": "It is generally helpful to include some language about what the purpose of the method is. In this case we could say this is intended to make test failures more clear and easier to debug. We can also note that the default is to strip the cause for consistency with other transports. The cause information can normally leak information to untrusted clients and is language-specific, which aren't concerns for in-process."}
{"iteration": 3, "tag": "no", "repo": "GregTechCE/GregTech", "url": "https://github.com/GregTechCE/GregTech/pull/1047#discussion_r398921749", "body": "Ultimately what was the result to the end user?"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/49895#discussion_r354972826", "body": "A short javadoc on the interface itself would be nice. Something about a base for utility methods about compiled scripts that is agnostic to the concrete script signatures?"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/103698#discussion_r1440292459", "body": "It makes me feel uneasy, cannot we reuse the BytesRef  reader as we are reading an array of bytes?"}
{"iteration": 3, "tag": "no", "repo": "DependencyTrack/dependency-track", "url": "https://github.com/DependencyTrack/dependency-track/pull/3551#discussion_r1531220183", "body": "Oops. Good catch"}
{"iteration": 3, "tag": "yes", "repo": "undertow-io/undertow", "url": "https://github.com/undertow-io/undertow/pull/1316#discussion_r886064693", "body": "Is it OK from a security perspective to have predictable ids here? (It's only the pattern that is suspicious, not a fact I know for the case)."}
{"iteration": 3, "tag": "no", "repo": "googleapis/google-cloud-java", "url": "https://github.com/googleapis/google-cloud-java/pull/3661#discussion_r220011903", "body": "> We have to be Java 7 compatible for a while longer.\r\n\r\nSorry I didn't explain myself very well. I meant that whatever we do, it shouldn't be too Java7-unfriendly. Your proposal is fine in this aspect. I wanted to explicitly call it out as a design constraint, and called it out badly :P\r\n\r\n> The current PR seems to be backwards compatible, String.toString() returns the same object.\r\n\r\nThe current PR is definitely source-backward-compatible: any code that currently compiles will continue to compile. It isn't binary-compatible though. Java resolves overloads at compile time. For a user who compiles against the latest version, their binary will call `setSpanID(String)`. But this PR removes `setSpanID(String)` then adds `setSpanID(Object)`. If the user updates the `trace` JAR without recompiling, their application will crash with `MethodNotFound` exception. To get around this, we have to\r\n\r\n```java\r\nvoid setSpanID(String s) {setSpanID((Object) s);}\r\nvoid setSpanID(Object obj) {...}\r\n```\r\n\r\nso that the compiler retains the `setSpanID(String)` symbol. Am I making any sense?\r\n\r\n> If we do what you suggest we add an extra object allocation every time we call the old API \r\n\r\nYou're absolutely right, I didn't think about the performance implications. @garrettjonesgoogle @chingor13 @JesseLovelace Do you want to tie-break?"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/611#discussion_r107699034", "body": "Fixed https://github.com/zalando/nakadi/pull/611/commits/ac02cc6e1304e32d75a080522a1ad581a2bc5096"}
{"iteration": 3, "tag": "unclear", "repo": "codecentric/spring-boot-admin", "url": "https://github.com/codecentric/spring-boot-admin/pull/655#discussion_r171477017", "body": "I'm currently wondering if we shouldn't make the auto-deregistration feature by default active even for non cloud-foundry... what do you think?"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/1083#discussion_r494132329", "body": "Ik vind het erg tof dat je met de tijd mee gaat en allemaal lambda's gebruikt, ik vind het er alleen niet duidelijker op worden. ConnectedOperation is gewoon een Boolean?"}
{"iteration": 3, "tag": "no", "repo": "SORMAS-Foundation/SORMAS-Project", "url": "https://github.com/SORMAS-Foundation/SORMAS-Project/pull/3097#discussion_r501535681", "body": "The \"Phone Owner\" is not a phone number. It's the owner of the phone (used e.g. in African countries where there are remote communities with only one or a few phones that a specific person is responsible for)."}
{"iteration": 3, "tag": "no", "repo": "apache/cassandra-java-driver", "url": "https://github.com/apache/cassandra-java-driver/pull/1267#discussion_r294499725", "body": "In similar messages (see `replaceKeyspaceAndTablePlaceholders`), I've used the entity's simple name. My reasoning was that it would be pretty obvious from the context which class it is.\r\nI don't mind either way but we should be consistent, if you think it's worth having the package we'll modify the other message."}
{"iteration": 3, "tag": "broken", "repo": "Alfresco/alfresco-community-repo", "url": "https://github.com/Alfresco/alfresco-community-repo/pull/2362#discussion_r1420605759", "body": "## Avoid using implementation types like 'ArrayList'; use the interface instead\n\nAvoid using implementation types like 'ArrayList'; use the interface instead\n\n[Show more details](https://github.com/Alfresco/alfresco-community-repo/security/code-scanning/12151)"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/5241#discussion_r1324111359", "body": "Ja, het is een beetje een apart verhaal, maar blijkbaar ging er iets fout wanneer een tabel gelocked was bij het genereren van het deploymentId. Standaard wordt hij nu alleen gezet als liquibase direct naar een DB schrijft en niet meer wanneer hij naar een writer de sql wegschrijft."}
{"iteration": 3, "tag": "no", "repo": "IrisShaders/Iris", "url": "https://github.com/IrisShaders/Iris/pull/1410#discussion_r867437378", "body": "I assume this is a vestige of old code?"}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/1817#discussion_r805331658", "body": "Imo mo\u017cna w og\u00f3le wywali\u0107 ten warunek, jak regiony s\u0105 wy\u0142\u0105czone, to option b\u0119dzie empty."}
{"iteration": 3, "tag": "no", "repo": "apache/commons-lang", "url": "https://github.com/apache/commons-lang/pull/308#discussion_r331425198", "body": "Is this related to JSON?"}
{"iteration": 3, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/8716#discussion_r1196196596", "body": "Yes, can you show me that code snippet?"}
{"iteration": 3, "tag": "no", "repo": "google/ExoPlayer", "url": "https://github.com/google/ExoPlayer/pull/941#discussion_r44371870", "body": "I would completely understand if you decided not to accept these changes. I can try to identify additional devices, but I would guess they might also fall into the \"not so mainstream\" category. Unfortunately for me though, users still purchase these devices with the expectation that they will work well with our application and therefore we are still required to try and best utilise their capabilities.\n"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/522#discussion_r94242929", "body": "https://github.com/zalando/nakadi/pull/522/commits/f4f0ca4ece0b1733e6d5da00cf35c4d9556f3ad9"}
{"iteration": 3, "tag": "no", "repo": "angular/clutz", "url": "https://github.com/angular/clutz/pull/673#discussion_r165469263", "body": "Whoops!"}
{"iteration": 3, "tag": "yes", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/6710#discussion_r969547175", "body": "Regarding @DaanHoogland's comment, operators already have access to the VMs metadata (e.g.: while listing the VMs via API) and these data are printed several times in other logs; therefore, I do not see how could it be a security concern in this case. Am I missing something?"}
{"iteration": 3, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/8430#discussion_r1309534252", "body": "@mhajas I agree with your view that we should not refuse groups with slash in the name as that is currently allowed. As you pointed out, we can discuss whether this makes sense or not in a separate issue, but for the scope of this PR this is a behavior I would not change."}
{"iteration": 3, "tag": "broken", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/1906#discussion_r148147578", "body": "Where is this shutdown?"}
{"iteration": 3, "tag": "broken", "repo": "javers/javers", "url": "https://github.com/javers/javers/pull/241#discussion_r43685155", "body": "te klasy celowo by\u0142y private \u017ceby nie za\u015bmieca\u0107 publicznego API i javadoca, s\u0105 u\u017cywane tylko lokalnie, przez LiveGraphFactory. Je\u015bli chcesz je mie\u0107 w oddzielnych plikach to w tym samym pakiecie i package-private a nie public\n"}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/1997#discussion_r896689940", "body": "Bo wtedy jeszcze nie by\u0142o takiego wy\u015bmienitego API ;) Tamte metody i tak pod mask\u0105 wysy\u0142aj\u0105 pakiety wi\u0119c nie rozumiem w czym rzecz, PacketPlayOutChat zosta\u0142 zreszt\u0105 usuni\u0119ty, w 1.19 wchodzi szyfrowanie i kilka innych rzeczy wi\u0119c te zmiany musz\u0105 zosta\u0107 wprowadzone w spigocie kt\u00f3ry wyprowadza elegancko API i jeszcze musi je wprowadzi\u0107 tw\u00f3rca ka\u017cdego pluginu kt\u00f3ry u\u017cywa NMS, boilerplating."}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/89176#discussion_r942531322", "body": "What if we combine the two approaches to be a bit more efficient. What if we compare if the number of shards in the cluster state and in the step are the same (that is probably the most common case). If they are different then we try to parse the cached phase in an effort to improve user experience and we accept the performance hit since this will probably will not be a very common situation?"}
{"iteration": 3, "tag": "language", "repo": "secure-software-engineering/FlowDroid", "url": "https://github.com/secure-software-engineering/FlowDroid/pull/255#discussion_r438367719", "body": "Diese Units sollten nur tempor\u00e4r eingef\u00fcgt und dann wieder entfernt werden. Nicht schlimm, sie zu markieren, sollte aber unn\u00f6tig sein."}
{"iteration": 3, "tag": "yes", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r422191123", "body": "Why don't we have a better serialization mechanism ?\r\nJava serialization is heavy and it could lead to security issues."}
{"iteration": 3, "tag": "unclear", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529518814", "body": "Is OpenTelemetry \"always on\"?  Should there be a way for the end user to \"opt out\" like we do for other metrics collection?"}
{"iteration": 3, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/21745#discussion_r1437585472", "body": "Why did you acquire the read lock here?"}
{"iteration": 3, "tag": "language", "repo": "OpenEMS/openems", "url": "https://github.com/OpenEMS/openems/pull/1294#discussion_r526379150", "body": "Ich verstehe die Idee hinter diesen Interfaces und ich hatte mal einen ersten Entwurf von OpenEMS, der ganz \u00e4hnlich aufgebaut war. Ich habe den Ansatz dann damals zu Gunsten von Channels verworfen. da ich damit Methoden, Variablen und Metadaten elegant kombinieren konnte. \r\n\r\nMit so einem Interface programmierst du im Endeffekt nur einen weiteren Wrapper um die Channels herum und schreibst nochmal f\u00fcr jeden Channel eine Methode. Das macht den Code h\u00e4ufig nur l\u00e4nger und undurchsichtiger und viele Metadaten gehen verloren. Woher wei\u00df ich z. B., in welcher Einheit die MaxApparentPower hier zur\u00fcckgegeben wird? Ist es der aktuell g\u00fcltige Wert (Process-Image)? usw."}
{"iteration": 3, "tag": "no", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/4854#discussion_r1293134482", "body": "https://github.com/wso2/carbon-identity-framework/pull/4854/commits/8dd16447d6000412e3ff2dd1b2a9ed78249f2d13"}
{"iteration": 3, "tag": "no", "repo": "MegaMek/mekhq", "url": "https://github.com/MegaMek/mekhq/pull/3099#discussion_r796577888", "body": "Definitely should have 2 objectives. Both are sound military objectives. The first is hold at all costs and if you retreat and give up the field you should lose as you have lost the battle. The other is typical of what was expected of NATO units in eastern Europe. Hold off the advancing Soviet Pack units for a period of time, then fall back to the next defensive line buying time for reinforcements to arrive from the US.  In this case the units would have achieved their objective if they delayed the enemy even if they gave up the field. "}
{"iteration": 3, "tag": "no", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/683#discussion_r122006056", "body": "If the default MaxTxRetries value is 20 and there is a 1ms sleep in-between retries, then how will this take approximately 10 seconds? wouldn't it be ~20 ms?\r\n\r\nAssociating time with the number of retries here seems misleading, unnecessary comment?"}
{"iteration": 3, "tag": "no", "repo": "iluwatar/java-design-patterns", "url": "https://github.com/iluwatar/java-design-patterns/pull/1784#discussion_r646756964", "body": "Any reasons for removing logging? Was it showing any issues on sonar?"}
{"iteration": 3, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/441#discussion_r267452131", "body": "@jayv Apart from making one off requests which one can argue are less common and can just use the client, do you have any use case in mind where a connection builder is more useful than a client builder?\r\n\r\nReserve connection is about \"exclusive access\" lifecycle and does not care about the connection lifetime. Connection lifetime is more challenging in presence of concurrent usage and would get into arbitrary connection sharing and re-connect logic. Exclusive access by definition is a single consumer, which is much easier to manage. The point here is that for a typical usecase, client is good enough and desired for persistent connections,  if we don't know of a case where a client can not be used, reducing layers and concepts will help users."}
{"iteration": 3, "tag": "no", "repo": "vavr-io/vavr", "url": "https://github.com/vavr-io/vavr/pull/1841#discussion_r98030177", "body": "@vicmosin can you provide a test please? I've overseen it - I'm on a mobile phone..."}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/35819#discussion_r235797662", "body": "can you add a TODO here that we revisit these during integration with Zen2 bwc?"}
{"iteration": 3, "tag": "no", "repo": "line/centraldogma", "url": "https://github.com/line/centraldogma/pull/133#discussion_r169221268", "body": "The term 'accessibility' is often used for disabled people. Do we have a better term here?"}
{"iteration": 3, "tag": "no", "repo": "akto-api-security/akto", "url": "https://github.com/akto-api-security/akto/pull/1027#discussion_r1574228849", "body": "Use URI if possible"}
{"iteration": 3, "tag": "unclear", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/6522#discussion_r1189911429", "body": "should be abstract or have a private contractor"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/43247#discussion_r294623079", "body": "maybe it's just me, but I think `rootProject.zipTree(downloadConfig.getSingleFile())` would be much easier to read.  this might be subjective, but I find that variables only used once or a few times but really far apart make the code significantly harder to read. "}
{"iteration": 3, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/3813#discussion_r964675141", "body": "Would you mind putting some formatting spaces here for better readability"}
{"iteration": 3, "tag": "no", "repo": "ViaVersion/ViaVersion", "url": "https://github.com/ViaVersion/ViaVersion/pull/2374#discussion_r584285207", "body": "How are links handled?"}
{"iteration": 3, "tag": "no", "repo": "vaticle/typedb", "url": "https://github.com/vaticle/typedb/pull/1154#discussion_r102172641", "body": "Whoops!"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/57378#discussion_r434012408", "body": "Is this because the maps might be an immutable empty map? I would be interested why you chose this over simply `new HashMap()` e.g in the ctor, isn't it highly likely that we add meta-fields at some point (e.g. _index etc...)? I think I'd prefer using a modifiable map in ctor / deserialization in that case from the start just to make things simpler."}
{"iteration": 3, "tag": "no", "repo": "palantir/conjure", "url": "https://github.com/palantir/conjure/pull/835#discussion_r608742405", "body": "Maybe tracing headers as well?"}
{"iteration": 3, "tag": "yes", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/1087#discussion_r34418840", "body": "You should dispose the states for security concerns, e.g. `mUser`.\n"}
{"iteration": 3, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/11331#discussion_r1476286343", "body": "Is this entirely reliable?  I recall some discussion about static config being a bit of an issue."}
{"iteration": 3, "tag": "yes", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/2371#discussion_r252864871", "body": "Would it be a security concern to also log the `record` in the error message? Or if we were really fancy we can also output this in the processing error message \ud83d\ude02 (probably out of scope for this PR)"}
{"iteration": 3, "tag": "no", "repo": "hibernate/hibernate-search", "url": "https://github.com/hibernate/hibernate-search/pull/1263#discussion_r92811425", "body": "I don't see the point of making it protected?"}
{"iteration": 3, "tag": "no", "repo": "jenkinsci/tfs-plugin", "url": "https://github.com/jenkinsci/tfs-plugin/pull/190#discussion_r156202918", "body": "When did the URL change? Do we need to be backwards compatible?"}
{"iteration": 3, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/39#discussion_r370771179", "body": "How necessary is an actual DB vs, just getting the name and version and whatnot from the directory name, similar to what Brazil does?"}
{"iteration": 3, "tag": "language", "repo": "hivemq/mqtt-cli", "url": "https://github.com/hivemq/mqtt-cli/pull/67#discussion_r320199713", "body": "schon geschaut wie des bei nicht dark themes aussieht?"}
{"iteration": 3, "tag": "no", "repo": "fabric8io/kubernetes-client", "url": "https://github.com/fabric8io/kubernetes-client/pull/622#discussion_r96205004", "body": "I don't understand why would we want to do that? \r\n\r\nEvicting the connection pool and shutting down the executor service just to close a websocket seem really intrussive.\r\n\r\nNot sure what you are trying to fix here, but this is equivalent to calling `client.close()`.\r\n\r\n"}
{"iteration": 3, "tag": "no", "repo": "google/fhir-data-pipes", "url": "https://github.com/google/fhir-data-pipes/pull/811#discussion_r1325303897", "body": "I don't think that the latency of this function is a big concern but I have not tested this with a huge number of tables (maybe ~10 to 20). In any case, this is to fix a potential race condition; please see the TODO before `PipelineManager.PipelineThread.createHiveResourceTables` which is removed in this PR."}
{"iteration": 3, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/11139#discussion_r844731117", "body": "https://github.com/keycloak/keycloak/pull/11162"}
{"iteration": 3, "tag": "no", "repo": "eclipse/hawkbit", "url": "https://github.com/eclipse/hawkbit/pull/1046#discussion_r529514082", "body": "I don't think it is a good idea to load all the targets at once. It would lead to suboptimal DB query as well as increased memory consumption. Better use the above #findByTargetFilterQuery method with paging by iterating till there is nothing to return processing them in batches [not applicable here](however, if you are totally sure that the footprint of entities is low (count is limited by quota, etc.) you can use the helper method in UI defined in HawkbitCommonUtil#getEntitiesByPageableProvider to get all the entities)"}
{"iteration": 3, "tag": "no", "repo": "cgeo/cgeo", "url": "https://github.com/cgeo/cgeo/pull/5715#discussion_r61920121", "body": "Thanks for developing @Bananeweizen, that was indeed my point entirely. This is fine here whatever the default is (I think even Asian languages contain the basic latin plane), but I would not want to see a change in the string made later with consequences differing depending on the default locale.\n"}
{"iteration": 3, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/5966#discussion_r906417856", "body": "This was the culprit"}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2328#discussion_r1131672324", "body": "Lepiej odwr\u00f3\u0107 warunek i zr\u00f3b wcze\u015bniejszy return. Jak wo\u0142asz to dwa razy to mo\u017cna te\u017c wyci\u0105gn\u0105\u0107 do zmiennej."}
{"iteration": 3, "tag": "no", "repo": "amihaiemil/docker-java-api", "url": "https://github.com/amihaiemil/docker-java-api/pull/211#discussion_r240447960", "body": "@bkuzmic The discussion about checked exceptions goes on and on. I believe that we should not declare them in interfaces, because they lead us to a lot of design problems. I'd like to know your opinion, and @amihaiemil 's opinion too on this subject."}
{"iteration": 3, "tag": "no", "repo": "openmrs/openmrs-core", "url": "https://github.com/openmrs/openmrs-core/pull/3240#discussion_r712117198", "body": "How will the caller know that something went wrong?"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/689#discussion_r125283557", "body": "removed https://github.com/zalando/nakadi/pull/689/commits/047cb43f8f922a45c2878dd3c906a984e0d63607"}
{"iteration": 3, "tag": "no", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/4566#discussion_r176816357", "body": "Whoops!"}
{"iteration": 3, "tag": "no", "repo": "NationalSecurityAgency/emissary", "url": "https://github.com/NationalSecurityAgency/emissary/pull/122#discussion_r614877024", "body": "Do we have an alternate mechanism for changing log levels in place? Is this just removal of unused code, or do we have a replacement for this or do we net lose functionality there?"}
{"iteration": 3, "tag": "language", "repo": "apache/servicecomb-pack", "url": "https://github.com/apache/servicecomb-pack/pull/572#discussion_r335783472", "body": "\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u4e0d\u4f7f\u7528author \u6807\u7b7e\uff0c\u4ee3\u7801\u9700\u8981\u6dfb\u52a0Apache License header"}
{"iteration": 3, "tag": "no", "repo": "ehcache/ehcache3", "url": "https://github.com/ehcache/ehcache3/pull/2449#discussion_r208665985", "body": "The names of the two methods are terrible. What do you propose?"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/27726#discussion_r173223825", "body": "Ping, any chance someone would be able to take a look at this one?"}
{"iteration": 3, "tag": "no", "repo": "EOSIO/eosio-java", "url": "https://github.com/EOSIO/eosio-java/pull/9#discussion_r268893597", "body": "Yep like we chatted about on Telegram"}
{"iteration": 3, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/18243#discussion_r1521907892", "body": "The full name may be moved to where the acronym was first used, e.g. \"CLDR\": the Unicode Common Locale Data Repository (CLDR) is a provider based on Unicode Consortium's <a href=\"http://cldr.unicode.org/\">CLDR Project</a>. If you decide to do that, then we may use it here to state: The JDK uses CLDR to implement locale-sensitive APIs in the java.util and java.text packages.\r\n"}
{"iteration": 3, "tag": "no", "repo": "GoogleCloudPlatform/java-docs-samples", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499828399", "body": "Can you also include examples of how to configure attributes like size, timeouts, and number of idle connections for the pool?"}
{"iteration": 3, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/3686#discussion_r929586062", "body": "In order to be compliant with the other signature comments you can add variable names, not only types.\r\n\r\nBasically the signature for `isFrozen` is `isFrozen(address,address)` but to have more context about the function and parameters we also have added parameter names like `from`, `to`, `tokenId`, `value` to have better understanding about the function. These parameter names, however, are not part of the signature itself and are not used to calculate the function selector."}
{"iteration": 3, "tag": "no", "repo": "radixdlt/olympia-node", "url": "https://github.com/radixdlt/olympia-node/pull/491#discussion_r706010916", "body": "It is more about having small methods that tell what they are supposed to do very quickly from a high level perspective. Breaking it in smaller blocks that can be extracted to methods that describe what they are doing with their names.  It should be a private method. I think it would be even better if java supported nested methods.\r\n\r\n```\r\npublic Stream<Pair<AID, Long>> getTxnIdsAssociatedWithAccount(REAddr addr, Long offset) {\r\n\t\tvar cursor = accountTxHistory.openCursor(null, null);\r\n\t\tvar iterator getIterator... (some descriiptive name)\r\n\t\treturn Streams.stream(iterator)\r\n\t\t\t.onClose(cursor::close);\r\n\t}\r\n```"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/689#discussion_r125283531", "body": "https://github.com/zalando/nakadi/pull/689/commits/047cb43f8f922a45c2878dd3c906a984e0d63607"}
{"iteration": 3, "tag": "broken", "repo": "google/ExoPlayer", "url": "https://github.com/google/ExoPlayer/pull/8653#discussion_r589629076", "body": "I understand what you're saying that user-intent can be inferred even in misspelled attributes. What I am suggesting is that a typo on a non-quoted string will still be ambiguous. i.e.`b` could be intended for color, position or styling. \r\nIn the example you gave, i.e. `filed blue`, my interpretation of the spec is that `auto` styling should apply. If we had an implementation that supported the color attribute, then the equivalent of `auto blue` should apply.\r\n"}
{"iteration": 3, "tag": "no", "repo": "opendistro-for-elasticsearch/k-NN", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/126#discussion_r438257930", "body": "Just curious, what happens if a invalid parameter is passed in? Does it fail gracefully?"}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/3504#discussion_r313840101", "body": "It's hard to tell without me looking at the actual Kubernetes Client code.\r\n\r\n+1 for your proposed approach. I'll take a deeper look when I get back next week"}
{"iteration": 3, "tag": "unclear", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/12386#discussion_r262207707", "body": "Does Presto or any other system enumerate hidden files?"}
{"iteration": 3, "tag": "no", "repo": "typetools/checker-framework", "url": "https://github.com/typetools/checker-framework/pull/2094#discussion_r208284131", "body": "The argument was that the two error messages use different formats, one an English abbreviation the other a mathematical function.\r\nWhy not pick one and use that consistently in both cases?"}
{"iteration": 3, "tag": "no", "repo": "apache/ignite", "url": "https://github.com/apache/ignite/pull/7941#discussion_r465686832", "body": "Is it possible?"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/1484#discussion_r1062350712", "body": "Is that your IDE?"}
{"iteration": 3, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/9664#discussion_r938031006", "body": "What is the style convention you're trying to conform to here?"}
{"iteration": 3, "tag": "no", "repo": "braintree/braintree-android-drop-in", "url": "https://github.com/braintree/braintree-android-drop-in/pull/166#discussion_r354045332", "body": "Though unlikely, it might be possible that folks rely on that naming/file for custom UI?"}
{"iteration": 3, "tag": "broken", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/794#discussion_r36800453", "body": "Is this the lever that we want? I would expect the default to be channel-wide ... no?\n"}
{"iteration": 3, "tag": "unclear", "repo": "ldtteam/minecolonies", "url": "https://github.com/ldtteam/minecolonies/pull/9373#discussion_r1327953894", "body": "By the looks, I think it is to strip off any non alphanumeric character at the end, and replace it with an exclamation mark. So maybe trying to strip off any punctuation that is already included as part of the death message?"}
{"iteration": 3, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/706#discussion_r306039232", "body": "What do you suggest, remove this comment or something else?"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/6689#discussion_r1574828976", "body": "Ja idem, het zorgt ervoor dat de native driver geburikt kan worden. Zou niet direct weten wanneer iemand dit zou willen, maar wij doen het blijkbaar voor PostgreSQL dus..."}
{"iteration": 3, "tag": "no", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/1938#discussion_r856939793", "body": "![](https://i.pinimg.com/736x/b0/61/1a/b0611ac1baf455d511802d10f2c47713.jpg)"}
{"iteration": 3, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4154#discussion_r395775952", "body": "I like that this logic is encapsulated in a private accessor method. Very clean design. "}
{"iteration": 3, "tag": "no", "repo": "Wynntils/Artemis", "url": "https://github.com/Wynntils/Artemis/pull/777#discussion_r1039030425", "body": "https://github.com/Wynntils/Artemis/pull/777/commits/8c50784ed2fd4d68dfa63aa750fd9ecd214e5352 even more elegant"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/564#discussion_r401737649", "body": "Het is wel handig om hier unit tests voor te hebben. Blijkbaar kunnen deze dingen zomaar veranderen??"}
{"iteration": 3, "tag": "yes", "repo": "undertow-io/undertow", "url": "https://github.com/undertow-io/undertow/pull/1316#discussion_r886065013", "body": "Is it OK from a security perspective to have predictable ids here? (It's only the pattern that is suspicious, not a fact I know for the case)."}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/94280#discussion_r1126460033", "body": "for engines and behavioural analytics?"}
{"iteration": 3, "tag": "no", "repo": "apache/metron", "url": "https://github.com/apache/metron/pull/1367#discussion_r270596607", "body": "Are the spaces intentional?"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/4757#discussion_r1224054804", "body": "Hoe werkt de security hierop, en hoe worden verschillende operaties afgeschermd?\r\n\r\nIk zie even niet hoe dat in elkaar zit."}
{"iteration": 3, "tag": "no", "repo": "open-telemetry/opentelemetry-java-instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/661#discussion_r454165364", "body": "This should describe the semantics, not the implementation behavior (it's obvious based on line 26). It would be more helpful if this clearly described what it's configuring, I guess `Configuration for the tracing instrumentation of HTTP clients.`"}
{"iteration": 3, "tag": "no", "repo": "debezium/debezium", "url": "https://github.com/debezium/debezium/pull/1948#discussion_r522952092", "body": "I know. A PostgreSQL committer was my professor at university. Still, we tend to use Postgres in most places."}
{"iteration": 3, "tag": "no", "repo": "mozilla-mobile/FirefoxLite", "url": "https://github.com/mozilla-mobile/FirefoxLite/pull/1290#discussion_r161158168", "body": "What if we request multiple permission and only index 0 one is granted?"}
{"iteration": 3, "tag": "no", "repo": "ehcache/ehcache3", "url": "https://github.com/ehcache/ehcache3/pull/1078#discussion_r64588680", "body": "Javadoc is missing.\n"}
{"iteration": 3, "tag": "no", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466295492", "body": "Great! Having in memory data to control which transaction was sent to which node, is something that can be easily removed. Everything we keep in memory could generate a friction with other states (in this pull request, with TransactionPoolImpl logic)"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/6407#discussion_r1556024673", "body": "Omdat de SessionBuilder niet altijd als argumenten de username en password mee krijgt, maar die ook als setters gezet kunnen worden.\r\nHet is inderdaad een beetje geknutsel ja \ud83d\ude22 "}
{"iteration": 3, "tag": "broken", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/4335#discussion_r42822252", "body": "What are your reservations? Are you concerned about exposing the socket functionality?\n"}
{"iteration": 3, "tag": "no", "repo": "apache/cassandra", "url": "https://github.com/apache/cassandra/pull/3274#discussion_r1603046868", "body": "Whoops!"}
{"iteration": 3, "tag": "broken", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/36504#discussion_r1361109731", "body": "@sberyozkin there is one more thing, more technical that I didn't want to mention as I hoped to convince you with above-mentioned arguments - currently you can't really combine security checks, so making it authenticated means no roles-allowed or denyall (in which case the identity will determine 401 or 403). however I can probably come with some trick to workaround that if necessary."}
{"iteration": 3, "tag": "no", "repo": "OpenClinica/OpenClinica", "url": "https://github.com/OpenClinica/OpenClinica/pull/2586#discussion_r363859771", "body": "https://github.com/OpenClinica/OpenClinica/pull/2586/commits/5826feb7aaf1f5155ee5dced843e0e44983ceeec"}
{"iteration": 3, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/20677#discussion_r1447987711", "body": "Yer ... Making such a critical change automatically is not a good thing. An additional step should at least help users to identify some weird behavior if they are (and perhaps most of the time) authenticating using a same account at the IdP.\r\n\r\nTogether with the recent events that were added by you, you can build a more robust notification system when this happens.\r\n\r\nSo yeah, I would vote for introducing this additional step."}
{"iteration": 3, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/13035#discussion_r320376997", "body": "The preference is to use mixed case for acronyms, e.g. XxxMleYyy vs. XxxMLEYyy:\r\n\r\nhttps://stackoverflow.com/questions/2236807/java-naming-convention-with-acronyms"}
{"iteration": 3, "tag": "no", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/522#discussion_r94242921", "body": "https://github.com/zalando/nakadi/pull/522/commits/f4f0ca4ece0b1733e6d5da00cf35c4d9556f3ad9"}
{"iteration": 3, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/1387#discussion_r586075555", "body": "summary of offline discussion:\r\n- Deprecate all methods in multi/partitioned builders that are specific to individual client config\r\n- Users can use the \u201cclient configurator\u201d method to customize options for each client.\r\n- Adjust/simplify client builder hierarchy as required (e.g. we may not be able to extend the same classes).\r\n- Remove Deprecated methods in followup release"}
{"iteration": 3, "tag": "no", "repo": "thelastpickle/cassandra-reaper", "url": "https://github.com/thelastpickle/cassandra-reaper/pull/1403#discussion_r1342697520", "body": "I tried to untangle them but failed so far, it's a fairly involved change.\r\nI'd recommend to create a refactoring ticket to work this out.\r\nAnd I agree that we should not keep it like this over longer term. JMX and HTTP differ pretty heavily here due to the separate endpoints for operations and metrics in the management api. It requires some time and thought to review the concept of MetricsProxy here."}
{"iteration": 3, "tag": "no", "repo": "pmd/pmd", "url": "https://github.com/pmd/pmd/pull/1075#discussion_r186619380", "body": "And this is effectively a bug. I actually intended for the same Java process to be able to run PMD over and over and benchmark each run, but as you correctly detected this would break."}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/6189#discussion_r1478401843", "body": "Ja, maar in deze situatie is dat een beetje overkill. Dit is de unit test die je alleen met de hand draait lokaal, om te valideren tegen een echte SFTP-server. Daarna sluit de hele JVM zich af. "}
{"iteration": 3, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/5759#discussion_r1146067464", "body": "Wow, ok, that's a great catch\r\n\r\nLet me try to summarize what the issue was and see if I got it right:\r\n* We receive a couple of hollow finalization transactions for the same account at the same time\r\n* During pre-handle, they all (or at least 2 of them) set a `PendingCompletion` in the txn accessor for the hollow account\r\n* The first transaction that gets handled finalizes the account\r\n* The subsequent transaction(s) that have a `PendingCompletion` see that the hollow account has changed since pre-handle via the `linkedRefs`, so they perform a `Rationalization`. In there, we re-do all the signature checks, the `HollowScreening` does nothing, since the hollow account will have a valid `JECDSA...Key `now. **However, we do not clear the pending completions set during pre-handle. Therefore, even if they are no longer valid, `HollowAccountFinalziationLogic` will still execute them.**\r\n\r\nAnd the `hollowAccountOccursFinalizationOnlyOnceWhenMultipleFinalizationTensComeInAtTheSameTime` E2E (whose name I really managed to butcher, btw :smile: ) wasn't running into this scenario all the time, since the subsequent transactions may have reached preHandle only after the first transaction was handled, thus not setting any pending completions at all in the first place\r\n\r\nDoes that track?"}
{"iteration": 3, "tag": "no", "repo": "vividus-framework/vividus", "url": "https://github.com/vividus-framework/vividus/pull/2333#discussion_r775769133", "body": "yes, we need for better transparency"}
{"iteration": 3, "tag": "no", "repo": "eclipse-jdtls/eclipse.jdt.ls", "url": "https://github.com/eclipse-jdtls/eclipse.jdt.ls/pull/262#discussion_r124124971", "body": "Copyright (c) 2017 Microsoft Corporation"}
{"iteration": 3, "tag": "no", "repo": "spring-projects/spring-data-couchbase", "url": "https://github.com/spring-projects/spring-data-couchbase/pull/1618#discussion_r1048853053", "body": "Stripping the quotes is not sufficient if the JSON string has escape sequences. More robust approach is:\r\n\r\n    s = objectMapper.readValue(s, String.class)"}
{"iteration": 3, "tag": "broken", "repo": "realm/realm-java", "url": "https://github.com/realm/realm-java/pull/1316#discussion_r35391666", "body": "Any security risk to expose the TOKEN? I assume it is fine. Someone could use it to inject wrong data?\n"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/4292#discussion_r1064645359", "body": "Dit mag op een regel blijven"}
{"iteration": 3, "tag": "language", "repo": "oskardudycz/EventSourcing.JVM", "url": "https://github.com/oskardudycz/EventSourcing.JVM/pull/1#discussion_r832130071", "body": "Zamiast zwyk\u0142ego ResponseEntity mo\u017cna u\u017cy\u0107 WebFluxa, aby umo\u017cliwi\u0107 asynchroniczne requesty - dotyczy wszystkich endpoint\u00f3w"}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/1301#discussion_r263992614", "body": "I'll give this a go to ensure that it can be implemented without too much trouble but I think there is another problem that will arise if we don't have the extra bytecode recorder. \r\nSince we won't be able to capture arguments, we won't be able to support use cases like Aesh, were the user can write multiple commands and it would be our job to feed Aesh with the class names.\r\n\r\nSo in a non Aesh use case, yes there can only be one entry point (that makes absolute sense since it would be the equivalent of a main method) and no bytecode recorder is needed, but if we want to bring Aesh into the mix, not having one will probably be a problem. \r\nWDYT?"}
{"iteration": 3, "tag": "no", "repo": "tony-framework/TonY", "url": "https://github.com/tony-framework/TonY/pull/62#discussion_r229911430", "body": "Fixed: https://github.com/linkedin/TonY/pull/62/commits/3c82d8a3ef4c31f9d8c671e734d4b1853fbb1b2a"}
{"iteration": 3, "tag": "unclear", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/3966#discussion_r299332471", "body": "This should be under the lock too?"}
{"iteration": 3, "tag": "yes", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/8673#discussion_r812804733", "body": "The reason for this is that the message of the exception contains details about the position (topic, partition, offset). It is my understanding that this is the kind of detail we want to hide from users for security reasons, cc @vvcephei "}
{"iteration": 3, "tag": "no", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/664#discussion_r104384090", "body": "What is the magic here?"}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/18181#discussion_r659534277", "body": "Why these spaces?"}
{"iteration": 3, "tag": "yes", "repo": "hibernate/hibernate-search", "url": "https://github.com/hibernate/hibernate-search/pull/2151#discussion_r346452118", "body": "We could write the JSON as a string in this specific case, but users will, in most cases, want to generate the JSON dynamically, and then concatenating strings opens the door to injection vulnerabilities. Which is why I didn't want to give an example that would give the impression that using strings is a good idea.\r\n\r\nAnd yes, I agree it's still not very readable even with the utility method. It'll have to do; it's an advanced feature, after all."}
{"iteration": 3, "tag": "no", "repo": "braintree/braintree_android", "url": "https://github.com/braintree/braintree_android/pull/711#discussion_r1151030244", "body": "> I wonder if there are details that can be included in this message that would allow us to pinpoint problematic banks and escalate them to Cardinal\r\n\r\nMerchants may be in the best position to report the root cause to support. We could technically dig into the `ThreeDSecureResult` for more info but I wouldn't know where to start."}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/10146#discussion_r443978781", "body": "How is this being shutdown then? By the shutdown hook?"}
{"iteration": 3, "tag": "no", "repo": "opentracing/opentracing-java", "url": "https://github.com/opentracing/opentracing-java/pull/174#discussion_r138016330", "body": "A more meaningful message would be good"}
{"iteration": 3, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/2199#discussion_r145403415", "body": "Do you really think that it is required to read the file? Backwards compatibility could also be realized by adding a filter query like fq=dateField:[* TO lastEndDate]. The user only had to specify the value of lastEndDate e. g. to an property of the processor."}
{"iteration": 3, "tag": "yes", "repo": "triplea-game/triplea", "url": "https://github.com/triplea-game/triplea/pull/4888#discussion_r292649059", "body": "I'm wondering: Is there any chance this code might be vulnerable to a timing attack?\r\nIn other words: Is user data always being hashed before being compared in memory or against the Database or something?\r\nI haven't really looked into the algorithm of yours in-depth, so both might be possible."}
{"iteration": 3, "tag": "no", "repo": "open-telemetry/opentelemetry-java-instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489262117", "body": "Yeah, unfortunately it's not an SPI - but it's still a nice, single responsibility interface for context data injection."}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/18181#discussion_r659534384", "body": "Why these spaces?"}
{"iteration": 3, "tag": "unclear", "repo": "eclipse-californium/californium", "url": "https://github.com/eclipse-californium/californium/pull/148#discussion_r89748653", "body": "I am asking because the term is also used by Thomas Fossati's draft for introducing a *CID* (connection ID) as part of a Hello Extension for DTLS to identify *security associations* independently from the transport. So, why do you want to propagate this Netty property up the layers?"}
{"iteration": 3, "tag": "no", "repo": "docker-java/docker-java", "url": "https://github.com/docker-java/docker-java/pull/1018#discussion_r194817554", "body": "I mean checkstyle, why do you need disable it?"}
{"iteration": 3, "tag": "no", "repo": "opentripplanner/OpenTripPlanner", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/1831#discussion_r27458388", "body": "Did you intentionally add these paragraph tags or is this done by your IDE?\n"}
{"iteration": 3, "tag": "no", "repo": "firebase/firebase-android-sdk", "url": "https://github.com/firebase/firebase-android-sdk/pull/1214#discussion_r376103040", "body": "Did you write this from scratch just for this use case?\r\n\r\nWhy not just use Collections.unmodifiableList directly and call it good enough?"}
{"iteration": 3, "tag": "no", "repo": "open-telemetry/opentelemetry-java-instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/3738#discussion_r683865881", "body": "I'll review the two implementations to see if it's possible that either will return `null`, if not I can change the annotation.  Is it still worth having the defensive check even if the interface states that it shouldn't be `null`?  I hate the idea of a bug in instrumentation leading to errors at runtime."}
{"iteration": 3, "tag": "no", "repo": "eclipse-jdtls/eclipse.jdt.ls", "url": "https://github.com/eclipse-jdtls/eclipse.jdt.ls/pull/262#discussion_r124124518", "body": "Copyright (c) 2017 Microsoft Corporation"}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/1666#discussion_r268833466", "body": "Oops, this was from some old code I had lying around"}
{"iteration": 3, "tag": "language", "repo": "oskardudycz/EventSourcing.JVM", "url": "https://github.com/oskardudycz/EventSourcing.JVM/pull/1#discussion_r832147330", "body": "Wyj\u0105tek powinien by\u0107 wyrzucony do g\u00f3ry lub zalogowany b\u0142\u0105d za pomoc\u0105 loggera z informacj\u0105 z b\u0142\u0119dem rzucon\u0105 przez wyj\u0105tek. Podczas wyst\u0105pienia b\u0142\u0119du, nie b\u0119dzie wiadomo, sk\u0105d on si\u0119 wzi\u0105\u0142."}
{"iteration": 3, "tag": "no", "repo": "salesforce/reactive-grpc", "url": "https://github.com/salesforce/reactive-grpc/pull/140#discussion_r256917561", "body": "Why was this guard deleted?"}
{"iteration": 3, "tag": "yes", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/2732#discussion_r199648378", "body": "I don't think we should be storing that for security reasons. (See my comment in the issue.)"}
{"iteration": 3, "tag": "no", "repo": "syncthing/syncthing-android", "url": "https://github.com/syncthing/syncthing-android/pull/446#discussion_r37588613", "body": "As the first answer on that stackoverflow question says, why do you even need the real path? I'd much prefer to avoid this hack. For the filename, have you checked if that is passed in the intent?\n"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/54946#discussion_r406309325", "body": "I wanted to leave a reminder somewhere. @jpountz and @jimczi had a number of optimisations in mind and I felt the first iteration would be to have a test framework that shows we do the same thing as keyword field. If we get that foundation in place we can iterate on optimisations knowing we haven't introduced any false negatives in the acceleration logic."}
{"iteration": 3, "tag": "broken", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/1954#discussion_r1094693078", "body": "## Container contents are never accessed\n\nThe contents of this container are never accessed.\n\n[Show more details](https://github.com/rsksmart/rskj/security/code-scanning/1395)"}
{"iteration": 3, "tag": "no", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/3119#discussion_r751667100", "body": "was this cache used when reading the stream data to replicate?"}
{"iteration": 3, "tag": "yes", "repo": "microsoft/ApplicationInsights-Java", "url": "https://github.com/microsoft/ApplicationInsights-Java/pull/817#discussion_r260119418", "body": "Why do we want to have fragment in the URL, assuming it is removed by the client/browser? (security consideration I guess?)"}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2024#discussion_r906866303", "body": "To nie tak dzia\u0142a, takie rzeczy zgodnie ze sztuk\u0105 powinny byc package-private - nie bez powodu wszystkie completery nie bez powodu s\u0105 aktualnie package-private"}
{"iteration": 3, "tag": "yes", "repo": "geoserver/geoserver", "url": "https://github.com/geoserver/geoserver/pull/7459#discussion_r1519446444", "body": "Thinking out loud here... what if the resource store is externalized in a database?\r\nA data directory should be there anyways, at least the JDBC configuration files are in it, right? So there is a risk of losing configuration on upgrade if not externalized. Is it still a security risk though?"}
{"iteration": 3, "tag": "no", "repo": "microsoft/ApplicationInsights-Java", "url": "https://github.com/microsoft/ApplicationInsights-Java/pull/901#discussion_r272349678", "body": "Why would we want to log?"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/5169#discussion_r1283147239", "body": "Misschien dat de setup overzichtelijker wordt als de hele server-configuratie in een aparte method wordt gedaan?"}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/7739#discussion_r390896677", "body": "The question is, where is this symbolic link being created, in practical terms?"}
{"iteration": 3, "tag": "no", "repo": "SpongePowered/Sponge", "url": "https://github.com/SpongePowered/Sponge/pull/387#discussion_r52106917", "body": "Do you want to save a few bytes of memory or why?\n"}
{"iteration": 3, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/4368#discussion_r289717835", "body": "Don\u2019t assume that a non-native speaker will understand a non-technical abbreviation\r\nwhose meaning is obvious to you. Some abbreviations are puzzling to translators as well.\r\n\r\nFor example, a.k.a. or AKA."}
{"iteration": 3, "tag": "no", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/2277#discussion_r724914524", "body": "Is this still used anywhere?"}
{"iteration": 3, "tag": "no", "repo": "realm/realm-java", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521171517", "body": "Are there test for imports through UUID?"}
{"iteration": 3, "tag": "no", "repo": "ballerina-platform/module-ballerina-sql", "url": "https://github.com/ballerina-platform/module-ballerina-sql/pull/329#discussion_r682788814", "body": "updated in https://github.com/ballerina-platform/module-ballerina-sql/pull/329/commits/a9672342ef5a9e6f5cb444d1738ff02feef171c4"}
{"iteration": 3, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/15342#discussion_r695340004", "body": "Hi, I'm not understanding exactly what is the problem in this point, could you clarify a little bit more? Thanks"}
{"iteration": 3, "tag": "no", "repo": "soot-oss/SootUp", "url": "https://github.com/soot-oss/SootUp/pull/350#discussion_r653564077", "body": "#386"}
{"iteration": 3, "tag": "yes", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/93540#discussion_r1099946489", "body": "I think mirroring the index privileges (i.e., including `all`) is clearer, and as you point out there are no security concerns here per se.\r\n\r\nOne thing this raises for me is whether we should (in the future) consider downgrading received privileges on the fulfilling cluster (e.g., `all` maps to `read`, `read_cross_cluster`) to more explicitly enforce the expectation that remote users only ever have read-access. Admins might get lazy and use a remote access API key that has `all`. \r\n\r\nThis _should_ be unnecessary and may be overly complex, but it also seems like a good idea to explicitly enforce security assumptions. Certainly not for this PR, and not for now, just jotting this down as a thought.   "}
{"iteration": 3, "tag": "no", "repo": "oVirt/ovirt-engine", "url": "https://github.com/oVirt/ovirt-engine/pull/293#discussion_r854384550", "body": "is the calculation really so difficult?"}
{"iteration": 3, "tag": "no", "repo": "census-instrumentation/opencensus-java", "url": "https://github.com/census-instrumentation/opencensus-java/pull/1371#discussion_r211440499", "body": "PS you can drop-in with some existing stuff by re-using \"traceId\" and \"spanId\" at the risk of clash. For example, I don't know how exactly it would work if someone wanted brave and census with same logging config where brave uses \"traceId\" and here \"openCensusTraceId\" yet both have literally the same value. That said, many libraries use different names ex sleuth uses the same config keys as B3 header names for legacy reasons (eventhough people can and do override that)"}
{"iteration": 3, "tag": "no", "repo": "resteasy/resteasy", "url": "https://github.com/resteasy/resteasy/pull/1062#discussion_r99639895", "body": "Just to be sure we're not missing anything here, is the scenario you fixed in SynchronousDispatcher the only one in which calling contextualData.push(..) instead of contextualData.setLast(..) makes any difference? Just want to be sure we're not introducing a bug in other scenarios (as one would probably have to call pop)."}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2452#discussion_r1249760461", "body": "Nie rozumiem ci\u0119 troch\u0119. Chodzi o to \u017ce dodatkowy enum stworzy\u0107 o nazwie DatabaseType?"}
{"iteration": 3, "tag": "broken", "repo": "apache/apex-malhar", "url": "https://github.com/apache/apex-malhar/pull/262#discussion_r63789206", "body": "Javadoc missing\n"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/6689#discussion_r1574562073", "body": "Geen MongoDB support hier? Dan moet die misschien ook weg uit de lijst van prefixes die we ondersteunen?"}
{"iteration": 3, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/85380#discussion_r848142503", "body": "Yes I think you're right, I tidied this up in f9df3b96af498949661e235e5b8822fdfb576a82. This comes from the code in `PublicationTransportHandler` which dates back a long way (b80324db084bd42bcb36457286157e3c26ae435d and beyond) and has accumulated a bunch of cruft over the years."}
{"iteration": 3, "tag": "no", "repo": "ukanth/afwall", "url": "https://github.com/ukanth/afwall/pull/1349#discussion_r1569149129", "body": "Fixed in [c75f211](https://github.com/ukanth/afwall/pull/1349/commits/c75f211c905f0799a859cd56eebe890c6a53b236) hopefully, lemme know if I did it wrong."}
{"iteration": 3, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/39878#discussion_r1555406048", "body": "Stupid IDE..."}
{"iteration": 3, "tag": "no", "repo": "discord-jda/JDA", "url": "https://github.com/discord-jda/JDA/pull/676#discussion_r184876250", "body": "is it actually a html link?"}
{"iteration": 3, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/3240#discussion_r881360635", "body": "Dit is er niet duidelijker van geworden. Wat was hier fout aan de originele tekst?"}
{"iteration": 3, "tag": "broken", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/663#discussion_r24509954", "body": "Can you link lfu to a Wikipedia page or something? Would be nice for new developers\n"}
{"iteration": 3, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/660#discussion_r153604089", "body": "No, ale og\u00f3\u0142em, na pewno jeszcze w tym tygodniu b\u0119d\u0119 mia\u0142 co\u015b do naprawy, to wtedy si\u0119 to wszystko o czym piszesz powprowadza"}
{"iteration": 4, "tag": "no", "repo": "ClickHouse/clickhouse-kafka-connect", "url": "https://github.com/ClickHouse/clickhouse-kafka-connect/pull/223#discussion_r1378435739", "body": "It doesn't have \"declared\" exceptions but in theory it could throw a RuntimeException - things like misconfigured producer settings, for instance. We could wrap it in a try/catch but if we attempted to insert data it would be lost at that point - it seems like the safer option is to allow the failure to bubble up..."}
{"iteration": 4, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/23293#discussion_r1332098807", "body": "It surely can add the value. But during creation not during updates. Making sure this attribute is only set during creation solves your problem, right?\r\n\r\nEDIT: I'll need to also check if there is a (security) reason for only allowing setting the creation date via import."}
{"iteration": 4, "tag": "yes", "repo": "microsoft/azure-tools-for-java", "url": "https://github.com/microsoft/azure-tools-for-java/pull/5163#discussion_r620947528", "body": "these lines only care if the message contains IP or not.\r\nauthenication is verified only if IP is set in firewall rules."}
{"iteration": 4, "tag": "broken", "repo": "Catrobat/Catroid", "url": "https://github.com/Catrobat/Catroid/pull/3393#discussion_r349866425", "body": "```suggestion\r\n\t\ttriggerTouchUpEvent(muchLaterTimestamp);\r\n```\r\nIs this really \"invalid\", i.e., can never happen in real life? See my comments about mouse pointers instead of fingers above."}
{"iteration": 4, "tag": "no", "repo": "vaticle/typedb", "url": "https://github.com/vaticle/typedb/pull/1844#discussion_r125925739", "body": "I'm gonna dump my thoughts about this thing here:\r\n\r\nIdeally I'd suggest making sure these cast methods are always safe. If you want to perform a potentially-unsafe cast then you should do it with a manual cast.\r\n\r\nWe can make them safe if we remove the generic and we only put them in places where we know there is just one valid implementation. For example `ResourceImpl.from(Resource)`, `ConceptVertex.from(Concept)` etc."}
{"iteration": 4, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/4418#discussion_r165164480", "body": "There are other benefits besides reducing the pointer size.  When you use array indices rather than pointers, the garbage collector needs to do less work chasing pointers.  See https://issues.apache.org/jira/secure/attachment/12701400/BlocksMap%20redesign.pdf .\r\n\r\nExcerpt:\r\n\r\n> According to an Oracle engineer, large heaps with reference dense objects in old gen with frequently mutating references is brutally hard on GC.When a reference in an old gen object is mutated, the object\u2019s \u201ccard page\u201d is marked as dirty. During young gen collection all references in dirty old gen card pages are used as roots for determining reachability of young gen objects.\r\n>\r\n> The [HDFS] block data-structure mutates by necessity, but it does so in a non-GC friendly manner. Report processing inserts a delimiter into the storage\u2019s doubly linked list, moves reported blocks to the head of the storage\u2019s list, then uses the delimiter to determine excess blocks for invalidation. The updating of so many references creates intense pressure on GC.\r\n>\r\n> One reason is young gen maintains a tenuring threshold equating to how conservatively it will promote young gen objects into old gen. The threshold drops relative to the rate of garbage creation and dirtying of old gen cards. The young collector may resort to prematurely promoting objects into old gen when it becomes overrun by spending too much time collecting. CMS is forced to cleanup when the old gen occupancy threshold is exceeded. The prematurely promoted objects lead to excessive fragmentation of old gen.\r\n>\r\n> We can reduce abusive GC behavior by reducing the mutation of references in old gen.\r\nUnlike references, updating primitives (ints, longs, etc) does not mark an old gen page dirty.  It does not incur a penalty to young gen collection.\r\n```"}
{"iteration": 4, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/864#discussion_r67865893", "body": "It would only be a vulnerability if it failed open for some reason. We still are going to default to system-high markings if something comes into the system without any markings. It could still blow up the heap though, which is a problem.\n"}
{"iteration": 4, "tag": "no", "repo": "apache/shardingsphere", "url": "https://github.com/apache/shardingsphere/pull/13180#discussion_r735254594", "body": "In this scenario, I think `null` may be more appropriate. If it has a default value, the configuration may be troublesome in some special scenarios. For example, the default value is `true`, but we want to configure all tables not to be queried through encrypted columns. . I think the global configuration can have a default value, but this field of the single table can be empty, what do you think?"}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-core", "url": "https://github.com/openhab/openhab-core/pull/3298#discussion_r1060709890", "body": "Yes, it does, but to be honest, I don't want to commit something that is shown red in my IDE ;-)"}
{"iteration": 4, "tag": "no", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/7695#discussion_r817160124", "body": "I think we want to avoid this (worst case) quadratic runtime here, again anticipating very large sample sets."}
{"iteration": 4, "tag": "no", "repo": "apache/drill", "url": "https://github.com/apache/drill/pull/774#discussion_r146134207", "body": "That definitely should not be a warn and rather returning meaningful error to the user."}
{"iteration": 4, "tag": "unclear", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1315#discussion_r691557047", "body": "Seems like this might be something potentially used by customers currently. Unless we're explicitly not allowing  SAS token regeneration anymore?\r\n\r\nWhat is the benefit of removing this constructor?"}
{"iteration": 4, "tag": "no", "repo": "cloudevents/sdk-java", "url": "https://github.com/cloudevents/sdk-java/pull/352#discussion_r589590389", "body": "I did think abut that, my concern was really from an efficiency standpoint to avoid copying values around when potentially the SDK is being used in the context of a router where maybe there's just a need to access the 'type' (for example) to select a transport/endpoint to send it to.\r\n\r\nIf the preferred model is to always clone the values I can certainly change to that for now to get stuff going but it might be worth doing some profiling to see if an optimization might be appropriate in the future. "}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/17208#discussion_r951117723", "body": "code\u5206\u6790\u4f1a\u4e0d\u8fc7....."}
{"iteration": 4, "tag": "broken", "repo": "spring-projects/spring-integration", "url": "https://github.com/spring-projects/spring-integration/pull/898#discussion_r6698519", "body": "@artembilan Maybe I am paranoid - but I wanted that the test cannot be derailed by an unclean state in Redis. Unfortunately, the key currently used in the Redis store us not very unique, the adapter's ID is not used right now (the inner_bean issue pointed out earlier).\n\nAlso, in case an exception is thrown, or some other Twitter adapter created that same key in Redis, I opted to reset the key upon startup and also do cleanup at the end of the test.\n\nWhile doing the reset I also discovered that users currently cannot reset the MetaDataStore by removing the key from redis (null values are ignored). This by itself may qualify for a Jira ticket. I wonder in that regard whether we also should expose means to reset a metadata store, e.g. through JMX. What do you think? \n"}
{"iteration": 4, "tag": "unclear", "repo": "apache/logging-log4j2", "url": "https://github.com/apache/logging-log4j2/pull/2015#discussion_r1409054243", "body": "This is not possible due to `IllegalAccessException` I shared above."}
{"iteration": 4, "tag": "no", "repo": "apache/incubator-uniffle", "url": "https://github.com/apache/incubator-uniffle/pull/1605#discussion_r1541709996", "body": "Or I can just log an error message if you prefer. "}
{"iteration": 4, "tag": "bot", "repo": "h2database/h2database", "url": "https://github.com/h2database/h2database/pull/3634#discussion_r979460603", "body": "*[ReferenceEquality](https://errorprone.info/bugpattern/ReferenceEquality):*  Comparison using reference equality instead of value equality\n\n---\n\n\n```suggestion\n                        if (left.equals(right)\n```\n\n\n\n---\n\n<details><summary><b>\u2139\ufe0f Learn about @sonatype-lift commands</b></summary>\n\nYou can reply with the following commands. For example, reply with ***@sonatype-lift ignoreall*** to leave out all findings.\n| **Command** | **Usage** |\n| ------------- | ------------- |\n| `@sonatype-lift ignore` | Leave out the above finding from this PR |\n| `@sonatype-lift ignoreall` | Leave out all the existing findings from this PR |\n| `@sonatype-lift exclude <file\\|issue\\|path\\|tool>` | Exclude specified `file\\|issue\\|path\\|tool` from Lift findings by updating your config.toml file |\n\n**Note:** When talking to LiftBot, you need to **refresh** the page to see its response.\n<sub>[Click here](https://github.com/apps/sonatype-lift/installations/new) to add LiftBot to another repo.</sub></details>\n\n\n\n---\n\nWas this a good recommendation?\n[ [\ud83d\ude41 Not relevant](https://www.sonatype.com/lift-comment-rating?comment=337503971&lift_comment_rating=1) ] - [ [\ud83d\ude15 Won't fix](https://www.sonatype.com/lift-comment-rating?comment=337503971&lift_comment_rating=2) ] - [ [\ud83d\ude11 Not critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=337503971&lift_comment_rating=3) ] - [ [\ud83d\ude42 Critical, will fix](https://www.sonatype.com/lift-comment-rating?comment=337503971&lift_comment_rating=4) ] - [ [\ud83d\ude0a Critical, fixing now](https://www.sonatype.com/lift-comment-rating?comment=337503971&lift_comment_rating=5) ]"}
{"iteration": 4, "tag": "broken", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/507#discussion_r59507823", "body": "I see no reason why somebody would want to disable the cache. Or tune it. I think just selecting a good value is the best option. The balance is here between the number of unique accept-encoding header variants used in the real world (my guess is that that is < 30) and not having a memory leak exploitable for malicious entities.\nIf the cache overflows and resets (which is the current strategy), then we just spend a bit more CPU doing the next few requests parsing the headers but no difference in functionality is seen outside of this function,\n"}
{"iteration": 4, "tag": "broken", "repo": "google/nomulus", "url": "https://github.com/google/nomulus/pull/2211#discussion_r1383856575", "body": "## Failure to use secure cookies\n\nCookie is added to response without the 'secure' flag being set.\n\n[Show more details](https://github.com/google/nomulus/security/code-scanning/1597)"}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/22466#discussion_r1125996423", "body": "\u5e38\u91cf\u62ff\u51fa\u53bb"}
{"iteration": 4, "tag": "broken", "repo": "Consensys/web3signer", "url": "https://github.com/Consensys/web3signer/pull/850#discussion_r1271745542", "body": "## Hard-coded credential in API call\n\nHard-coded value flows to [sensitive API call](1).\n\n[Show more details](https://github.com/Consensys/web3signer/security/code-scanning/122)"}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/6814#discussion_r390588592", "body": "Shouldn't this be considered a configuration error instead of a communication error?"}
{"iteration": 4, "tag": "unclear", "repo": "zxing/zxing", "url": "https://github.com/zxing/zxing/pull/1367#discussion_r589893495", "body": "OK more specifically - there are no 'bytes' encoded in anything but byte mode. There are streams of bits, but I don't see much use case in returning them. Their representation is entirely specific to the QR code, not any user payload. Any use of these modes to encode arbitrary bytes would be wrong. So if you're putting raw compressed bytes into the QR code without using byte mode, that's the problem."}
{"iteration": 4, "tag": "no", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/8957#discussion_r269245613", "body": "@njhill I am a bit concerned about the performance impact of this as it would basically be an static synchronized and so all pipelines would act on it :/ I wonder if we maybe just want to allow the user to enable the `Sharable` check via a system property and have it disabled by default. Once the user has tested its handlers in development it should not need to have the check anymore anyway in prod. /cc @rkapsi "}
{"iteration": 4, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/5851#discussion_r903836182", "body": "Caused [SECURITY-2761](https://www.jenkins.io/security/advisory/2022-06-22/#SECURITY-2781)"}
{"iteration": 4, "tag": "language", "repo": "hs-web/hsweb-framework", "url": "https://github.com/hs-web/hsweb-framework/pull/278#discussion_r1535245609", "body": "\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 isNormal?"}
{"iteration": 4, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4369#discussion_r363529826", "body": "I don't know. It seems like this allows someone to open a socket and just stream data through and back, which seems to be worse than just hitting the login page. Maybe it should just send back an abbreviated or limited length message. The first 10 characters or something."}
{"iteration": 4, "tag": "no", "repo": "wso2/carbon-identity-framework", "url": "https://github.com/wso2/carbon-identity-framework/pull/5361#discussion_r1475833560", "body": "Since we use UUIDs as application id at the moment, and UUIDs have only URL-safe characters URL encoding is not needed now,\r\nbut for safe side (incase the resource id format will change in the feature) shall we URL encode this value?"}
{"iteration": 4, "tag": "no", "repo": "pac4j/pac4j", "url": "https://github.com/pac4j/pac4j/pull/1442#discussion_r347364662", "body": "We should have started here in fact ;-)\r\n\r\nAmong all things, we won't go against the the spec for sure. Even if this trick was appealing."}
{"iteration": 4, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/26562#discussion_r796183647", "body": "Maybe users should be able to unset the retry options (make them `null`). If we don't want that, we should at least handle NPEs for such cases like this:\r\n```suggestion\r\n    if (retryOptions== null) {\r\n        throw logger.logExceptionAsError(new NullPointerException(\"'retryOptions' cannot be null.\"));\r\n    }\r\n```\r\nAnd include a `@throws` section in the method's Javadoc."}
{"iteration": 4, "tag": "yes", "repo": "dockstore/dockstore", "url": "https://github.com/dockstore/dockstore/pull/5580#discussion_r1246923961", "body": "> Think the idea was back-end at least, ideally UI in the end\r\n\r\nCool, maybe we could allow very large pagination limits, so the UI can page as appropriate, and admins can easily curl the whole blob?  Normally, that wouldn't be a good idea, but we're limiting access to admins/curators, who are not likely to attempt to DOS our server by [repeatedly] requesting large amounts of info, so it's probably ok."}
{"iteration": 4, "tag": "no", "repo": "VazkiiMods/Botania", "url": "https://github.com/VazkiiMods/Botania/pull/4327#discussion_r1197475633", "body": "It was supposed to be water (covering the vanilla glass bottle logic), but the bug report mentioned fluids in general. Which way do you prefer?"}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/17859#discussion_r969464657", "body": "\u63a8\u8350\u4f7f\u7528 CollectionUtils"}
{"iteration": 4, "tag": "no", "repo": "micrometer-metrics/micrometer", "url": "https://github.com/micrometer-metrics/micrometer/pull/1461#discussion_r319418861", "body": "I mean how many unique values for this queryName can we expect in applications that use Hibernate? I'm thinking it might be a lot and if that is the case, maybe this should be an opt-in feature that can be turned on for those that want to track query-level metrics."}
{"iteration": 4, "tag": "bot", "repo": "FISCO-BCOS/web3sdk", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/677#discussion_r449552279", "body": "__[PMD Java]__ Potential violation of Law of Demeter (static property access) ([view](https://sider.review/gh/repos/113938008/pulls/677#issue-4101211))\n\n<details>\n\n| Rule | Ruleset | Priority |\n| ---- | ------- | -------- |\n| `LawOfDemeter` | Design | 3 |\n\nReferences:\n- <https://pmd.github.io/pmd-6.24.0/pmd_rules_java_design.html#lawofdemeter>\n\nYou can [close this issue](https://sider.review/gh/repos/113938008/pulls/677#issue-4101211) if no need to fix it. [Learn more](https://help.sider.review/getting-started/working-with-issues).\n\n</details>"}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/17634#discussion_r960511129", "body": "statusObj \u662f\u5426\u9700\u8981\u5224\u65ad\u4e3a null"}
{"iteration": 4, "tag": "no", "repo": "apache/drill", "url": "https://github.com/apache/drill/pull/2655#discussion_r981705289", "body": "Yes, it would be a more reliable approach. Initially, I was looking for a way how to pass it properly, one of the options is to use the query option, but it will be tricky to set it in the place where plugins could be disabled with this feature."}
{"iteration": 4, "tag": "bot", "repo": "FISCO-BCOS/web3sdk", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/677#discussion_r449552267", "body": "__[PMD Java]__ Potential violation of Law of Demeter (static property access) ([view](https://sider.review/gh/repos/113938008/pulls/677#issue-4101204))\n\n<details>\n\n| Rule | Ruleset | Priority |\n| ---- | ------- | -------- |\n| `LawOfDemeter` | Design | 3 |\n\nReferences:\n- <https://pmd.github.io/pmd-6.24.0/pmd_rules_java_design.html#lawofdemeter>\n\nYou can [close this issue](https://sider.review/gh/repos/113938008/pulls/677#issue-4101204) if no need to fix it. [Learn more](https://help.sider.review/getting-started/working-with-issues).\n\n</details>"}
{"iteration": 4, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/4220#discussion_r250677421", "body": "\u270f\ufe0f Unused constant. This security value is read in the ctor."}
{"iteration": 4, "tag": "language", "repo": "naver/fixture-monkey", "url": "https://github.com/naver/fixture-monkey/pull/523#discussion_r1052919498", "body": "@seongahjo \ub124 \uc2e4\uc81c\ub85c\ub294 \uc9c1\uc811 \ud638\ucd9c\ud558\uc9c0\ub294 \uc54a\uc744\uac70\ub77c \uc0dd\uac01\ud558\uc9c0\ub9cc, breaking \uc774 \uc544\ub2c8\ub77c\uace0 \ud558\uae30\ub294 \uc5b4\ub824\uc6b8\uac70 \uac19\uc2b5\ub2c8\ub2e4.\r\n\uadf8\ub798\uc11c patch \ubc84\uc804\uc5d0\ub294 \ub123\uc9c0 \uc54a\ub294\uac8c \uc88b\uc744\uac70 \uac19\uc740\ub370\uc694\r\n\r\n\uc6b0\uc120\uc740 \uc774\ub807\uac8c \uac00\uace0 \uc774\ud6c4\uc5d0\ub294 \uad6c\ubd84\ud574\uc11c \uac00\uba74 \uc88b\uc744\uac70 \uac19\ub2e4\uace0 \uc0dd\uac01\ub429\ub2c8\ub2e4.\r\n\uc774\ub7ec\ud55c \ub0b4\ubd80 \uc0ac\uc6a9 \uc0dd\uc131\uc790\ub098 \uba54\uc18c\ub4dc \uac19\uc740 \uacf3\uc5d0 `@Api` \ub85c INTERNAL \uacfc \ud568\uaed8 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c\ub294 \uc124\uba85\uc744 \ubd99\uc5ec \ub193\uc73c\uba74 \uc880 \ub354 breaking \uc5d0 \ub300\ud55c \ubbfc\uac10\ub3c4\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\uc744\uac70 \uac19\uace0\uc694\r\n"}
{"iteration": 4, "tag": "no", "repo": "apache/cassandra", "url": "https://github.com/apache/cassandra/pull/2049#discussion_r1063728117", "body": "And really the List is itself a wasted allocation and indirection for the array and now I am just sad about Java."}
{"iteration": 4, "tag": "yes", "repo": "projectnessie/nessie", "url": "https://github.com/projectnessie/nessie/pull/6597#discussion_r1169000631", "body": "Not a good idea to log tokens, they may contain sensitive information."}
{"iteration": 4, "tag": "language", "repo": "sermant-io/Sermant", "url": "https://github.com/sermant-io/Sermant/pull/1384#discussion_r1426350711", "body": "\u8865\u5145\u53c2\u6570\u8bf4\u660e"}
{"iteration": 4, "tag": "language", "repo": "qiscus/qiscus-sdk-android", "url": "https://github.com/qiscus/qiscus-sdk-android/pull/3#discussion_r85770942", "body": "override method dihapus aja kalo kalo ga ada perubahan sama sekali\n"}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/3391#discussion_r177982833", "body": "Just to be sure: We can only end up here if there is something seriously wrong (i.e. it can be considered a software bug) and it is a non-recoverable situation, correct?"}
{"iteration": 4, "tag": "unclear", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/2111#discussion_r109916645", "body": "Using the HttpUrlConnection is surprisingly hard to get right. Especially when considering all the error scenarios, not leaking any resources. For that matter we have the [convention](http://www.eclipse.org/smarthome/documentation/development/bindings/dependencies.html) to use the jetty http client for HTTP communication.\r\n\r\nAdditionally, I see several potential issues here - the biggest one being that the connection is not closed in case the communication fails. "}
{"iteration": 4, "tag": "no", "repo": "dc-sics/hopsworks", "url": "https://github.com/dc-sics/hopsworks/pull/786#discussion_r152253462", "body": "Yes I will log the failed attempts."}
{"iteration": 4, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533336852", "body": "I had the same idea like @jirassimok -> but had the feeling it could mislead a user a little bit as well -> and maybe with such name it's already better to inline this method -> but there are a lot of occurrences -> goto begin.\r\n\r\nBut as long this idea came to someone else I'd vote for it. "}
{"iteration": 4, "tag": "language", "repo": "OpenEMS/openems", "url": "https://github.com/OpenEMS/openems/pull/879#discussion_r338249696", "body": "Verwende hier die `this.logError()` Methode"}
{"iteration": 4, "tag": "no", "repo": "CorfuDB/CorfuDB", "url": "https://github.com/CorfuDB/CorfuDB/pull/3594#discussion_r1212373150", "body": "My view was that the exponential backoff provides a better balance\r\nbetween faster detection times and stability. Setting the fixed interval for some environments\r\nwould result in potentially slower detection rates (where finding a failure could be done quicker) and for others might cause stability issues (where the poll on the other hand needs to be longer). This exponential backoff covers this spectrum by configuring the backoff parameters but it also sets the cap on the overall duration of the poll round. So if there are fewer errors in the systems, they are detected fast enough, if there are more failures in the system, it increases the poll round to slow down the detection rates to aid stability. "}
{"iteration": 4, "tag": "broken", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/34545#discussion_r1220106199", "body": "```suggestion\r\n * <p>The Azure Key Vault Certificates client library allows developers to securely store and manage certificates\r\n```"}
{"iteration": 4, "tag": "no", "repo": "linkedin/ambry", "url": "https://github.com/linkedin/ambry/pull/822#discussion_r155889602", "body": "represents or presents? Also, if it is false it could potentially still be encrypted, right?"}
{"iteration": 4, "tag": "no", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/3832#discussion_r746579899", "body": "This is clearly an error case related to an internal protocol error - not something we would expect on a regular basis. Therefore handling it the same as other decoding errors."}
{"iteration": 4, "tag": "no", "repo": "google/data-transfer-project", "url": "https://github.com/google/data-transfer-project/pull/308#discussion_r178620202", "body": "FYI, totally optional but if you are interested, AutoValue does builders pretty easily (see JobAuthorization for an example)"}
{"iteration": 4, "tag": "no", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/7393#discussion_r730020333", "body": "In your testing, did you find that these extra checks for whether the inputs are block-compressed and indexed added significantly to the runtime when dealing with remote files?"}
{"iteration": 4, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/13469#discussion_r530474406", "body": "I would just close the web socket and indicate a processing failure. \r\nAnother approach could be to use a JSON payload wrapping the failure like https://github.com/zalando/problem"}
{"iteration": 4, "tag": "no", "repo": "sleuthkit/autopsy", "url": "https://github.com/sleuthkit/autopsy/pull/3218#discussion_r152443261", "body": "Ingest modules should not pop up dialog boxes or do \"bubble\" notifications, since they may be running in an auto ingest job that one day will execute without a UI, perhaps even in an MS Windows service. Also, I find myself wondering if this notification method is safe to call outside of the EDT.  In any case, it looks like this artifact indexing was copied from elsewhere, perhaps even from the docs or from a sample module. Please remove the the notify code and write a story in Jira about cleaning up any other GUI code in ingest modules. "}
{"iteration": 4, "tag": "no", "repo": "molgenis/molgenis", "url": "https://github.com/molgenis/molgenis/pull/7950#discussion_r233764130", "body": "The error code should be logged as well here."}
{"iteration": 4, "tag": "unclear", "repo": "Netflix/titus-control-plane", "url": "https://github.com/Netflix/titus-control-plane/pull/657#discussion_r323003962", "body": "The downside to this is if the assume permissions are fixed and the value is still cached. If the ttl on the cache is low like 1 minute then it seems fine though."}
{"iteration": 4, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/3165#discussion_r312653893", "body": "We shouldn't be throwing checked exceptions here.  Any `IOException` should be caught internally and a better error message built.  (Though I don't think these exceptions are being thrown in this instance)\r\n\r\n```suggestion\r\n  ) {\r\n```"}
{"iteration": 4, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/7021#discussion_r301359031", "body": "Why is this an ERROR? If we receive a SHUTDOWN signal, it's just an \"eager exit\" to not create tasks IMHO. We might want to log a DEBUG though.\r\n\r\nWould also update the message:\r\n```\r\nlog.debug(\"Skipping task creation in rebalance because we are already in shutdown phase.\");\r\n```"}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/6336#discussion_r487562787", "body": "Basically - yes, it can be reduced. \r\nThe ISM8 card sends packages upon any value change within the heating system, so basically rarely. \r\nAdditionally, did I never detected any case where multiple data-points were combined within one package. Thus, the size of the package might be not bigger than 20-30 bytes. \r\nIn the moment of establishing the connection I'm sending an active request to receive all data-points. After this command the ISM sends a series of packages (based on the physical configuration). Thus I'd not like to make this just 30 bytes as this might be too small in case multiple packages are within the buffer and other hardware than mine potentially have different data-points. Therefore I'd like to go for 255 (0xFF). Would this be fine from your point of view?"}
{"iteration": 4, "tag": "no", "repo": "vanilla-music/vanilla", "url": "https://github.com/vanilla-music/vanilla/pull/923#discussion_r261866853", "body": "No: if anything, that should happen in a callback.\r\n\r\nSleeping a hardcoded amount of time will always be a source of bugs (and a horrible hack at best)."}
{"iteration": 4, "tag": "yes", "repo": "bitcoinj/bitcoinj", "url": "https://github.com/bitcoinj/bitcoinj/pull/1047#discussion_r35237570", "body": "Ah you're right; I was thinking that enhanced for loops would skip null variables. I'm assuming that the sending of the size parameter is for performance & security reasons, so I didn't want to remove it.\n"}
{"iteration": 4, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/6542#discussion_r350617087", "body": "From my experience, I don't think we can use a dynamic wait for animations. It was always a bit unstable and in cases like this it's even more problematic and even unusable. When an animations leads to element being displayed (fade in, expand menu, ...), you cannot check if the element is present as it actually is present (and visible) for the whole duration of the animation. \r\n\r\nOf course there might be some other way how to check if an animation is finished. But it be quite complicated mechanism specific for given animation and complicated usually equals unstable in case of some browsers (bear in mind we will be running tests with IE and mobile browsers as well).\r\n\r\nLuckily for us, animations take a predefined amount of time (unlike e.g. loading a page) \u2013 so there's really no harm in statically waiting for an animation.\r\n\r\nBut feel free to create a JIRA for this. We might investigate in the future how to approach animations in a different way."}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/21569#discussion_r1096903534", "body": "\u8fd9\u4e2a\u522b\u63d0"}
{"iteration": 4, "tag": "no", "repo": "FasterXML/jackson-core", "url": "https://github.com/FasterXML/jackson-core/pull/943#discussion_r1125759128", "body": "My perspective is that when someone sees a stack trace in log files, it is nice to have slightly more information on context to give Ops people bit more clue on what might be happening.\r\n\r\nBut I guess minimum level certainly is to have information on exception class itself, pointing to constraints settings. I'll see if I can add something to relevant JAva class(es) in jackson-core.\r\n"}
{"iteration": 4, "tag": "no", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/5954#discussion_r576009986", "body": "Too be more precise, I don't think we should be making a distinction between very ambiguous and slightly ambiguous URIs.   The compliance mode should simply exclude URIs that once we decode them and strip parameters it is impossible to recover exactly what the canonical segment boundaries are.\r\n\r\nFor me, the switching off that mode should be done by applications that will look at the raw getRequestURI and do their own parsing and decoding.  Note also with this change, we no longer strip intermediary parameters from the raw getRequestURI, so apps that want those can now get them.\r\n\r\n\r\n "}
{"iteration": 4, "tag": "no", "repo": "cmu-db/benchbase", "url": "https://github.com/cmu-db/benchbase/pull/379#discussion_r1383920168", "body": "Whitespace and licenses only, please revert."}
{"iteration": 4, "tag": "no", "repo": "aws-amplify/amplify-android", "url": "https://github.com/aws-amplify/amplify-android/pull/504#discussion_r428961340", "body": "Another idea is to just not do this at all, and just test if we're connected to a network (not necessarily the internet) and backoff and retry as errors come."}
{"iteration": 4, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/6061#discussion_r877812454", "body": "NiFI can be pretty chatty at startup. Do you think the error message can be aggregated and logged all at once (cause + reasons) so the user doesn't need to sift through logs to find the problem?"}
{"iteration": 4, "tag": "unclear", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/6601#discussion_r1014208328", "body": "In general, it is best to avoid including error messages as attributes. If there are specific types of exceptions that provide error codes, that could be useful. The exception stack trace should be logged as an error as @krisztina-zsihovszki noted."}
{"iteration": 4, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/29029#discussion_r1578099591", "body": "For LDAP, we can do that as attributes like this one are very likely to be managed through a mapper. For custom providers, it will depend on how they are managing the user attributes.\r\n\r\nFederated users (from custom providers) have their attributes stored in a specific table in Keycloak. I think we can handle such cases as well.\r\n\r\nWe can discuss this in a follow-up if you guys want as this PR is blocking others to go in. It is a very valid point and we need to see how to deal with custom user storages.\r\n\r\n\r\n"}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/27729#discussion_r1411732401", "body": "\u8fd9\u4e24\u884c\u662f\u4e0d\u662f\u5e94\u8be5\u6539\u6210 return fileMetadataMapper.countByExample(example) > 0;\r\n\u53ea\u67e5\u6570\u91cf\u5c31\u884c\u4e86\uff0c\u4e0d\u7528\u8fd4\u56de\u660e\u7ec6\u3002"}
{"iteration": 4, "tag": "yes", "repo": "gsantner/markor", "url": "https://github.com/gsantner/markor/pull/887#discussion_r418934052", "body": "Exactly. If somebody really wants to easy \"clear\" password, then they can write set new gibberish/password. Thats basically also what some SSD's own encryption do :smile: ."}
{"iteration": 4, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2269#discussion_r1081700249", "body": "Moge dodac taka metode do MessageService"}
{"iteration": 4, "tag": "no", "repo": "MovingBlocks/Terasology", "url": "https://github.com/MovingBlocks/Terasology/pull/2479#discussion_r78545753", "body": "I vaguely remember reading about Oculus Rift and John Carmak explaining he had to circumvent a number of standard practices to extract as much performance as he could from the display. I wonder if this is somehow related: buffering issues that are not quite yet well known in the world of monitor-based graphics. Ultimately: ok.\n"}
{"iteration": 4, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/38334#discussion_r1457925395", "body": "This logs the error twice."}
{"iteration": 4, "tag": "language", "repo": "aliyun/aliyun-oss-android-sdk", "url": "https://github.com/aliyun/aliyun-oss-android-sdk/pull/88#discussion_r162561412", "body": "\u5148\u63d0\u4f9bipv4\u7684"}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/3708#discussion_r218612350", "body": "Don't log to error it's for system wide failure only."}
{"iteration": 4, "tag": "language", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/2136#discussion_r512368415", "body": "\u4f7f\u7528\u9ed8\u8ba4\u7684"}
{"iteration": 4, "tag": "language", "repo": "dingodb/dingo", "url": "https://github.com/dingodb/dingo/pull/257#discussion_r917252457", "body": "`startTest` \u662f\u4e0d\u662f startKey? \u6ca1\u770b\u5230startTest\u7684\u5b9a\u4e49\uff0c \u53e6\u5916\u8fd9\u4e2a\u547d\u540dtest\u5f88\u5947\u602a "}
{"iteration": 4, "tag": "bot", "repo": "FISCO-BCOS/web3sdk", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/727#discussion_r545532287", "body": "__[PMD Java]__ Potential violation of Law of Demeter (static property access) ([view](https://sider.review/gh/repos/113938008/pulls/727#issue-5260210))\n\n<details>\n\n| Rule | Ruleset | Priority |\n| ---- | ------- | -------- |\n| `LawOfDemeter` | Design | 3 |\n\nReferences:\n- <https://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#lawofdemeter>\n\nYou can [close this issue](https://sider.review/gh/repos/113938008/pulls/727#issue-5260210) if no need to fix it. [Learn more](https://help.sider.review/getting-started/working-with-issues).\n\n</details>"}
{"iteration": 4, "tag": "no", "repo": "MinicraftPlus/minicraft-plus-revived", "url": "https://github.com/MinicraftPlus/minicraft-plus-revived/pull/403#discussion_r1043765363", "body": "It\u2019s because the armored obk is immune to arrows until it\u2019s armor breaks in phase 2."}
{"iteration": 4, "tag": "no", "repo": "Consensys/web3signer", "url": "https://github.com/Consensys/web3signer/pull/133#discussion_r458485585", "body": "Throwing is also going to cause this to be logged with an error. I don't think we need to log this as well."}
{"iteration": 4, "tag": "unclear", "repo": "eclipse-hono/hono", "url": "https://github.com/eclipse-hono/hono/pull/1373#discussion_r305357169", "body": "I think this is still not correct. The user can indicate that the insecure server should be started by doing any or both of the following:\r\n* set *insecurePortEnabled* to `true`\r\n* set *insecurePort* to a value other than `Constants.PORT_UNCONFIGURED`\r\n\r\nIf only *insecurePortEnabled* is set to `true` but no specific port is set, then the default insecure port is used.\r\nIMHO this means for the HealthCheckServer, assuming that the secure server has started successfully:\r\nonly start the insecure server\r\n* if *insecurePortEnabled* is set to `true` and *config.getInsecurePort(DEFAULT_PORT)* is different from *server.actualPort()*, or\r\n* if *insecurePort* is not `Constants.PORT_UNDEFINED` and *config.getInsecurePort()* is different from *server.actualPort()*\r\n"}
{"iteration": 4, "tag": "no", "repo": "MegaMek/mekhq", "url": "https://github.com/MegaMek/mekhq/pull/3099#discussion_r796647173", "body": "Maybe, but my guess is that the other type could probably be accomplished by existing scenario objectives. In this case, I think the Destroy objective in combination with a bot whose behavior is to exit via the player's home map edge and forced withdrawal set to false would basically accomplish this. \r\n\r\nIn regards to tradeoffs, @NickAragua, for the PreventBreakthrough objective there is no tradeoff option. If you do not control the battlefield, then you will lose unless you destroy or cripple enough of the opposing force. Again, if that is the goal, it can be handled by other objectives."}
{"iteration": 4, "tag": "language", "repo": "dromara/hutool", "url": "https://github.com/dromara/hutool/pull/2094#discussion_r783690982", "body": "\u5355\u8bcd\u9519\u4e86"}
{"iteration": 4, "tag": "no", "repo": "Esri/arcgis-maps-sdk-java-samples", "url": "https://github.com/Esri/arcgis-maps-sdk-java-samples/pull/571#discussion_r504779028", "body": "Personally I find it a bit more intuitive to use a streets basemap for navigation, rather than satellite imagery (because it shows roads and road names more clearly), but that's a matter of preference!"}
{"iteration": 4, "tag": "no", "repo": "fcrepo/fcrepo", "url": "https://github.com/fcrepo/fcrepo/pull/1057#discussion_r70964050", "body": "If it is a question of triggering binary storage, you don't need anything _like_ a 50MB file to do that. Refer to the [Modeshape configuration](https://github.com/fcrepo4/fcrepo4/blob/master/fcrepo-http-api/src/test/resources/test_repository.json#L14) used for this test and you will see that the minimum size to trigger binary storage is only 40 bytes.\n"}
{"iteration": 4, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/4895#discussion_r608380579", "body": "@DaanHoogland done"}
{"iteration": 4, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/1795#discussion_r107758380", "body": "`SecurityLogger` now has a method `cleanAndEncode` that scrubs newlines from the message to prevent log injection attacks. So we should be good on that score."}
{"iteration": 4, "tag": "yes", "repo": "thorntail/thorntail", "url": "https://github.com/thorntail/thorntail/pull/1287#discussion_r282889307", "body": "Right, this is optional as far as I can see, i.e, one needs to enable the security logger. I'm assuming this is why UndetowLogger.SECURITY_LOGGER exists. One possible reason is that a log can be used to confirm that a given token has actually been used for some proof "}
{"iteration": 4, "tag": "yes", "repo": "MozillaReality/FirefoxReality", "url": "https://github.com/MozillaReality/FirefoxReality/pull/2915#discussion_r387821574", "body": "I was thinking about ways we could degrade from https:// to http:// in FxR so we always try secure first."}
{"iteration": 4, "tag": "yes", "repo": "apache/inlong", "url": "https://github.com/apache/inlong/pull/4795#discussion_r909252566", "body": "These codes is same with getRsaEncryptedKey."}
{"iteration": 4, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/6987#discussion_r1127028843", "body": "This looks to be something non-trivial in the impelmentation. Using \"value\" for actual message and \"_\" for metadata, hardcoded is not looking flexible from user's perspective (also it does not look too well documented)"}
{"iteration": 4, "tag": "broken", "repo": "Consensys/web3signer", "url": "https://github.com/Consensys/web3signer/pull/850#discussion_r1271745534", "body": "## Hard-coded credential in API call\n\nHard-coded value flows to [sensitive API call](1).\n\n[Show more details](https://github.com/Consensys/web3signer/security/code-scanning/120)"}
{"iteration": 4, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/6307#discussion_r903836845", "body": "Caused [SECURITY-2776](https://www.jenkins.io/security/advisory/2022-06-22/#SECURITY-2781)"}
{"iteration": 4, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/1866#discussion_r828549477", "body": "Do test\u00f3w to ma by\u0107 FakeUserProfile i tyle, prosz\u0119 w takim razie wywali\u0107 tego Missing i zrobi\u0107 to pole finalne i bedzie git\u00f3wa"}
{"iteration": 4, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/7122#discussion_r1157609456", "body": "The conditional wrapper is not necessary since logging a message with a placeholder does not involve significant additional work. In addition, entire data content should never be logged since it is available through standard provenance features. Recommend removing this debugging.\r\n```suggestion\r\n```"}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/20556#discussion_r1043164134", "body": "\u8fd9\u4e2a\u662fquery\u53c2\u6570\u7684\u5904\u7406\uff0c\u4e0d\u591a\u4f59"}
{"iteration": 4, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/7349#discussion_r640817004", "body": "Let's turn this on by default and allow disabling it in case of problems"}
{"iteration": 4, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/3542#discussion_r296353589", "body": "This was probably for debugging purposes, but we don't want to log the key. For debugging purposes, perhaps a truncated, masked, or hashed version would allow for \"uniqueness\" tracking across the application without revealing the actual key value. \r\n\r\nI.e. if this is a key of format `aws-key:arn:1243` which references a key in the KMS, logging that is \"ok\" but not ideal. If it is the raw hex value of the AES key `0123....`, that is very bad. Hashing that value to a unique identifier would be preferred. "}
{"iteration": 4, "tag": "yes", "repo": "apache/nifi-minifi", "url": "https://github.com/apache/nifi-minifi/pull/59#discussion_r90112258", "body": "@JPercivall maybe not relevant in MiNiFi context but when I see \"others\" getting permissions I always wonder why it's necessary and if any sensitive data can leak."}
{"iteration": 4, "tag": "yes", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/6616#discussion_r367722429", "body": "UDS should be considered secure (i.e., `SecurityLevel.PRIVACY_AND_INTEGRITY`). Do you know if the security level is correctly set for the UDS channel? "}
{"iteration": 4, "tag": "yes", "repo": "stargate/stargate", "url": "https://github.com/stargate/stargate/pull/1852#discussion_r881913962", "body": "Would it make sense to log an error here, given that it is a problem on server side (client should not be able to trigger it with bad payload)?\r\n"}
{"iteration": 4, "tag": "unclear", "repo": "ooni/probe-android", "url": "https://github.com/ooni/probe-android/pull/554#discussion_r1067917923", "body": "This code snippet makes the menu visible for any possible anomalous measurement. However, this diff is aiming at re-running anomalous Web Connectivity URLs. Therefore, I suggest to make the `if` more selective by also checking for the `Measurement.test_name` field's value. By doing that, based on my understanding, we will prevent the menu from opening when there is an anomaly in another experiment."}
{"iteration": 4, "tag": "no", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/1605#discussion_r879538179", "body": "I had been thinking of this as an anomalous case, but I guess it doesn't need to be logged since there is a legitimate case where its a \"normal\" operation, here and in reference source. Removed in both places."}
{"iteration": 4, "tag": "no", "repo": "questdb/questdb", "url": "https://github.com/questdb/questdb/pull/2650#discussion_r1001619555", "body": "UPDATE needs testing over soft linked partition."}
{"iteration": 4, "tag": "yes", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/6260#discussion_r333265572", "body": "What we want is just to know if we are using plaintext. In my opinion, passing a boolean is much safer than expose the `sslSocketFactory`."}
{"iteration": 4, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521680168", "body": "The Key size is specified in the clients. For example: \r\n```java\r\nCryptographyClient.encrypt(EncryptionAlgorithm algorithm, String plaintext, EncryptOptions options)\r\n```"}
{"iteration": 4, "tag": "unclear", "repo": "pac4j/pac4j", "url": "https://github.com/pac4j/pac4j/pull/175#discussion_r32531373", "body": "That depends on the app, if indeed the rest api is being used by a web service. If it's a standalone java application that wants to remotely act with the CAS server and have its own login screen, then probably a validation call is required. \n"}
{"iteration": 4, "tag": "no", "repo": "paritytrading/philadelphia", "url": "https://github.com/paritytrading/philadelphia/pull/65#discussion_r200967885", "body": "Yes, that is true. At the very least the Javadoc documentation should mention something about this. On the other hand, this method could indeed be in an utility class (e.g. `FIXMessages`) instead as well, to discourage unintentional usage."}
{"iteration": 4, "tag": "no", "repo": "gunnarmorling/1brc", "url": "https://github.com/gunnarmorling/1brc/pull/170#discussion_r1451783491", "body": "I hear you in regards to more precisely defined constraints, and yes, it's certainly one of my personal learnings for the next time (no promises yet ;). That said, most of the things you describe in fact are described already:\r\n\r\n> Fixed hash table size\r\n\r\nThere can be 10K stations at most, so a fixed size is fine. You must be able to handle any valid names though, not only those of the example data set.\r\n\r\n> Numeric overflows\r\n\r\nDo you have an example for that? I suppose a 1B data set with measurements only for one station may overflow an int. Indeed there's no test for that.\r\n\r\n> Format assumptions\r\n\r\nTemperatures are defined to be between -99.9 and 99.9 (inclusive).\r\n"}
{"iteration": 4, "tag": "no", "repo": "cBioPortal/cbioportal", "url": "https://github.com/cBioPortal/cbioportal/pull/6802#discussion_r344901687", "body": "@sheridancbio I commented out this section since I don't want to log a warning everytime the proxy is used. What's the best way to print a warning message after instance is deployed?"}
{"iteration": 4, "tag": "yes", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/702#discussion_r127260476", "body": "@rcillo @v-stepanov the subject is definitely redundant with getting the principal from the security context, as we do in the plugin. However, of the 2 solutions, I think the security context may be the most generic one, as it may contain more data then what we have in the Subject interface (name and token, iirc). I can see, for example, delegation scenarios where several prinicpals are used for a single subject, which we can't represent with the Subject interface as it is.\r\n\r\nChanging the API is not that bad, actually. It's only a plugin API, so we don't have to go through the API guild for approval."}
{"iteration": 4, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/16741#discussion_r941051832", "body": "\u6ca1\u6709\u56fd\u9645\u5316"}
{"iteration": 4, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2963#discussion_r174237060", "body": "That doesn't necessarily mean it is correct; but looking at the logging guidance, it seems correct in this instance.  \r\n\r\n`Issues that might be important, such as failing sources or an endpoint failing for an internal reason\r\nStack traces are acceptable at this level, but should be infrequent (do not log inside of a loop) and always include a descriptive message` "}
{"iteration": 4, "tag": "yes", "repo": "apache/cassandra", "url": "https://github.com/apache/cassandra/pull/2782#discussion_r1365989534", "body": "Reasonable to assume the fact that we share a factory gets us \"to the bar\" in terms of safety."}
{"iteration": 4, "tag": "unclear", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/3839#discussion_r386198318", "body": "Initially I tried to use qemu-hooks for my task, but lately moved my code to security groups python code, because, otherwise, it works unstable because of the reasons listed above."}
{"iteration": 4, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376180491", "body": "It is the duration of the sent event that represents the transit time.\r\n\r\nThis has me thinking that giving meaningful names to duration fields would be useful to us and end users in two ways:\r\n\r\n* Communicating the meaning of duration\r\n* Labeling charts and graphs with event time on the x axis and duration on the y axis.\r\n\r\n#### Example:\r\nThe `sent` event follows message encoding and occurs once it is confirmed that the message is on the wire. The duration of the `sent` event is the time that it takes for a round-trip to the server to complete and the next event occurs: `received`. The time between these two events--`sent` and `received`-- is the transitTime. \r\n\r\nSomething like this JSON is what we should produce--perhaps word-smithed and simplified for brevity:\r\n```\r\n{\r\n  \"event\": {\r\n    \"name\": \"sent\", \r\n    \"time\": \"<time-stamp>\"\r\n  }, \r\n  \"duration\": { \r\n    \"name\": \"transitTime\", \r\n    \"microseconds\": <microseconds> \r\n  }\r\n}\r\n```\r\nI've discussed this with Naveen and Mo. We agreed that this work should be done on another PR. I've logged this issue to track the work which I will assign to myself for now: #8034"}
{"iteration": 4, "tag": "no", "repo": "apache/netbeans", "url": "https://github.com/apache/netbeans/pull/3992#discussion_r908528858", "body": "It was just a precaution, not something I observed. But since FlatLAF treats Insets and InsetsUIResource differently, I'd imagine cases where FlatLAF customizations might pick one or the other (though this would be very weird). I figured that leaving the same kind of instance was the least likely to cause problems."}
{"iteration": 4, "tag": "language", "repo": "sofastack/sofa-common-tools", "url": "https://github.com/sofastack/sofa-common-tools/pull/179#discussion_r1209010688", "body": "0  \u6362\u6210\u5e38\u91cf\u5427"}
{"iteration": 4, "tag": "no", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/1524#discussion_r548002598", "body": "So far, running with an unbounded queue, this has not been the case, and since the caller can supply the queue type I'm not too worried about it.\r\n\r\nIt is possible, but given that I'm now draining queues till empty, even if there is a pathological input dataset that is sending to just one writer, we become a pass-through writer on a different thread, writing as fast as it's adding data with just a bit of extra overhead for copying to the intermediate queue. So I think it should be fine. "}
{"iteration": 4, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/13280#discussion_r1162107641", "body": "I realize that this is immutable and very unlikely to ever be computed on the fly, but I would still really like to avoid direct field access. If we start doing stuff like this, people will tend to copy the pattern where it can cause harm (for example, where the map is mutable, or where we might want to compute the value on the fly). And there is no benefit here, so let's avoid it."}
{"iteration": 4, "tag": "broken", "repo": "Consensys/web3signer", "url": "https://github.com/Consensys/web3signer/pull/888#discussion_r1303793409", "body": "## Hard-coded credential in API call\n\nHard-coded value flows to [sensitive API call](1).\n\n[Show more details](https://github.com/Consensys/web3signer/security/code-scanning/131)"}
{"iteration": 4, "tag": "no", "repo": "apache/ignite", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485607229", "body": "I don't have a simple solution for this case, probably, some autogenerated resources might help here. As another option, we can write a custom checkstyle rule but it less friendly for the developers."}
{"iteration": 4, "tag": "bot", "repo": "FISCO-BCOS/web3sdk", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/677#discussion_r449552280", "body": "__[PMD Java]__ Potential violation of Law of Demeter (static property access) ([view](https://sider.review/gh/repos/113938008/pulls/677#issue-4101212))\n\n<details>\n\n| Rule | Ruleset | Priority |\n| ---- | ------- | -------- |\n| `LawOfDemeter` | Design | 3 |\n\nReferences:\n- <https://pmd.github.io/pmd-6.24.0/pmd_rules_java_design.html#lawofdemeter>\n\nYou can [close this issue](https://sider.review/gh/repos/113938008/pulls/677#issue-4101212) if no need to fix it. [Learn more](https://help.sider.review/getting-started/working-with-issues).\n\n</details>"}
{"iteration": 4, "tag": "unclear", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/37472#discussion_r1414090169", "body": "> And then the impl bean could inject Event<AuthenticationEvent> and Event<AuthorizationEvent> and rely on internal optimizations. Ofc, this would not be possible if the set of security events is \"unbounded\".\r\n\r\nWe already have `..oidc.SecurityEvent`, I can imagine there will be others. I'm not sure how to do that under one API in Security extension that doesn't know about what is in OIDC. I think that would only work if every extension took care of it's security event. But than you don't have centralized handling of security events, there will be repeated code."}
{"iteration": 4, "tag": "no", "repo": "eclipse-vertx/vert.x", "url": "https://github.com/eclipse-vertx/vert.x/pull/4327#discussion_r847317839", "body": "the interesting question is the order of shutdown... is there any \"lifecycle\" documented or implemented?\r\n\r\nIMHO the ideal sequence would be:\r\n1. discovery unpublish self\r\n2. --optional delay--\r\n3. shutoff servers / external consumers (httpserver, netserver, custer message consumers)\r\n4. shutoff timers\r\n5. verticle stop()\r\n6. local message consumers\r\n7. clients (httpclient, netclient, mongoclient, ....)\r\n8. clustered maps / locks / counter \r\n\r\n"}
{"iteration": 4, "tag": "unclear", "repo": "fossasia/open-event-organizer-android", "url": "https://github.com/fossasia/open-event-organizer-android/pull/1120#discussion_r197621521", "body": "Encryption Service would do encryption instead of getting email and password"}
{"iteration": 4, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/6767#discussion_r162166367", "body": "I'm concerned that this will generate so many false positives that they will drown out real misconfigurations. For each property, there are 3 possibilities:\r\n1. The property must be the same across the servers it applies to. If we find that it isn't, the check should show an error.\r\n2. The property should almost always be the same across the servers it applies to. If we find that it isn't, we should show a warning.\r\n3. The property can reasonably be different across the servers it applies to.\r\n\r\nI suggest recording which of the three categories each PropertyKey falls under when we construct the PropertyKey in `PropertyKey.java`.\r\n\r\nIt's also important to take into consideration that most configuration applies only to masters or only to workers. We shouldn't complain that a master node doesn't contain a worker-only property, or vice versa."}
{"iteration": 4, "tag": "no", "repo": "MovingBlocks/Terasology", "url": "https://github.com/MovingBlocks/Terasology/pull/3459#discussion_r208318635", "body": "From my perspective, we should not mix user's screenshots and random preview images. Generally, because they are for different purposes. And it might be real pain in the neck to manage copies or links in global screenshot folder for all existing and old saved games."}
{"iteration": 4, "tag": "yes", "repo": "MovingBlocks/Terasology", "url": "https://github.com/MovingBlocks/Terasology/pull/3118#discussion_r145134628", "body": "I guess you can, but I don't think we should encourage anybody to override a user's choice without his or her consent. "}
{"iteration": 4, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/6348#discussion_r865124423", "body": "@DaanHoogland done"}
{"iteration": 4, "tag": "language", "repo": "naver/fixture-monkey", "url": "https://github.com/naver/fixture-monkey/pull/142#discussion_r789372733", "body": "@seongahjo \ub124 \uae30\ubcf8 \uad6c\ud604\uc774\ub77c \uc5ec\uae30\uc5d0 \uc704\uce58\ud588\ub294\ub370\uc694 \uc5ec\uae30\uac00 \uc544\ub2c8\uba74 fixture-monkey \ubaa8\ub4c8\ub85c \uac00\uc57c\uaca0\uad70\uc694\r\n\r\n@jwChung \uc5b4\ub514\uc5d0 \uc704\uce58\ud558\ub294\uac8c \uc88b\uc744\uae4c\uc694?"}
{"iteration": 4, "tag": "no", "repo": "improbable-research/keanu", "url": "https://github.com/improbable-research/keanu/pull/85#discussion_r192252560", "body": "No tan op in Nd4j?"}
{"iteration": 4, "tag": "no", "repo": "RIPE-NCC/whois", "url": "https://github.com/RIPE-NCC/whois/pull/748#discussion_r563856137", "body": "Better not to hard-code default values like 10.*.*.* that are environment-specific. If there isn't a sensible default value then fail startup if the property isn't set (that's clearer to debug)."}
{"iteration": 4, "tag": "no", "repo": "apache/camel", "url": "https://github.com/apache/camel/pull/1858#discussion_r130713161", "body": "@vrlgohel ah okay, yeah we can return a json text message response too. I guess that is how others my do it since the endpoint indicate json content-type (I guess having to use separate for error codes may just be annoying)."}
{"iteration": 4, "tag": "no", "repo": "nosqlbench/nosqlbench", "url": "https://github.com/nosqlbench/nosqlbench/pull/872#discussion_r1054793694", "body": "Should we consider some debug logging just in case we have to detect this condition?"}
{"iteration": 4, "tag": "no", "repo": "FasterXML/jackson-databind", "url": "https://github.com/FasterXML/jackson-databind/pull/1861#discussion_r167517045", "body": "In our project we follow some guidelines and in which having specific imports is one of them. This is why I have asked to use specific imports.\r\n\r\nWild card imports is a feature provided by the language and should be used whenever required.\r\n\r\nI think it is about the standard practices we use in a project. If here we want to use wildcards for imports greater than or equal to number - n, then I am also fine with this.\r\n\r\nI agree to @cowtowncoder that it does not matters a lot."}
{"iteration": 4, "tag": "no", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/5586#discussion_r248808811", "body": "If you are going to use a throwing method you should at least catch this exception and give a helpful error message, as some user/developer may want to increase the target partition size to compensate or some other such thing."}
{"iteration": 4, "tag": "no", "repo": "richardwilly98/elasticsearch-river-mongodb", "url": "https://github.com/richardwilly98/elasticsearch-river-mongodb/pull/407#discussion_r20368335", "body": "Hmm. I guess with our small-but-many river situations not just waiting the few seconds would be stupid, but assuming a bigger river indeed one might rather prefer responsiveness of the administrative actions than being forced to wait.\n\nI think it should be possible to offload the actual start procedure into a separate thread, maybe combining it again with the CollectionSlurper functionality. A possibly simpler version would be to use a thread pool here, and cancel the future of the task. Need to look a bit into that, my gut feeling usually wants to avoid more explicitly managed threads :)\n"}
{"iteration": 4, "tag": "no", "repo": "neo4j/neo4j-ogm", "url": "https://github.com/neo4j/neo4j-ogm/pull/436#discussion_r151341251", "body": "Two things \r\n\r\n- Which change causes this change in behaviour?\r\n\r\n- I am a bit worried about this _invisible_ change in behaviour, generally people shouldn't query by non-annotated abstract class, can we put at least a warning when they do? Or maybe an exception?"}
{"iteration": 4, "tag": "no", "repo": "apache/cassandra", "url": "https://github.com/apache/cassandra/pull/253#discussion_r216086521", "body": "I think it doesn't make sense to wait for more than 5 minutes to rebuffer. Given buffer sizes are on the order of a few megabytes at most, 5 minutes is an eternity. It's best to keep it short so failures are exposed sooner than later."}
{"iteration": 4, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2406#discussion_r1181257169", "body": "Usu\u0144 tutaj te puste linijki bo s\u0105 zb\u0119dne, dalej b\u0119dzie czytelnie"}
{"iteration": 4, "tag": "no", "repo": "eclipse-hono/hono", "url": "https://github.com/eclipse-hono/hono/pull/2168#discussion_r491832832", "body": "I see your point. However, my idea was not so much to organize by technical aspects but rather by means of communication patterns. Most devices will support the telemetry (downstream) direction, i.e. they will report sensor readings etc. Some will additionally support receiving commands (upstream) and (optionally) responding to commands.\r\nMaybe it would be better to rename the packages to `org.eclipse.hono.client.telemetry` and `org.eclipse.hono.client.command` respectively? WDYT @calohmn "}
{"iteration": 4, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/16117#discussion_r960076074", "body": "I wonder if there are cases where this could block forever and would bring down the system since the state lock is owned while this is called?\r\n\r\nAnd the danger with putting a timeout here is that if the operation is cancelled, the snapshot may still be going on, but then the state lock is released so it could take an invalid snapshot.\r\n\r\nI think the only safe way to do this is to put all this logic and the state lock inside the take snapshot function? what do you think?"}
{"iteration": 4, "tag": "no", "repo": "apache/drill", "url": "https://github.com/apache/drill/pull/2794#discussion_r1168776897", "body": "This really highlights an issue with Calcite.  They really could have added an additional function something like below and nothing would have broken...\r\n\r\n\r\n```\r\nmakeCast(RelDataType type, RexNode exp, boolean matchNullability) {\r\n   return makeCast(type, exp, matchNullability, false);\r\n}\r\n```"}
{"iteration": 4, "tag": "yes", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/8684#discussion_r273286165", "body": "it's not a fatal error any more if we're tolerating corruption\r\n"}
{"iteration": 4, "tag": "no", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/2117#discussion_r645860298", "body": "There are not great alternatives, but these built in java types can kill performance because they are heavily synchronized.  Can end up calling lots of sync methods when serializing something. For cases like this where only a single thread will ever use this its annoying.  There may be something else to use, I will have to look around."}
{"iteration": 4, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/4940#discussion_r261045824", "body": "Using this as a workaround. When I tested rule that would log file name when the new file is detected I faced a problem that if there are multiply new files the channel is triggered so fast that rule can only log last file name, but multiply times."}
{"iteration": 4, "tag": "broken", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/1149#discussion_r75741636", "body": "It looks like both of these audits are essentially getting thrown inside of a loop for every request. This could be a potential performance bottleneck if there are a lot of sources. I'd rather see one audit written at the very end and only for the negative case.\n"}
{"iteration": 4, "tag": "broken", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/2353#discussion_r63408976", "body": "If they do that then there will be big warning messages in the jenkins log due to the non safe parameters.\n"}
{"iteration": 4, "tag": "yes", "repo": "JanusGraph/janusgraph", "url": "https://github.com/JanusGraph/janusgraph/pull/3149#discussion_r928030423", "body": "> This is debatable. I did it mainly as a precaution (malicious queries like g.V().drop().iterate() can happen and JanusGraph user might not have control over it).\r\n\r\nI see. I would probably like to have a small debate about it because it gives users a false feeling that you can safely expose script evaluation and it will be guaranteed that anything they execute there will be read-only. If we talk specifically about malicious queries then this script engine should be way more protected. For example, I didn't test this query myself but what would happen to the next evaluation?\r\n```\r\ng2 = ((JanusGraph) g.getGraph()).buildTransaction().start().traversal(); g2.V().drop().iterate(); g2.tx().commit();\r\n```\r\nMoreover, by exposing script evaluation you literally giving access to the whole JVM and by accessing it you can do whatever you want with the server. For example, someone could get a dump of the whole memory or get some credentials, or access the network this machine is hosted in, etc. \r\nBy giving such access to the user you should probably limit a lot of things in the script evaluation engine (at least following some guideline from TinkerPop [here](https://tinkerpop.apache.org/docs/current/reference/#script-execution)).\r\nCreating a secure evaluation would be really great but that requires us to configure gremlin script engine quite a bit.\r\nSo, I would probably not consider it as a protection against malicious script. Thus, I don't see any reason why this specific traversal is read-only. If a user doesn't want to change anything - they should not write any scripts which changes data.\r\nIf we proceed with the read-only default traversal then I bet we will have a feature request soon to allow traversal to write some data, or even worse, users may start using hacks like:\r\n```\r\ng2 = ((JanusGraph) g.getGraph()).buildTransaction().start().traversal(); g2.addV(\"dummy\").next(); g2.tx().commit();\r\n```\r\nSo, I guess I would actually make `read-only` traversal creation as an optional feature. Moreover I would explain that it simply creates a read-only traversal but it doesn't protect users from creating `write` transactions inside scripts. I would also probably add some documentation which says that it isn't safe to expose this evaluation to clients as it doesn't protect from executing arbitrary code. In addition I would probably point tow the TinkerPop documentation about the used script evaluation engine.\r\nThat said, I could be wrong but would like to her your thoughts about it. Maybe creating read-only default traversal is actually good by default. I'm just not sure right now."}
{"iteration": 4, "tag": "unclear", "repo": "airlift/aircompressor", "url": "https://github.com/airlift/aircompressor/pull/74#discussion_r137583032", "body": "Yeah, unfortunately, this is one of those cases where the real cause depends on context. From the point of view of this method, the output buffer *is* too small. From the point of view of the caller, the only way that error can happen is if the input is corrupted."}
{"iteration": 4, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/1379#discussion_r86199924", "body": "Unfortunately you can't control or guarantee the call chain; all that can be done is to protect locally from the effects of the mutability. An integrator could directly use `AdaptedMetacard` and do so with no regard for its implementation. While we can't protect from every bit of bad thread code, in this case we can make a small, defensive change locally.\n"}
{"iteration": 4, "tag": "no", "repo": "aws-amplify/aws-sdk-android", "url": "https://github.com/aws-amplify/aws-sdk-android/pull/2529#discussion_r672567455", "body": "The value is set false by default. I suggest we query for browsers every time in case the user installs a browsers after a failure. If we cache false value then the custom tabs won't launch even if the user just installed a browser. It will work though if user restarts the app."}
{"iteration": 4, "tag": "no", "repo": "thorntail/thorntail", "url": "https://github.com/thorntail/thorntail/pull/1153#discussion_r225907024", "body": "It is the JWE(JSON Web Encryption) header it is referring to. Described in detail here\r\nhttps://tools.ietf.org/html/rfc7516"}
{"iteration": 4, "tag": "broken", "repo": "apache/dolphinscheduler", "url": "https://github.com/apache/dolphinscheduler/pull/15321#discussion_r1531941217", "body": "## Disabled Spring CSRF protection\n\nCSRF vulnerability due to protection being disabled.\n\n[Show more details](https://github.com/apache/dolphinscheduler/security/code-scanning/4060)"}
{"iteration": 4, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/7448#discussion_r1246297967", "body": "I'm not sure whether it would be useful or not to externalise at least this one (maybe the sleep time is not justified but it can be argued that this makes sense to be configurable) what do you think?"}
{"iteration": 4, "tag": "no", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/1682#discussion_r216868188", "body": "I am not a fan of just dumping exception traces to the log by default. Even if we have #1795, it would be much better to explicitly log this at some sort of verbose logging level (like debug) so that we can control what is logged by setting the class level log level in the config. \r\n\r\nIf these types of things were logged at debug level, then in most cases we won't see them until we want to debug something, at which point we can change the log level for the class (potentially at run time through JMX) and then collect the necessary information.\r\n\r\nIf you see our soak cluster, we already have many NPE stack traces in the logs. These are really hard to work with because:\r\n\r\n1. It is hard to grep these out given that they have many lines.\r\n2. The sheer number crowds out everything else.\r\n\r\nI vote for not adding to the problem in this patch."}
{"iteration": 4, "tag": "broken", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/12760#discussion_r972461035", "body": "## Disabled Netty HTTP header validation\n\nRequest splitting or response splitting vulnerability due to header value verification being disabled.\n\n[Show more details](https://github.com/netty/netty/security/code-scanning/71)"}
{"iteration": 4, "tag": "language", "repo": "woowacourse-teams/2022-dallog", "url": "https://github.com/woowacourse-teams/2022-dallog/pull/909#discussion_r1019152439", "body": "\uc800\ud76c \ud504\ub860\ud2b8 \ud06c\ub8e8 \ubd84\ub4e4\uc758 \uc774\ub984\uc73c\ub85c \ubcc0\uacbd\ud574\ubcf4\uc558\uc5b4\uc694!"}
{"iteration": 4, "tag": "no", "repo": "apache/drill", "url": "https://github.com/apache/drill/pull/1843#discussion_r314321490", "body": "Constructors can be protected."}
{"iteration": 4, "tag": "yes", "repo": "apache/lucene", "url": "https://github.com/apache/lucene/pull/12311#discussion_r1198170915", "body": "Ah you try to make the module readable. Then we need to document permissions and add a fallback by catching security/access exceptions."}
{"iteration": 4, "tag": "no", "repo": "camunda/zeebe", "url": "https://github.com/camunda/zeebe/pull/3309#discussion_r342151379", "body": "Yes you're right. Even if I do not expect that this happens :D "}
{"iteration": 4, "tag": "yes", "repo": "apache/netbeans", "url": "https://github.com/apache/netbeans/pull/6482#discussion_r1335069752", "body": "this is usually more secure since it retains the file permissions of the process, however I just remembered that this is windows so this doesn't matter..."}
{"iteration": 4, "tag": "yes", "repo": "oblador/react-native-keychain", "url": "https://github.com/oblador/react-native-keychain/pull/148#discussion_r217137049", "body": "This needs to be at least 2 seconds. Otherwise the decryption will always fail.\r\n\r\nTo work around the issue we need to pass in a CryptoObject to the `.authenticate` call (as mentioned here https://github.com/oblador/react-native-keychain/issues/116#issuecomment-420657678) but I could not figure out myself how to do it. I can't seem to be able to figure out how to pass the Cipher to CryptoObject since it needs to be initialized, and to initialize it user needs to be authenticated... Hopefully @cladjules will figure that one out."}
{"iteration": 4, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/15234#discussion_r846609898", "body": "I think we can totally use a much larger interval, like 10 seconds. I figure the point of logging multiple times is to make sure the user can see the log message enough times to catch his attention when he scrolls up and down a little bit in the log. More messages than that will be unnecessary."}
{"iteration": 4, "tag": "unclear", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/8821#discussion_r702706916", "body": "Java 8 (build 8u261 or newer) and Java 11.0.8+ supports TLSv1.3 - https://www.oracle.com/java/technologies/javase/8u261-relnotes.html, https://www.petefreitag.com/item/918.cfm\r\n\r\nIt's your call if that is good enough or we want to support TLSv1.2 too."}
{"iteration": 4, "tag": "unclear", "repo": "apache/nifi-registry", "url": "https://github.com/apache/nifi-registry/pull/231#discussion_r328603904", "body": "I guess my question was... did we need to change the way the docs webapp was loaded in order for something with the security headers to work correctly? \r\n\r\nI'm only asking since I don't think there was any existing issue with the docs webapp."}
{"iteration": 4, "tag": "language", "repo": "TencentBlueKing/bk-job", "url": "https://github.com/TencentBlueKing/bk-job/pull/562#discussion_r775327120", "body": "1. job.client.cmdb.api.http \u4e0e job.client.cmdb.api \u5e76\u6ca1\u6709\u5728\u6307\u6807\u547d\u540d\u4e0a\u4f53\u73b0\u51fa\u662f\u5426\u7edf\u8ba1\u53cd\u5e8f\u5217\u5316\u7684\u5dee\u5f02\r\n2. \u7b2c\u4e09\u65b9API\u7684\u8c03\u7528\u76d1\u63a7\uff0c\u4e3b\u8981\u662f\u5224\u65ad\u7b2c\u4e09\u65b9API\u7684\u670d\u52a1\u80fd\u529b\uff0c\u5e8f\u5217\u5316\u3001\u53cd\u5e8f\u5217\u5316\u4e0d\u9700\u8981\u7edf\u8ba1\r\n3. \u5efa\u8bae\u4e0d\u8981\u7528\u76d1\u63a7\u6307\u6807\u5904\u7406\u592a\u591a\u7684\u4e8b\u60c5\uff0c\u4fdd\u6301\u76d1\u63a7\u6307\u6807\u7684\u7b80\u5355\uff1b\u5982\u679c\u786e\u5b9e\u4e2a\u522bAPI\u9700\u8981\u7edf\u8ba1\u5e8f\u5217\u5316\u3001\u53cd\u5e8f\u5217\u8bdd\u7684\u8017\u65f6\uff0c\u7528Watcher\u7684\u65b9\u5f0f\u65e5\u5fd7\u8f93\u51fa\u5373\u53ef\u3002\u5305\u62ec\u6211\u4eec\u7528\u7684gateway\u7b49\u7ec4\u4ef6\uff0c\u4e5f\u6ca1\u6709\u6309\u7167\u6709\u6ca1\u6709\u5e8f\u5217\u5316\u8fd9\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u7edf\u8ba1\uff0c\u56e0\u4e3a\u4f1a\u589e\u52a0\u76d1\u63a7\u7684\u590d\u6742\u5ea6"}
{"iteration": 4, "tag": "no", "repo": "spring-projects/spring-integration", "url": "https://github.com/spring-projects/spring-integration/pull/2632#discussion_r234320821", "body": "In addition, I'm not fully like such a solution. It is going to work only for Oracle. More over I remember that it was bad practice to rely this trick. Can't recall what was wrong, but I can talk to my friend back in Ukraine who is an Oracle DBA.\r\n\r\nDoes it make sense?"}
{"iteration": 4, "tag": "language", "repo": "woowacourse-teams/2022-dallog", "url": "https://github.com/woowacourse-teams/2022-dallog/pull/406#discussion_r945990401", "body": "\uc774\uce5c\uad6c \ub355\ubd84\uc5d0 \uc0bd\uc9c8 \uc880 \ud588\ub124\uc694 \ud83d\udc4d  \uae30\ubcf8 getter \uc678\uc5d0\ub294 getter\ub97c \ub450\uba74 \uc548 \ub41c\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4."}
{"iteration": 4, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/20513#discussion_r1486077062", "body": "It actually is fine I think. The code currently assumes (and it is even conveyed by the comment above) that this estimator is used solely for stages which would produce small output.\r\nZero is not exactly strict of course - but is in correct ballpark.\r\n\r\nCommnt above:\r\n```\r\n        // use empty estimate as fallback for eager parents. It matches current logic of assessing if node should be processed eagerly or not.\r\n        // Currently, we use eager task exectuion only for stages with small FINAL LIMIT which implies small input from child stages (child stages will\r\n        // enforce small input via PARTIAL LIMIT)\r\n```"}
{"iteration": 4, "tag": "language", "repo": "sermant-io/Sermant", "url": "https://github.com/sermant-io/Sermant/pull/24#discussion_r731470383", "body": "TODO \u5904\u7406\u4e0b\u54c8"}
{"iteration": 4, "tag": "no", "repo": "zaproxy/zap-extensions", "url": "https://github.com/zaproxy/zap-extensions/pull/2547#discussion_r491476069", "body": "That's to allow to generate website pages (https://www.zaproxy.org/docs/alerts/) in a standard way.\r\n\r\nEdit: missed above comment..."}
{"iteration": 4, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/6008#discussion_r239947814", "body": "This is exactly what I was going for. The type (`Optional`) documents that you have to check `isPresent` before `get`. It's just as true if we make the field nullable, but then it's not well documented, and therefore more vulnerable to NPEs.\r\n\r\nIn my test, I deliberately don't check `isPresent` because I expect it to be present. If it's not, we'll get a `NoSuchElementException`, which contains the exact same information as if we had an extra `isPresent` check that then throws an `AssertionException(Expected a throwable)`."}
{"iteration": 4, "tag": "unclear", "repo": "apache/syncope", "url": "https://github.com/apache/syncope/pull/319#discussion_r818370864", "body": "This method would allow to set  a different `cipherAlgorithm` for the user than the one set for password.\r\nThe risk is that `user#getCipherAlgorith` can return the wrong value when used to check password or security question values via `Encryptor#verify`.\r\n\r\nI think we should change `User` interface to:\r\n\r\n1. remove `cipherAlgorithm` param from `setPassword()` and `setSecurityAnswer()` methods\r\n1. add a separate `setCipherAlgorithm()` method, failing if `cipherAlgorithm` is already set, unless the provided parameter is `null`\r\n1. have `setPassword()` and `setSecurityAnswer()` to internally set `cipherAlgorithm` to the value from conf if none was provided before"}
{"iteration": 4, "tag": "unclear", "repo": "JanusGraph/janusgraph", "url": "https://github.com/JanusGraph/janusgraph/pull/297#discussion_r121016542", "body": "Will this prevent things like authentication and read consistency from being configured by the end user? What sorts of errors were you seeing here?"}
{"iteration": 4, "tag": "yes", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/4437#discussion_r170104588", "body": "We can't do that directly, because mainEntry never returns in this case; it exits when it detects the failure code. The custom security manager class intercepts the exit and throws the ExitNotAllowedException, which includes the code, which is asserted in the catch clause."}
{"iteration": 4, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/12365#discussion_r919746298", "body": "Can you elaborate on this? What kind of application bug would surface itself in a silent way like this?"}
{"iteration": 4, "tag": "no", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/7512#discussion_r587209295", "body": "One suggestion here would be to specify the type of the object (Attribute, DataElement) because for the client can be difficult to understand where is the error just from the uid.\r\nMaybe something like this:\r\n1125( \"Value {0} is not a valid option for {1}({2}) in option set {3}\" )\r\nWhere 2 is either \"Attribute\" or \"DataElement\"\r\n"}
{"iteration": 4, "tag": "unclear", "repo": "linkedin/venice", "url": "https://github.com/linkedin/venice/pull/418#discussion_r1194207853", "body": "No, that'd defeat some purpose of Helix assisted routing. If we do want to add some notion of least loaded we also need to make some changes since HAR is mostly going to be used for batch gets and currently the instance monitor only tracks request not key count."}
{"iteration": 4, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/26491#discussion_r911501874", "body": "This is the second, more complex issue I mentioned. Without this you'll get the following IT failure:\r\n```\r\n[ERROR] Errors:\r\n[ERROR]   PhoneCallResourceTest.testFindByAreaCode \u00bb Runtime java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\r\n        [error]: Build step io.quarkus.spring.data.deployment.SpringDataJPAProcessor#build threw an exception: java.lang.IllegalStateException: Entity class java.io.Serializable referenced by io.quarkus.it.spring.data.jpa.PhoneCall.id was not part of the Quarkus index. Offending method is 'findByIdAreaCode' of repository 'io.quarkus.it.spring.data.jpa.PhoneCallRepository'.\r\n```\r\nThe reason for this slightly irritating error is that `fieldInfo.type().name()` for a field/type `ID extends Serializable` will just return `Serializable` ."}
{"iteration": 4, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2242#discussion_r135575908", "body": "When the preference call fails with a 413, the message coming back is an `Issue Authorizing Request` and is misleading.  This was observed when the upload size was restricted to 10 bytes (which may not happen in reality, but still)."}
{"iteration": 4, "tag": "no", "repo": "projectnessie/nessie", "url": "https://github.com/projectnessie/nessie/pull/7954#discussion_r1453600640", "body": "I agree. Maybe we can have a client-side flag to control the reporting of the full error payload.\r\n\r\nIn most cases it is not required. When networking is configured correctly, error responses are proper Nessie JSON objects."}
{"iteration": 4, "tag": "yes", "repo": "jenkinsci/bitbucket-branch-source-plugin", "url": "https://github.com/jenkinsci/bitbucket-branch-source-plugin/pull/329#discussion_r458103890", "body": "Than the guide is outdated and all plugins following that guide are a security risk."}
{"iteration": 4, "tag": "unclear", "repo": "hyphanet/fred", "url": "https://github.com/hyphanet/fred/pull/268#discussion_r15342016", "body": "Not that function, no. It might be possible to refactor to make it more general; the plan was to allow other kinds of e.g. anonymous setup, and we might still need that e.g. for darknet invites.\n"}
{"iteration": 4, "tag": "no", "repo": "saros-project/saros", "url": "https://github.com/saros-project/saros/pull/627#discussion_r313648885", "body": "Ok, I first want to get my base assumptions straight: This action is executed when pressing the connect button (not using the drop-down menu), right?\r\n\r\nBut doesn't this still break when changing the default account?\r\nI.e. with the same example, if the user were to set Carl as the default account before connecting again, they would connect as Carl."}
{"iteration": 4, "tag": "language", "repo": "TencentBlueKing/bk-job", "url": "https://github.com/TencentBlueKing/bk-job/pull/666#discussion_r839522101", "body": "\u4e0d\u9700\u8981\u8fd9\u4e2a\u65b9\u6cd5"}
{"iteration": 4, "tag": "unclear", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/26783#discussion_r936753893", "body": "We're already _almost_ drowning in config options here, but should there be an option for suppressing non-application endpoint access logs when attached to a dedicated endpoint? (for metrics, e.g., we have ways to ignore requests.. should you be able to ignore the non-application endpoint?)\r\n"}
{"iteration": 4, "tag": "no", "repo": "mekanism/Mekanism", "url": "https://github.com/mekanism/Mekanism/pull/5494#discussion_r303208671", "body": "When I was comparing against it I believe they were, but at times it looked extremely weird having them be full bright and kind of bad in my opinion (especially *after* the slight color changes made in this PR to the cubes). I don't know about at night but I buried myself underground with the cubes, and the corners just looked \"wrong\" being lit up, given the cubes themselves don't actually give off any light."}
{"iteration": 4, "tag": "language", "repo": "FunnyGuilds/FunnyGuilds", "url": "https://github.com/FunnyGuilds/FunnyGuilds/pull/2269#discussion_r1081618150", "body": "czy nie ma jakiego\u015b skr\u00f3conego sposobu na wys\u0142anie tego? np.\nthis.messageService.send(sender, config -> config.deputySet);\nw przypadku gdzie nie ma formater\u00f3w itd"}
{"iteration": 4, "tag": "unclear", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/2739#discussion_r202337269", "body": "Actually it is kind of kidding yourself in this case, as the object ref may not be changed after setting but the state can still be changed. I would advice using a final filter against this as a spam filter against spam; ignore, don't read.\r\nIn this case it is best to follow @rafaelweingartner 's suggestion, to make the new and/or changed code be in smaller methods and leave the existing alone. Though refactoring the whole method is an option as well of course ;)"}
{"iteration": 4, "tag": "no", "repo": "alibaba/Sentinel", "url": "https://github.com/alibaba/Sentinel/pull/2562#discussion_r803856678", "body": "> For normal JDBC statement, it might bring a large number of different SQLs, which generates too much Sentinel \"resource\" and cause huge memory footprint. Maybe we need some mechanism to avoid it.\r\n\r\nI have to think about this problem, maybe we can add a custom resource method, and use SQL when the custom resource cannot be obtained. example:\r\n````java\r\nprotected String getResourceName() {\r\n    String currentResourceName = JDBCResourceUtil.getCurrentThreadJDBCResourceName();\r\n    if (StringUtil.isNotBlank(currentResourceName)) {\r\n        return currentResourceName;\r\n    }\r\n    return getSQL();\r\n}\r\n````\r\nHowever, when doing this, it is also necessary to adapt JPA and MyBatis, the \"resource\" needs to use repoInterface.methodName/namespace+id(in MyBatis), such as: com.alibaba.repository.UserRepository.saveUser. MyBatis interceptor example:\r\n````java\r\npublic Object intercept(Invocation invocation) throws Throwable {\r\n    MappedStatement ms = getMappedStatement(invocation);\r\n    String resource = ms.getId(); //namespace+sqlName\r\n    JDBCResourceUtil.setCurrentThreadJDBCResourceName(resource);\r\n    return invocation.proceed();\r\n}\r\n````\r\nHow about this way?"}
{"iteration": 4, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/10011#discussion_r1013268122", "body": "So the other question then? Maybe given the fact that we have fault-tolerant execution mode right now this is not really a crucial feature. With FTE you can just shoot the node, not wait for a graceful shutdown at all, or just wait for a limited time. \r\nSome work will be wasted, but the query as a whole will survive. Would that be feasible for your use-case @dzhi-lyft ? \r\n\r\n@arhimondr any comments on this one?"}
{"iteration": 5, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/11329#discussion_r211775934", "body": "Personally, I'd advocate removing this. The feature should be a net positive for everyone and adding a flag, especially when the default is false, adds complexity and the chance that the feature breaks over time when combined with other features. I'll tell you some horror stories offline :)"}
{"iteration": 5, "tag": "unclear", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/4907#discussion_r108505250", "body": "It is safe as no-one should change them (mEof, mCancel, mError) once it is set. I reason this in the following way:\r\n\r\nmEof, mCancel, mError are virtual packets injected into the 'virtual queue'.  They can only be pushed once. It needs a lock to pop (i.e. read) them from the 'virtual queue'. After that, no lock is required to process the packet. "}
{"iteration": 5, "tag": "broken", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/2230#discussion_r1492761063", "body": "## Local information disclosure in a temporary directory\n\nLocal information disclosure vulnerability due to use of file readable by other local users.\n\n[Show more details](https://github.com/rsksmart/rskj/security/code-scanning/2699)"}
{"iteration": 5, "tag": "no", "repo": "JabRef/jabref", "url": "https://github.com/JabRef/jabref/pull/3578#discussion_r158650813", "body": "The last FileOutputStream could be replaced by the Files.newFileOutputStream which directly accepts a path "}
{"iteration": 5, "tag": "unclear", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/13966#discussion_r1254348119", "body": "I don't recall why we added this check. I think that the cipher can only be set once per connection so this may be the reason. I suppose that it is fine to remove it in this case. I am not sure about the `Objects.requireNonNull` though.\r\n\r\nAs this file is only used in tests, it would also make sense to move it to the `test` source tree."}
{"iteration": 5, "tag": "no", "repo": "jenkinsci/docker-plugin", "url": "https://github.com/jenkinsci/docker-plugin/pull/150#discussion_r23853383", "body": "Our jenkins server and docker server is on the same box. As soon as the docker container is started, the container ssh port forward on 127.0.0.1, and the port, is already up. But the SSH daemon may not have finished starting up. When I tested this scenario, PortUtils.waitForPort does not block, since the port is already up. It only does a port is open check. The new change tries to do an ssh connection, which fails if the SSH daemon is not ready.\n"}
{"iteration": 5, "tag": "language", "repo": "apache/incubator-seata", "url": "https://github.com/apache/incubator-seata/pull/4270#discussion_r780673418", "body": "\u8bfb\u53d6cpu\u6838\u5fc3\u6570\u6765\u4f5c\u4e3a\u6700\u5927\u7ebf\u7a0b\u6570\u548c\u6838\u5fc3\u7ebf\u7a0b\u6570\u5427ExecutorService\u76f4\u63a5\u6539\u4e3aThreadPoolExecutor\u66f4\u4e3a\u5408\u9002\r\n\u4e8b\u52a1\u7684\u5904\u7406\u5e94\u8be5\u4e22\u5230DefaultCoordinator\u4e2d\u53bb,\u8fd9\u4e2a\u7c7b\u96c6\u4e2d\u5bf9\u4e8b\u52a1\u8fdb\u884c\u5904\u7406,\u81f3\u4e8edestroy,\u8981\u7ee7\u627fDisposable,\u5e76\u6dfb\u52a0\u5230ShutdownHook.addDisposable \u4e2d,\u5982\u679c\u4f60\u628a\u8fd9\u4e2a\u7ebf\u7a0b\u653e\u5230DefaultCoordinator,\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u5728SessionHelper \u7ee7\u627fDisposable\u4e86\r\n"}
{"iteration": 5, "tag": "no", "repo": "stripe/stripe-java", "url": "https://github.com/stripe/stripe-java/pull/654#discussion_r248916522", "body": "default access here, so it's not available to the user, but only available within our package and specifically for deserialization. Choosing this over an explicit setter for the augmented information that are not a part of original API response."}
{"iteration": 5, "tag": "no", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/595#discussion_r45962425", "body": "This error message does not contain the key, which will be painful to debug. While it is a pain, I think the calling code should be changed to not use streams in order to make the key available.\n"}
{"iteration": 5, "tag": "no", "repo": "hortonworks/cloudbreak", "url": "https://github.com/hortonworks/cloudbreak/pull/13112#discussion_r934614480", "body": "I will add. Seeing the usage of @ValidStackNameFormat @ValidStackNameLength, they are followed by @NotNull as well."}
{"iteration": 5, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/5255#discussion_r845757061", "body": "iiuc, even in this scenario, without this patch, `reset` would be called and it would return w/o resetting but then `unlock` would also be called which we don't want. And this patch fixes this behavior. So, can we verify that not only state is not reset but also `unlock` is not called?"}
{"iteration": 5, "tag": "no", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/4472#discussion_r362773273", "body": "x is from an entryset in the map, the entry cannot be null.. in fact even the key cannot be null in a map. "}
{"iteration": 5, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/8614#discussion_r134410551", "body": "You could reorder hashing so that if follow order in equals. This helps verifying they agree.\r\nBest if they followed order of fields, but let's not change this _now_, to be on the safe side."}
{"iteration": 5, "tag": "no", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/4991#discussion_r204380515", "body": "The mapping doesn't have to be one-to-one, so reference versions without an official gencode release would point at whatever gencode version they do use in `Funcotator`.\r\n\r\nBigger-picture, the only reason this is needed is to derive names for the gencode funcotations on each variant. hg19 vs. hg38 seemed more user-friendly than taking the raw gencode version (which is buried in the data source). Are there any utils for extracting out the gencode stuff from a `FuncotationMap` which abstract over the version number? I could find code for building/writing, but not reading/parsing."}
{"iteration": 5, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/11749#discussion_r442494577", "body": "It looks like we overwrite the setExtractOutputTimestampFn regardless of whether the experiment is enabled or not which doesn't align with what the comment is telling us."}
{"iteration": 5, "tag": "yes", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/11535#discussion_r771046685", "body": "Nit: `log.warn(\"Could not decode offset metadata.\")`\r\n\r\nI think it's better not to log `encryptedString` as we don't know what's in it, and we could potentially leak sensitive information."}
{"iteration": 5, "tag": "no", "repo": "hashgraph/hedera-mirror-node", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/4018#discussion_r912298702", "body": "nit: `@RequiredArgsConstructor` redundant when used with `@Value`"}
{"iteration": 5, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/16947#discussion_r916997350", "body": "This is public and not `@Internal` so technically we shouldn't just remove it outright. That being said this and `SendMessageRequestCoder`, `MessageCoder` are pretty clearly internal coders for use in their respective IOs, so it's probably fine.\r\n\r\nI'll leave it up to you - if you want you could mark these coders deprecated and schedule them for removal in a later release."}
{"iteration": 5, "tag": "no", "repo": "apache/dolphinscheduler", "url": "https://github.com/apache/dolphinscheduler/pull/5422#discussion_r627265413", "body": "Rename to `AuthUtils`, consistent with other naming"}
{"iteration": 5, "tag": "language", "repo": "skiptests/astraea", "url": "https://github.com/skiptests/astraea/pull/298#discussion_r850485154", "body": "\u9019\u500b\u8a0e\u8ad6\u8ddfhttps://github.com/skiptests/astraea/pull/298#discussion_r850478642 \u7684\u7d50\u8ad6\u6709\u95dc\uff0c\u5982\u679c\u64cd\u4f5cbean collector\u771f\u7684\u6709\u6548\u80fd\u554f\u984c\uff0c\u90a3\u518d\u56de\u982d\u770b\u9019\u4e00\u6bb5\u7a0b\u5f0f\u78bc"}
{"iteration": 5, "tag": "no", "repo": "geoserver/geoserver", "url": "https://github.com/geoserver/geoserver/pull/3894#discussion_r347252833", "body": "All parameters that need to be present for the server to work properly should be in the main information set, not in the metadata map (it was a mistake to put them there if there is no automatic fallback), as the metadata map is for \"optional extras\". If not set, the server should be able to do something sane on the fly, or auto-configure the values if missing. Whether this belongs in a separate PR or not, depends on the amount of rework required."}
{"iteration": 5, "tag": "unclear", "repo": "Consensys/teku", "url": "https://github.com/Consensys/teku/pull/1391#discussion_r394060428", "body": "Similar to above perhaps Eth1EncryptedKeystoreOptions"}
{"iteration": 5, "tag": "yes", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471598212", "body": "How would code signing help in this case? A couple ideas:\r\n1. Kernel has a list of hardcoded whitelisted components that are allowed to run inside kernel JVM;\r\n2. The plugin directory is protected by file system permission and only kernel runas can access. "}
{"iteration": 5, "tag": "no", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/4156#discussion_r344642875", "body": "Here you dont need to make a new HashSet, instead just use readableAttributeCopy = readableAttributeCopy.stream().filter()...\r\n\r\nI think this is a bit cleaner, since readableAttributeCopy will actually be a copy all the way."}
{"iteration": 5, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/722#discussion_r205639583", "body": "The credential source might be clearer as `jib-maven-plugin <from><auth> configuration` or something."}
{"iteration": 5, "tag": "yes", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/23617#discussion_r694235074", "body": "I was considering that, but would it be too much information exposed to the user. Would the full-fledged access to the `context`  not be a problem if they decide to \"change\" any of the other information associated with it which doesn't exactlt affect the RedirectPolicy?"}
{"iteration": 5, "tag": "yes", "repo": "spotify/styx", "url": "https://github.com/spotify/styx/pull/352#discussion_r160180714", "body": "Maybe we can. Our server side code doesn't really check whether the change is successful, and in case of concurrent modification http code can be lying. Maybe too paranoid."}
{"iteration": 5, "tag": "unclear", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/12846#discussion_r1039441425", "body": "Added coverage for the `isSecure` method."}
{"iteration": 5, "tag": "unclear", "repo": "apache/knox", "url": "https://github.com/apache/knox/pull/437#discussion_r617633095", "body": "I was thinking that we would leave this as token.id and add a passcode col that was a hash."}
{"iteration": 5, "tag": "no", "repo": "scalar-labs/scalardb", "url": "https://github.com/scalar-labs/scalardb/pull/441#discussion_r783652214", "body": "We need it as well, the scan test with the range also includes the order in the query but seems the `two` keyword I used does not affect the query in this case. I change the keyword to `select` then the test failed. I added the quote for ordering and changed the column name as well [commit](https://github.com/scalar-labs/scalardb/pull/441/commits/2d136ee2f33c57a51b6b960ad43363529968faa7)"}
{"iteration": 5, "tag": "unclear", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/3799#discussion_r740810002", "body": "We should never query for private IPs."}
{"iteration": 5, "tag": "language", "repo": "skiptests/astraea", "url": "https://github.com/skiptests/astraea/pull/1449#discussion_r1082117971", "body": "\u4e0d\u597d\u610f\u601d\uff0c\u8acb\u554f\u5916\u570d\u662f\u4ec0\u9ebc\u610f\u601d"}
{"iteration": 5, "tag": "unclear", "repo": "SpongePowered/SpongeAPI", "url": "https://github.com/SpongePowered/SpongeAPI/pull/580#discussion_r30184251", "body": "Agreed. It's best to have it default to true because performing too many direct requests to Mojang servers can cause the the server to be blacklisted from accessing the API.\nMost developers will most likely prefer to use `get(UUID uniqueId)` which will be a lot safer and avoid this risk. \n"}
{"iteration": 5, "tag": "unclear", "repo": "openjdk/crac", "url": "https://github.com/openjdk/crac/pull/69#discussion_r1251645028", "body": "Functionally it's used to mark the socket as invalid, and I've kept the FD number for debugging, but I can remove that..."}
{"iteration": 5, "tag": "yes", "repo": "eclipse/kura", "url": "https://github.com/eclipse/kura/pull/4872#discussion_r1356248286", "body": "Just a question: are we sure we won't be leaking any sensitive info by logging this exception?\r\n\r\nAlso: catching `Exception` is a bad practice. We should always try to catch a specific type of exception."}
{"iteration": 5, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/1412#discussion_r95233526", "body": "Currently, Windows OS paths in non-URI format don't work. It breaks when our code resolves *.\r\n\r\nI would like FileBasedSource/Sink to use URI, and TextIO/AvroIO own the conversion from users string to URI.\r\n\r\nFor users' convenience, we can try converting Windows OS path to the URI format in TextIO/AvroIO for some common cases."}
{"iteration": 5, "tag": "no", "repo": "devs-immortal/Paradise-Lost", "url": "https://github.com/devs-immortal/Paradise-Lost/pull/791#discussion_r1589867865", "body": "Ensure thread safety when modifying the `blocks` set.\n\nThe conversion of `blocks` from an `ImmutableSet` to a `HashSet` allows for mutability but does not ensure thread safety. Consider using a thread-safe variant like `ConcurrentHashMap.newKeySet()` if concurrent modifications are expected.\n\n<!-- This is an auto-generated comment by CodeRabbit -->"}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12867#discussion_r453949528", "body": "I thought we got rid of the span name `readUDF` and should be using the same public API name for user -API visibility concerns."}
{"iteration": 5, "tag": "no", "repo": "apache/geode", "url": "https://github.com/apache/geode/pull/1249#discussion_r160320130", "body": "Maybe Instead of making the change here, it would be better for the caller of the constructor to pass in a File object that's not created using an implicit user.dir. Anywhere in our product, we should avoid creating File object using new File(\"name.log\"), but with new File(parentDir, \"name.log\").\r\n\r\nLike I saw one of the callers of this constructor is as follows:\r\npublic void resetInternalLocatorFileNamesWithCorrectPortNumber(int port) {\r\n    this.stateFile = new File(\"locator\" + port + \"view.dat\");\r\n    File productUseFile = new File(\"locator\" + port + \"views.log\");\r\n    this.productUseLog = new ProductUseLog(productUseFile);\r\n  }\r\n\r\nwe should change that into: \r\n\r\npublic void resetInternalLocatorFileNamesWithCorrectPortNumber(int port) {\r\n    this.stateFile = new File(System.getProperty(\"user.dir), \"locator\" + port + \"view.dat\");\r\n    File productUseFile = new File(System.getProperty(\"user.dir), \"locator\" + port + \"views.log\");\r\n    this.productUseLog = new ProductUseLog(productUseFile);\r\n  }"}
{"iteration": 5, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/7349#discussion_r610193037", "body": "This class should be private and static."}
{"iteration": 5, "tag": "no", "repo": "IQSS/dataverse", "url": "https://github.com/IQSS/dataverse/pull/9684#discussion_r1572496546", "body": "I added the alt global id lookup."}
{"iteration": 5, "tag": "unclear", "repo": "bazelbuild/bazel", "url": "https://github.com/bazelbuild/bazel/pull/13604#discussion_r670862013", "body": "As much as removing checks is scary -- I think that's the right call -- it looks like this boolean literally protects against the metadata cache only (am I missing something?). We set it right after the metadata cache check and start with false otherwise.\r\n\r\nIf the metadata handler was to hand around after, we could consider a tri-state here maybe (checking cache -> cache hit/execution), but I don't see the point."}
{"iteration": 5, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/12905#discussion_r1572951324", "body": "Agreed, we can put `userTransactionRecordBuilder.nullOutSideEffectFields();` after `rollback` and before `chargeFees`. It should not cause any issue, will be an extra safety step."}
{"iteration": 5, "tag": "yes", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/13848#discussion_r790073520", "body": "Can be done in a future PR, but can we add a volume prefix for security-sensitive custom volumes which should be mounted to sidecar/privileged containers but not containers which run user code? That would make it a bit more flexible for us in the future."}
{"iteration": 5, "tag": "no", "repo": "spotify/helios", "url": "https://github.com/spotify/helios/pull/717#discussion_r43175263", "body": "Random note: I had a hard time figuring out that the `AgentProxy.sign()` method does the SHA1-hashing (as opposed to the content signer doing the hashing somewhere in the super class and then sending the hash for signing). It's not very apparent from the `AgentProxy` interface that it will hash and sign.\n"}
{"iteration": 5, "tag": "no", "repo": "smithy-lang/smithy", "url": "https://github.com/smithy-lang/smithy/pull/1285#discussion_r906212149", "body": "I don't think I understand this validation. CfnRootResourceIdTrait can only be attached to members of a structures, so why would the member's shape ID start with \"List\" or \"list\"?"}
{"iteration": 5, "tag": "no", "repo": "eclipse-hono/hono", "url": "https://github.com/eclipse-hono/hono/pull/1842#discussion_r400966116", "body": "I guess that is the reason why the example registry uses UUID for the version in the first place :-) A new UUID can be computed independently from the existing version ...\r\nSo where does this leave us? We stick with the UUID or do you want to use the *auto increment* feature of MongoDB?"}
{"iteration": 5, "tag": "no", "repo": "linkedin/brooklin", "url": "https://github.com/linkedin/brooklin/pull/632#discussion_r313046133", "body": "We can go ahead with this for time being. In the long term we probably want the dedup logic to take metadata into consideration. With this implementation we have inconsistency that only events without metadata get deduped. Also there is no way for someone to know about this behavior unless checking out the code. "}
{"iteration": 5, "tag": "yes", "repo": "spring-projects/spring-authorization-server", "url": "https://github.com/spring-projects/spring-authorization-server/pull/96#discussion_r460798917", "body": "It seems to be using `secureRandom()` so it's as good as it gets IMO."}
{"iteration": 5, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/1456#discussion_r601666866", "body": "I discovered that it didn't work when I disabled AsyncContext for debugging. I am not sure it needs to be documented because disabling AsyncContext isn't something that applications would do (I could be wrong in this assumption) and that when the ServiceTalks devs disable it they would understand that there might be behavioral differences."}
{"iteration": 5, "tag": "unclear", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403744640", "body": "I'm not sure that `s.disconnect()` should be called asynchronously as part of disposing. Any essential cleanup should be done immediately because `initialize()` might be called immediately afterward and any socket resources getting initialized might collide with the socket resources that are getting disposed.\r\n\r\nBut I'm not sure if such a change is within the scope of this PR..."}
{"iteration": 5, "tag": "language", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/6740#discussion_r1595302847", "body": "Het ophalen van de canonical name kan voor extra compute zorgen bij sommige fs impl.\r\n```suggestion\r\n\t\t\t\tlog.debug(\"removing current destination file [{}]\", () -> fileSystem.getCanonicalName(destination));\r\n```"}
{"iteration": 5, "tag": "no", "repo": "gchq/Gaffer", "url": "https://github.com/gchq/Gaffer/pull/2521#discussion_r761068645", "body": "I agree but strangely enough when I change the type to String I get an error as it is overriding `HashMap` and the signature is `public V get(java.lang.Object arg0)`"}
{"iteration": 5, "tag": "no", "repo": "codenvy/codenvy", "url": "https://github.com/codenvy/codenvy/pull/501#discussion_r76435029", "body": "There is no default timeout in this request. Theoretically `dockerConnector.getSystemInfo()` can freeze without timeout. Such request should be performed not longer than 5 seconds.\n"}
{"iteration": 5, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/1127#discussion_r224221153", "body": "if the app starts and quits, there is nothing to debug w/ the debugger agent.\r\n\r\ni'd recommend running it as a longer running server that responds to a request. otherwise, the debugger agent will never be registered/used properly."}
{"iteration": 5, "tag": "language", "repo": "BukkitAPI-Translation-Group/Chinese_BukkitAPI", "url": "https://github.com/BukkitAPI-Translation-Group/Chinese_BukkitAPI/pull/4#discussion_r141838391", "body": "\u5176\u5b9e\u53ea\u8981\u52a0\u5165 \u201d\u6240\u6709\u201c \u5e76\u79fb\u9664 \u201d\u6210\u529f\u201c \u5c31\u597d\u4e86\u3002"}
{"iteration": 5, "tag": "no", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/837#discussion_r242669213", "body": "I don't think it's really necessary to use this annotation, especially  in classes that aren't public API. It will be obvious that it's needed for testing, because removing it will affect a test. An inline comment serves the same purpose, but without the dependency on guava."}
{"iteration": 5, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/14762#discussion_r448519495", "body": "need to add check that the length after encryption does not exceed what the header can hold, ie 2^23"}
{"iteration": 5, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/106076#discussion_r1523934871", "body": "I'm worried that in the future if this were to break and throw exceptions, it would wedge a node from starting up or something, or else spam the logs forever and ever. I sent you an alternative idea, what do you think of that?"}
{"iteration": 5, "tag": "no", "repo": "typetools/checker-framework", "url": "https://github.com/typetools/checker-framework/pull/1167#discussion_r107598925", "body": "I would be inclined to drop \"OrNull\" from all the method names, on the theory that developers writing client code will read the documentation.  I would drop it from variable names as well (such as in `addAnnotationToPlus`); a tool such as the Nullness Checker could ensure that nullness is handled correctly without the need for variable names to remind the reader.\r\n\r\nCan you cut \"FromTree\" from the name as well?\r\n\r\nI think the client code will be more readable with shorter names."}
{"iteration": 5, "tag": "no", "repo": "VoltDB/voltdb", "url": "https://github.com/VoltDB/voltdb/pull/5470#discussion_r204498746", "body": "We do actually have $$_VOLT_TEMP_TABLE_$$ as a static variable,  but we couldn't directly use that in the replaceAll function (error: illegal group reference) since the dollar sign needs escaping.  I prefer to fill the hard-type string here."}
{"iteration": 5, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/965#discussion_r23040868", "body": "Used Sets and added equals and hashCode.\n"}
{"iteration": 5, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/7679#discussion_r577563884", "body": "Prefer using constants from `org.jboss.resteasy.util.HttpHeaderNames`.\r\n\r\nAlso, the `Response` type from JAX-RS should give you methods to set the cache-control as well as any other header, without having to deal with the HttpResponse directly."}
{"iteration": 5, "tag": "broken", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/3337#discussion_r23280159", "body": "I wonder if we need to make clear that the user not need to check for enough bytes in the buffer ?\n"}
{"iteration": 5, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/6704#discussion_r416240135", "body": "@pedroigor \r\n> By removing this you are forcing users to consent again. Is that on purpose?\r\n\r\nYes. A user revokes a token because the user doesn't want the client to use it, so the relationship between the user and the client should be broken off and also the consent should be removed."}
{"iteration": 5, "tag": "broken", "repo": "rhq-project/rhq", "url": "https://github.com/rhq-project/rhq/pull/61#discussion_r14230158", "body": "Those are not your RHA credentials, it's a token (maybe time limited) that allows to interract with RHA API. I don't see any potential harm in this - if using bulletproof SSL then it's completely secure.\n"}
{"iteration": 5, "tag": "no", "repo": "SonarSource/sonarlint-core", "url": "https://github.com/SonarSource/sonarlint-core/pull/145#discussion_r148753110", "body": "One reason we silently ignored these errors was obviously to avoid any kind of noise from telemetry for users. Imagine that reason doesn't exist. Would we log such errors at any level other than debug? I'm not sure.\r\n\r\nBut anyway, I will change all these to `error` level now, to make sure we see them if they ever happen. These should probably never happen, and when they do, we want to know."}
{"iteration": 5, "tag": "language", "repo": "skiptests/astraea", "url": "https://github.com/skiptests/astraea/pull/478#discussion_r920330464", "body": "\u5982\u679c\u4e0d\u662f\u8981\u7279\u5225\u5be6\u4f5cfluent pattern\u7684\u8a71\uff0c\u53ef\u5426\u5c31\u76f4\u63a5\u6524\u958b\u65b9\u6cd5\u653e\u5728`Admin`\u5c31\u597d\uff1f"}
{"iteration": 5, "tag": "unclear", "repo": "connectbot/connectbot", "url": "https://github.com/connectbot/connectbot/pull/454#discussion_r90121800", "body": "Using minimum retry interval here because it remains constant and this is to wait on the SSH connect which should be more of a known value and not exceed ~30 sec.  The sleepVal grows to address more general network issues which may not as quickly resolve."}
{"iteration": 5, "tag": "language", "repo": "woowacourse-teams/2020-6rinkers", "url": "https://github.com/woowacourse-teams/2020-6rinkers/pull/30#discussion_r458612938", "body": "file\uc744 \ubc1b\uc544\uc11c \ub0b4\ubd80\uc5d0\uc11c OpenCsvReader\ub85c \ubcc0\ud658\uc2dc\ucf1c\uc8fc\ub294 \uc815\uc801 \ud329\ud1a0\ub9ac \uba54\uc11c\ub4dc\ub97c \uc81c\uac70\ud588\uc2b5\ub2c8\ub2e4.\r\n\r\n\uadf8\ub9ac\uace0 \uc0dd\uc131\uc790\uc5d0 \uc778\ud130\ud398\uc774\uc2a4 CsvReader \ud0c0\uc785\uc758 \uad6c\ud604\uccb4\ub97c \ub123\uc5b4\uc8fc\ub3c4\ub85d \uc218\uc815\ud588\uc2b5\ub2c8\ub2e4.\r\n"}
{"iteration": 5, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/13618#discussion_r1600642643", "body": "> Would it be appropriate to remove only these two files which have locale dependent parsing?\r\n\r\nThat would basically means no checksum check, right? May be we could do this:\r\n - have a special case of empty checksum, so these files would be parsed but not verified\r\n - or, make checksum locale dependent, in this case if locale is different from what checksum supports, files would be parsed but not verified"}
{"iteration": 5, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/10579#discussion_r664866782", "body": "The test for closing seem unnecessary since closing can't change while synchronized on assignPartitionsLock."}
{"iteration": 5, "tag": "no", "repo": "UweTrottmann/tmdb-java", "url": "https://github.com/UweTrottmann/tmdb-java/pull/44#discussion_r118162617", "body": "This method needs to remain public and static to allow re-use in a custom written interceptor. I use this in SeriesGuide where I have a single interceptor for multiple APIs."}
{"iteration": 5, "tag": "unclear", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/11329#discussion_r1405172460", "body": "This would leave even the deleted indices data undeleted and leaked . A way to prevent would be to check this in `RemoteStoreRefreshListener` . "}
{"iteration": 5, "tag": "yes", "repo": "conveyal/r5", "url": "https://github.com/conveyal/r5/pull/718#discussion_r606941389", "body": "This explains the meaning of the Vary header, but not necessarily the purpose of adding it here, considering that in normal operation all requests come from the same origin. Is this intended to mitigate risk of web cache poisoning attacks? Under what circumstances would that be a concern, considering that this PR makes it possible to strictly constrain the allowed origins anytime authentication is not in use?"}
{"iteration": 5, "tag": "yes", "repo": "streamnative/pulsar-flink", "url": "https://github.com/streamnative/pulsar-flink/pull/387#discussion_r709286482", "body": "In the source, no encryption keys are required. Added serialization check."}
{"iteration": 5, "tag": "no", "repo": "qbicc/qbicc", "url": "https://github.com/qbicc/qbicc/pull/772#discussion_r741928881", "body": "Following up to the above note, the visitor and copy methods should be retained."}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/22082#discussion_r92170874", "body": "also MultiGetResponse was using this, but I just removed the startObject and endObject from it."}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434202628", "body": "Is it possible to just have 2 constructors and maybe SSLContext can be set to null in ClientOptions if user does not want to use it?"}
{"iteration": 5, "tag": "no", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/12736#discussion_r1579739005", "body": "We can just make the parent `Set<TokenKeys>` fields `protected` and delete this one."}
{"iteration": 5, "tag": "broken", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/3734#discussion_r71789567", "body": "I would vote for `PropertyKeys`, since `Property` implies both the key and value?\n"}
{"iteration": 5, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/5264#discussion_r689583076", "body": "We could pass the exception as parameter here."}
{"iteration": 5, "tag": "no", "repo": "strimzi/strimzi-kafka-bridge", "url": "https://github.com/strimzi/strimzi-kafka-bridge/pull/734#discussion_r1055507772", "body": "no hurt to change that even if `commit` is just the same name as used in the Java Kafka client having the same behaviour. "}
{"iteration": 5, "tag": "no", "repo": "Consensys/teku", "url": "https://github.com/Consensys/teku/pull/1132#discussion_r375467359", "body": "We can't use `volatile` because `active` and `requestQueued` need to be changed in-sync - particularly the `if (active) requestQueued = true` on lines 84-85 need to be an atomic block but can't be if a different thread changes `requestQueued` without acquiring the same lock via synchronised.\r\n\r\nIf `getLatestDeposits` was only called from within synchronised blocks then this wouldn't be required."}
{"iteration": 5, "tag": "no", "repo": "crate/crate", "url": "https://github.com/crate/crate/pull/15489#discussion_r1471002511", "body": "Moved outside but didn't make the method static - otherwise would have to make `authError` static as well which is dangerous as we can create multiple instances of `HostBasedAuthHandler`.\r\n\r\nAlso renamed to `closeAndThrowAuthError`"}
{"iteration": 5, "tag": "language", "repo": "woowacourse-teams/2020-6rinkers", "url": "https://github.com/woowacourse-teams/2020-6rinkers/pull/136#discussion_r472895966", "body": "\ub17c\ub9ac\uc5f0\uc0b0\uc790 \ubd80\ubd84\uc740 \uc6b0\uc120\uc21c\uc704\ub97c \ud63c\ub3d9\ud558\uae30 \uc26c\uc6b4 \ubd80\ubd84\uc774\ub77c \uc18c\uad04\ud638\ub97c \uccd0\uc8fc\ub294\uac8c \ub354 \uc88b\uc744\uac83 \uac19\uc544\ubcf4\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4.\r\n```suggestion\r\n\t\treturn (abv >= min) && (abv <= max);\r\n```"}
{"iteration": 5, "tag": "no", "repo": "apache/incubator-kie-optaplanner", "url": "https://github.com/apache/incubator-kie-optaplanner/pull/556#discussion_r326570087", "body": "Should be private so that clients don't have access to a constructor that accepts `null` arguments."}
{"iteration": 5, "tag": "language", "repo": "TencentBlueKing/bk-job", "url": "https://github.com/TencentBlueKing/bk-job/pull/2616#discussion_r1403821473", "body": "\u589e\u91cf API \u9700\u8981\u4f7f\u7528\u66f4\u52a0\u6807\u51c6\u7684\u65b9\u5f0f\uff1a\r\n1. \u6821\u9a8c\u57fa\u7840\u5b57\u6bb5\uff0c\u5e94\u8be5\u7528 spring validator\r\n2. \u6821\u9a8c\u8d44\u6e90\u662f\u5426\u5b58\u5728\uff0c\u5e94\u8be5\u653e\u5728 Service, Controller \u5c42\u5e94\u8be5\u53ea\u6709\u4e00\u4e9b\u57fa\u7840\u53c2\u6570\u6821\u9a8c\uff0c\u53c2\u6570\u8bbe\u7f6e\uff0c\u7ed3\u679c\u5c01\u88c5\u7b49\u57fa\u7840\u529f\u80fd\u3002"}
{"iteration": 5, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/1276#discussion_r314428291", "body": "The `toString()` for `Class` will prefix with `class` or `interface`, so you want to use `getName()`. Also, it's better to put the variable part of the message at the end of the error, to make it easier to search for the error string.\r\n```java\r\nthrow new RuntimeException(\"Signer class not found: \" + signerClass.getName(), e);"}
{"iteration": 5, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/10417#discussion_r204495406", "body": "this is already done to generate the stop key, better to just do it the one time and only check if lastProgramRunId is set."}
{"iteration": 5, "tag": "no", "repo": "hierynomus/smbj", "url": "https://github.com/hierynomus/smbj/pull/110#discussion_r123982695", "body": "Rename to `writeDirectTcpPacketHeader`. This is not only the size, but also a leading `0` byte. See the [MS-SMB2] spec section 2.1"}
{"iteration": 5, "tag": "language", "repo": "Hurence/logisland", "url": "https://github.com/Hurence/logisland/pull/583#discussion_r659882631", "body": "Ici on as un costructeur utilis\u00e9 dans le test unitaire.\r\nPour nos tests le schema sera enregistr\u00e9 au nom du suject `logisland_events`\r\n\r\nAvec la schema registry il peut y avoir dans le meme topic plusieurs schema differentes, car a chaque message il y as un schema id associ\u00e9"}
{"iteration": 5, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1068#discussion_r702186506", "body": "Michael's comment about logging commands applies here too (even if it's just at trace)"}
{"iteration": 5, "tag": "unclear", "repo": "linkedin/datahub-gma", "url": "https://github.com/linkedin/datahub-gma/pull/260#discussion_r1218652659", "body": "it's unnecessary for SQL read, unless you have mutli query statements and you want to secure the roles in the middle. But as it shouldn't cause any harm neither. Given this is debugging code, let's leave with this."}
{"iteration": 5, "tag": "unclear", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/6600#discussion_r557801375", "body": "Would anyone ever run an OAuth service over plain HTTP?"}
{"iteration": 5, "tag": "no", "repo": "apache/cassandra", "url": "https://github.com/apache/cassandra/pull/1027#discussion_r681314295", "body": "@smiklosovic It makes sense but let me think little bit more. DefaultSslContextFactoryImpl will be initialized twice because it is under each encryption options - for client and server. However, making the HotReloadableFile list an instance variable might still make sense instead of static and immutable."}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/98974#discussion_r1311596637", "body": "It's safe. Or, rather, we make sure it is safe by the way we write the system. `BytesRef` is a mutable slice of a mutable set of bytes. You have to use it of copy it immediately and our functions do that. Even the aggs ones."}
{"iteration": 5, "tag": "no", "repo": "vert-x3/vertx-examples", "url": "https://github.com/vert-x3/vertx-examples/pull/220#discussion_r132412028", "body": "Ditto as above, using \"localhost\" or 127.0.0.1 and BROKER_HOST name"}
{"iteration": 5, "tag": "no", "repo": "google/sagetv", "url": "https://github.com/google/sagetv/pull/71#discussion_r50198533", "body": "Calling hasHint() outside of the synchronized block should be perfectly\nfine.  The state may get updated simultaneously with that check..but it\nwon't get cleared, so the return value from hasHint() is still valid\noutside the sync block. I did want to avoid grabbing the lock every time\nthis checks.  The purpose of the synchronization was two-fold:\n1. Ensure that all fields of MenuHint are from a single call to setMenuHint\n   when creating the format(). This is achieved by synchronizing the call to\n   format() as well as setMenuHint().\n2. Ensure that when you clear() the MenuHint structure, that you are\n   clearing what you already took the format for (so you don't get the\n   format() from a prior setMenuHint(), then a new hint is set, and then you\n   clear it and never end up sending the new hint).  This is achieved by\n   having format() and clear() in the same sync block.\n\nIt's fine the way you have it now...it's not like one extra lock for each\nrendering cycle is going to hurt anything...there's tons of locking already\nthat happens on each render cycle. :)  I'll approve it the way it is, I\njust explained things above so you understood my line of thinking.  Of\ncourse my solution suffers from only focusing on the singular usage that\ncurrently is there...yours is more robust for other usages that may come in\nlater. :)\n\nOn Tue, Jan 19, 2016 at 3:56 PM, Sean Stuckless notifications@github.com\nwrote:\n\n> In java/sage/MiniClientSageRenderer.java\n> https://github.com/google/sagetv/pull/71#discussion_r50195941:\n> \n> > @@ -1328,6 +1328,33 @@ private boolean checkForAudioOutputChangeUpdates()\n> >      return true;\n> >    }\n> > -  private boolean checkForMenuHintUpdates()\n> > -  {\n> > -    String hintText;\n> > -    synchronized (menuHint) {\n> > -      hintText=menuHint.format();\n> > -      menuHint.clear();\n> > -    }\n> > -    if (hintText!=null)\n> \n> That's a good point, but, calling hasHint outside of the syncronized block\n> seems to defeat the purpose of actually synchronizing in the first place. I\n> think that format() should return null if there is no hint, and that way\n> the entire acess to menuHint remains within a sync block. Otherwise, I have\n> to put al the code if if(menuHint.hasHint()) inside of a sync block and my\n> feeling was that would be holding the lock for too long.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/sagetv/pull/71/files#r50195941.\n\n## \n\nJeffrey Kardatzke\njkardatzke@google.com\nGoogle, Inc.\n"}
{"iteration": 5, "tag": "no", "repo": "cgeo/cgeo", "url": "https://github.com/cgeo/cgeo/pull/6485#discussion_r110995968", "body": "I'll add a check to be on the safe side"}
{"iteration": 5, "tag": "no", "repo": "junit-team/junit4", "url": "https://github.com/junit-team/junit4/pull/866#discussion_r11834534", "body": "See commit message of 88f7a12d472b1157639db5148b29c8a8825802a3\n"}
{"iteration": 5, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/628#discussion_r202843351", "body": "Should probably note why this is epoch by default or have this be `@Nullable`, preferring the latter since by spec, this is an optional field and the setting to 0 should be a default passed in from `BuildConfiguration`"}
{"iteration": 5, "tag": "language", "repo": "TencentBlueKing/bk-job", "url": "https://github.com/TencentBlueKing/bk-job/pull/1691#discussion_r1093990675", "body": "\u903b\u8f91\u4e0d\u5bf9\uff0c\u4f1a\u5c06\u5176\u4ed6\u7c7b\u578b\u5f02\u5e38\u5168\u90e8\u5f53\u505aInternalCmsiException\uff0c\u8fd9\u91cc\u53c2\u8003\u5176\u4ed6\u7f13\u5b58\u5f02\u5e38\u7684\u5904\u7406\u65b9\u5f0f"}
{"iteration": 5, "tag": "language", "repo": "metersphere/metersphere", "url": "https://github.com/metersphere/metersphere/pull/17927#discussion_r972883344", "body": "\u5efa\u8bae\u4f7f\u7528\u5de5\u5177\u7c7b\u8fdb\u884c\u5224\u65ad"}
{"iteration": 5, "tag": "no", "repo": "strimzi/strimzi-kafka-bridge", "url": "https://github.com/strimzi/strimzi-kafka-bridge/pull/836#discussion_r1342679935", "body": "HTTP Content-Type (bringing the Media type) is something that you can define for your own application. There are some standard ones like `text/plain`, `application/json` and so on but it doesn't mean that you can't create your own.\r\nThe Strimzi bridge has its own content type. You can understand that because of the `vnd.` prefix which means to be vendor specific (this case Strimzi specific) and it defines a \"Subtype\".\r\nAlso the `+json` suffix specifies the structure of the media type to be always JSON.\r\nSo you will never find information about `application/vnd.kafka.text.v2+json` out of Strimzi project.\r\nMore details here: https://en.wikipedia.org/wiki/Media_type"}
{"iteration": 5, "tag": "broken", "repo": "cloudfoundry/uaa", "url": "https://github.com/cloudfoundry/uaa/pull/90#discussion_r13505922", "body": "Set to true if we allow null values for passwords in the generated token. There are some events that throw NPE when this happens.\n"}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/10656#discussion_r28651421", "body": "if it's mutable should we make it volatile just for being on the safe side?\n"}
{"iteration": 5, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/4319#discussion_r164942158", "body": "Is this right? I thought byte[] would be encoded as base64? this call is guaranteed to be successful, but it will just replace \"malformed\" data with the default replacement string, which almost certainly is not what a user would want."}
{"iteration": 5, "tag": "no", "repo": "zaproxy/zap-extensions", "url": "https://github.com/zaproxy/zap-extensions/pull/51#discussion_r41832692", "body": "This method should be removed. I's not being used nor the \"other\" message defined.\n"}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/102925#discussion_r1417056318", "body": "I suggest we keep the behavior to not search the LDAP entry for attributes if both `user_full_name_attribute` and `user_email_attribute` are empty, like: `if (Strings.isEmpty(this.fullNameAttributeName) && Strings.isEmpty(this.emailAttributeName) && this.attributeNames.isEmpty()) { listener.onResponse(LdapMetadata.EMPTY); return; }`.\r\n\r\nFor the AD realm, in the default case, we're going to add an attribute search where there wasn't any before.\r\nI think that's an OK decision weighting it against consistent experience with the LDAP realm, and the UX with profiles of LDAP/AD users. But still there must be a way to configure ES to avoid it completely."}
{"iteration": 5, "tag": "no", "repo": "camunda/camunda-bpm-platform", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1519#discussion_r679085826", "body": "We could log the call activity id and/or the calling process id. Though we would have to pass them to the method just for that, which is fine I guess. We could also pass up the exception. Though I kind of like the semantics that it returns null if no fitting process can be found. "}
{"iteration": 5, "tag": "no", "repo": "lucko/spark", "url": "https://github.com/lucko/spark/pull/396#discussion_r1569467281", "body": "Just added logging capabilities so we can get more detailed warnings and errors for debugging purposes"}
{"iteration": 5, "tag": "broken", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/1161#discussion_r11688366", "body": "This looks like it would be a major incompatibility. Can `@` be left raw? AFAIK it is safe on most filesystems. Otherwise if any security realms actually switch to `CaseSensitiveEmailAddress` (which I think many should), existing user records are not going to be loadable.\n"}
{"iteration": 5, "tag": "no", "repo": "eclipse/hawkbit", "url": "https://github.com/eclipse/hawkbit/pull/493#discussion_r113137693", "body": "Better split this into two variables: `DEFAULT_USER` and `DEFAULT_PASSWORD`. Than code gets more readable."}
{"iteration": 5, "tag": "unclear", "repo": "apache/geode", "url": "https://github.com/apache/geode/pull/3276#discussion_r263867873", "body": "At this point you need to ensure you're picking up and using the SSL options that have been set on this server."}
{"iteration": 5, "tag": "no", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/2844#discussion_r355404641", "body": "Should add a comment, that the payload must not be null, otherwise we need to check for non null values everywhere `load()` is used."}
{"iteration": 5, "tag": "unclear", "repo": "TGX-Android/Telegram-X", "url": "https://github.com/TGX-Android/Telegram-X/pull/38#discussion_r707176580", "body": "Ability to limit output bitmap size (which is set via ImageFile#setSize) is missing here. If the default ones specified inside SVG file are used, this could cause OOM, as the file could be malformed."}
{"iteration": 5, "tag": "broken", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/40746#discussion_r1477638639", "body": "The most risky bug in this code is:\nIncorrect handling of session variables and user variables leading to potential state inconsistency.\n\nYou can modify the code like this:\nEnsure proper restoration and cleanup of session and user variables after query execution to prevent state leakages or inconsistencies. Unfortunately, without a specific line that clearly contains a traditional \"bug\" (like a syntax error, logical error, etc.), giving a precise code correction is challenging. However, the concern indicated revolves around ensuring that any temporary changes (like those made for hints) to both session variables and user variables are correctly reverted back at the end of query processing. The provided code snippets do attempt to handle this through methods like `clearQueryScopeHintContext()` and careful management inside `processQueryScopeHint()`. \n\nTo ensure safety and consistency, especially when dealing with context changes due to hints, thorough testing around these functionalities is recommended. Look for edge cases where hints might lead to unexpected behavior, ensuring the application's state remains consistent before and after queries run with such hints.\n\nWhile the given diff does not pinpoint a singular \"most risky bug,\" the general advice is to carefully manage context (session variables, user variables) alterations, reverting any temporary changes post-query execution to uphold application state integrity."}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/4757#discussion_r312247975", "body": "this will need to factor in the `CosmosKeyCredential` pattern that @kushagraThapar added once that gets merged"}
{"iteration": 5, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/7624#discussion_r253203172", "body": "Reworked this test to use a non user counter on the unbounded container"}
{"iteration": 5, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/4812#discussion_r181410527", "body": "Previously, we passed around the interface only to cast it back to `StreamsMetricsImpl` in line 80 of this file. All I did was make TaskMetrics declare that it really does want a `StreamsMetricsImpl` instead of a `StreamsMetrics` explicitly.\r\n\r\nIf we're going to cast it anyway, why not just use the type system?"}
{"iteration": 5, "tag": "language", "repo": "PhantomThief/simple-failover-java", "url": "https://github.com/PhantomThief/simple-failover-java/pull/43#discussion_r584502329", "body": "\u8fd8\u662f\u5e94\u8be5\u8f93\u51fa\u4e00\u4e0b\u65e5\u5fd7\u5427\uff1f"}
{"iteration": 5, "tag": "no", "repo": "google/fhir-data-pipes", "url": "https://github.com/google/fhir-data-pipes/pull/655#discussion_r1172313886", "body": "Can we also have an additional check here to check for the size of token array, so that we don't end up in a ArrayIndexOutOfBoundsException (we are retrieving the timestamp value from token array)."}
{"iteration": 5, "tag": "unclear", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/14044#discussion_r803299742", "body": "This is an interesting nuance. Currently, the `TokenAuthenticationState` class authenticates every token twice: once on class initialization, and again when `authenticate` is called. I think it is good this way."}
{"iteration": 5, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/497#discussion_r44572755", "body": "For easy trouble-shooting and debugging, could we add the host name as prefix to the UUID.\n"}
{"iteration": 5, "tag": "broken", "repo": "spotify/apollo", "url": "https://github.com/spotify/apollo/pull/60#discussion_r46576552", "body": "This is unnecessary, since Apollo will be doing that anyway, and will log the error, which is a better solution than the current one, which discards the stack trace.\n"}
{"iteration": 5, "tag": "broken", "repo": "apache/struts", "url": "https://github.com/apache/struts/pull/607#discussion_r982186586", "body": "## Logging should not be vulnerable to injection attacks\n\n<!--SONAR_ISSUE_KEY:AYODY9tvQiP6RP8X9SmN-->Change this code to not log user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=apache_struts&issues=AYODY9tvQiP6RP8X9SmN&open=AYODY9tvQiP6RP8X9SmN&pullRequest=607\">SonarCloud</a></p>\n\n[Show more details](https://github.com/apache/struts/security/code-scanning/125)"}
{"iteration": 5, "tag": "no", "repo": "hapifhir/hapi-fhir", "url": "https://github.com/hapifhir/hapi-fhir/pull/5113#discussion_r1270794143", "body": "If you really want to catch all exceptions, then we should log the stack trace in case something weird is going on.  Just appending the exception (with `+ e`) will only log the error message, not the whole stack trace.  The stack trace is important debugging information."}
{"iteration": 5, "tag": "no", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/1968#discussion_r76181362", "body": "You will need to call encodeTicketId() here. Cross checks all ops here against other registries and make sure ticket ids are properly encoded/decoded based \n"}
{"iteration": 5, "tag": "no", "repo": "apache/geode", "url": "https://github.com/apache/geode/pull/4436#discussion_r355625310", "body": "Is it possible (and reasonable) to move this check up the call stack, so that the exception message can refer to more public methods?"}
{"iteration": 5, "tag": "broken", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/13269#discussion_r1132193056", "body": "## Disabled Netty HTTP header validation\n\nResponse splitting vulnerability due to header value verification being disabled.\n\n[Show more details](https://github.com/netty/netty/security/code-scanning/73)"}
{"iteration": 5, "tag": "yes", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/2365#discussion_r84939821", "body": "Use `defaultAuthority`. It is what we use for normal requests. It can be overridden during testing, and is guaranteed to be available and correct (HostName is weak, HostString was added in Java 7). The name resolver chooses a single authority given a target URI (like dns:///example.com), but each InetSocketAddress could have it's own host string. For security, we must use the authority chosen initially by the name resolver; each connection should use the same authority (there's some ways around that when other security models are in place, but I don't think they are implemented).\n"}
{"iteration": 5, "tag": "no", "repo": "FabricMC/tiny-remapper", "url": "https://github.com/FabricMC/tiny-remapper/pull/53#discussion_r638441932", "body": "I still think you should make private methods that removes locally given the array list. That way, you don't need to look into the storage map twice, for performance and cleanness concerns."}
{"iteration": 5, "tag": "language", "repo": "woowacourse-teams/2022-dallog", "url": "https://github.com/woowacourse-teams/2022-dallog/pull/106#discussion_r925285586", "body": "`\ub0b4\uac00_\ub4f1\ub85d\ud55c_\uce74\ud14c\uace0\ub9ac\ub97c_\ud398\uc774\uc9d5\uc744_\ud1b5\ud574_\uc870\ud68c\ud55c\ub2e4`\uc5d0\uc11c `tokenResponse.getAccessToken()` \ub9cc\uc774 \uc0ac\uc6a9\ub418\ub294 \uac83 \uac19\uc740\ub370, \uc561\uc138\uc2a4 \ud1a0\ud070\uc744 String \uc73c\ub85c \ubc1b\ub294 \uac83\uc740 \uc5b4\ub5a8\uae4c\uc694?"}
{"iteration": 5, "tag": "broken", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/45039#discussion_r1584587768", "body": "The most risky bug in this code is:\nPotential NullPointerException due to dereferencing `identifierFieldIds` without ensuring it is not null before calling `isEmpty()`.\n\nYou can modify the code like this:\n```java\ndataFiles.add(dataFileCacheWithMetrics ?\n        dataFile.copyWithStats(identifierFieldIds != null && !identifierFieldIds.isEmpty() ? identifierFieldIds : null) :\n        dataFile.copyWithoutStats());\n```"}
{"iteration": 5, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/7031#discussion_r236749291", "body": "Mention here that it overrides `FLINK_CONF_DIR` and also confirm that if this option isn't used `FLINK_CONF_DIR` remains in effect."}
{"iteration": 5, "tag": "no", "repo": "open-telemetry/opentelemetry-java-contrib", "url": "https://github.com/open-telemetry/opentelemetry-java-contrib/pull/70#discussion_r697110793", "body": "Nit I would implement the string in `getDescription` and have `toString` delegate - it's more obvious that a method like `getDescription` shouldn't be changed (or have changes reviewed carefully) while not as obvious for toString"}
{"iteration": 5, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/2663#discussion_r92841442", "body": "Uh, sorry. For the parameter it may be reasonable, but Nonnull is implied in such case in Oracle code guidelines being used by Jenkins. So it is not really must-have here even though FindBugs does not process the code according to Oracle code style now"}
{"iteration": 5, "tag": "no", "repo": "apache/geode", "url": "https://github.com/apache/geode/pull/4819#discussion_r394354896", "body": "The essence here is that you need to get a reference to the actual key in the map (if you don't it might get GC'd). Consider the first pass through all of this and I'm trying to lock key \"ABC\" and succeed. I have a reference to the key and all is good. If another thread comes to look for key \"ABC\" it will have a different 'key' object. So if we get the lock out of the map but don't also get the actual key then that lock might get GC'd if we don't retain a hard reference to its key."}
{"iteration": 5, "tag": "yes", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/5436#discussion_r837450308", "body": "You dont have to check. You should always call the cipher anyway. If the cipher is a real cipher, it will sign and encrypt, and if not, it will return back the same piece of data. You should also make sure the cipher is enable decrypt that data, and then examine endpoints that return gauth accounts to make sure codes are not returned back in encrypted form. "}
{"iteration": 5, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/1063#discussion_r221305416", "body": "Shouldn't need to, `getTagString` only does things differently if the tag is default (which it won't be if the tag is a digest)."}
{"iteration": 5, "tag": "no", "repo": "stargate/stargate", "url": "https://github.com/stargate/stargate/pull/2611#discussion_r1228545266", "body": "The ASF license is copied and also Except for CqlImpl and CqlServer class, all other classes are all copied and patched in cql module. So not sure if we need to maintain it."}
{"iteration": 5, "tag": "no", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/19815#discussion_r1175132584", "body": "@hmlnarik Does this line differ then in the class: ResourceOwnerPasswordCredentialsGrantTest.java that id is not deleted but rather generated?"}
{"iteration": 5, "tag": "language", "repo": "woowacourse-teams/2022-dallog", "url": "https://github.com/woowacourse-teams/2022-dallog/pull/457#discussion_r947641114", "body": "\uad73! \uc774\uc57c\uae30 \ub098\ub208 \uac83 \ucc98\ub7fc \uc798 \uc218\uc815\ud558\uc168\ub124\uc694!"}
{"iteration": 5, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/3213#discussion_r179955397", "body": "The properties weren't required when the things were specified via text files, because a default channel name \"CHx\" was used. However, I modified it to allowed specification of the channel name via text file as well. "}
{"iteration": 5, "tag": "no", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5536#discussion_r1246755065", "body": "I don't like this.  The datatype Hash object has always meant a container for a Keccak-256 hash, because that was the only hash type used internally.  We either need to add a type field showing what type the hash is, and check it when we use it (the critical part) or create a new HashSha256 type."}
{"iteration": 5, "tag": "no", "repo": "eclipse-jkube/jkube", "url": "https://github.com/eclipse-jkube/jkube/pull/1928#discussion_r1061499295", "body": "OK, that reveals a big code-smell.\r\nIn any case (now that I'm seeing the affected part) if you wanted to expose that method you could have done that at the VolumePermissionEnricher level (by overriding the method and making it public)."}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/21000#discussion_r626947720", "body": "I deprecated based on the changes you made in .NET for DownloadContent and DownloadStreaming. The thing is that the upload method is already an upload range method, and the buffered method also needs to be capable of ranges for people who want to upload ranges larger than 4MB. We struggled with a way to name a new method while keeping the old method.\r\n\r\nWe could have the simpler arguments for the min overload like Gauri suggests in another comment, where just the data stream is needed (and length for sync clients until a better InputStream->Flux converted exists)."}
{"iteration": 5, "tag": "no", "repo": "apache/paimon", "url": "https://github.com/apache/paimon/pull/237#discussion_r929555403", "body": "Add a check fields contains all pk and partitionKeys"}
{"iteration": 5, "tag": "no", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/271#discussion_r153903233", "body": "We will probably prefer to log the whole exception and not only the message in case we need to debug it."}
{"iteration": 5, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/5392#discussion_r1039133812", "body": "Does `prepareAndUpload` upload only the latest sync'd tarnslog and checkpoint files? Does it assume existence of previous files in remote translog? "}
{"iteration": 5, "tag": "no", "repo": "reactor/BlockHound", "url": "https://github.com/reactor/BlockHound/pull/52#discussion_r329593790", "body": "would it be possible to use a logger here instead, so that this debug info can be suppressed? If I'm not mistaken the `Logger` / `LoggerFactory` parts are independent enough of the instrumented part that it wouldn't trigger classloading issues.\r\n\r\nalternatively, consider returning the `Duration` in the future (which shouldn't be a breaking change)"}
{"iteration": 5, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/102971#discussion_r1422793346", "body": "Same case as the other one - fixed in d7d8d5e07f74dd7eebbb9567b2cb5f9400094e7d"}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/66023#discussion_r540596699", "body": "Good point. I have expanded the test to:\r\n* Randomly deleting or mutating the existing policy after snapshot is taken\r\n* Add another policy after snapshot is taken\r\n\r\nThen assert things stay the same after restore."}
{"iteration": 5, "tag": "unclear", "repo": "eclipse-rdf4j/rdf4j", "url": "https://github.com/eclipse-rdf4j/rdf4j/pull/3642#discussion_r794286819", "body": "The remote transaction is always explicitely commited by sending a request to the TransactionController. If you are concerned that it may be interrupted by closing the connection when the entry expired from the secondary cache, I could add a synchronized section/mutex (over the primaryCache) there so to prevent that from happening. all the code that deals with canceling stale transactions witin ActiveTransactionRegisty does it within synchronised sections over the primaryCache ... \r\n\r\nEDIT ops, that will prevent processing other transactions through the ActiveRegistry. Probably better alternative is to do not invoke the logic in secondary cache removal listener for transactions that are within inCommit state by introducing a proper flag within Transaction ..."}
{"iteration": 5, "tag": "no", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/1199#discussion_r226752783", "body": "Considering this more thoroughly: yes, this codec is intended to store only positive values (though the source data series may be negative).  I'll add a check, a test, and javadoc about this."}
{"iteration": 5, "tag": "broken", "repo": "zalando/nakadi", "url": "https://github.com/zalando/nakadi/pull/254#discussion_r64702451", "body": "And again, I don't like the idea of storing in subscription itself, because of:\n- at least 2 additional checks\n- id is not a part of subscription that was initialy created by user (and that's the difference from EventType)\n- not logical to store it twice\n"}
{"iteration": 5, "tag": "yes", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/9337#discussion_r132929667", "body": "No. Since BOB does not have privilege on module1, so he will not pass the privilege check for module1, which leads to `UnAuthorized Exception`"}
{"iteration": 5, "tag": "no", "repo": "allegro/hermes", "url": "https://github.com/allegro/hermes/pull/1857#discussion_r1606369778", "body": "Since this class will be accessed from many threads and is mutable - can we document if it is thread safe and how it should be used with multiple threads accessing it?"}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/26562#discussion_r796099944", "body": "Should we let this be nullable? Right now, setting this locks the user into either using this or having an IllegalStateException. Or, should we make the `retryPolicy` method non-nullable?"}
{"iteration": 5, "tag": "no", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/6142#discussion_r324400155", "body": "This is the only way I can verify the order I intended to verify. I did not use inOrder for all verifications. For any verification that inOrder is not needed I just verified without inOrder. Unfortunately there are some unintended ordering are verified, like the ordering between the following\r\n```java\r\n    inOrder.verify(lb1).handleResolvedAddresses(resolvedAddressesCaptor1.capture());\r\n    assertThat(resolvedAddressesCaptor1.getValue().getAddresses()).containsExactly(eag12);\r\n    inOrder.verify(lb2).handleResolvedAddresses(resolvedAddressesCaptor2.capture());\r\n    assertThat(resolvedAddressesCaptor2.getValue().getAddresses()).containsExactly(eag22);\r\n    inOrder.verify(lb3).handleResolvedAddresses(resolvedAddressesCaptor3.capture());\r\n    assertThat(resolvedAddressesCaptor3.getValue().getAddresses()).containsExactly(eag32);\r\n    inOrder.verify(lb4).handleResolvedAddresses(resolvedAddressesCaptor4.capture());\r\n    assertThat(resolvedAddressesCaptor4.getValue().getAddresses()).containsExactly(eag42);\r\n```\r\nbut it's natural deterministic ordering (It's unlikely to change when implementation is changed). All unintended ordering verification is like this. I didn't simulate my implementation flow. I just followed the test case specification and verify all the expected behavior in the specification. If implementation changes and the unintended order verification breaks, we can change the test as long as it verifies all the test spec."}
{"iteration": 5, "tag": "no", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/5339#discussion_r694190833", "body": "We could pass the exception to the log."}
{"iteration": 5, "tag": "yes", "repo": "Consensys/ethsigner", "url": "https://github.com/Consensys/ethsigner/pull/87#discussion_r290118694", "body": "This command ensures received transactions are signed by a key stored in an encrypted file (i.e. commands are about how the app operates, not about the underlying mechanism)"}
{"iteration": 5, "tag": "broken", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/5323#discussion_r56646844", "body": "the message here is strange and could be really long. when you get the logged in user, will you be able to use the other constructor for `UnauthorizedException`?\n"}
{"iteration": 5, "tag": "no", "repo": "dockstore/dockstore", "url": "https://github.com/dockstore/dockstore/pull/5176#discussion_r1000882943", "body": "To clarify, I was concerned, not knowing the exact details of how GitHub sets the relevant HTTP headers, and how the `OkHttp` class actually uses the `MAX_CACHE_AGE`, that we could possibly be introducing another change propagation delay, on top those already built in to GitHub's systems.  For example, if the repo info update takes 20 seconds between when we make the change on the site and when the change first appears in the API response, and we add another caching delay of 60 seconds, the total is 80 seconds.  That might be pretty confusing to us and/or our users in certain situations (imagine, for example, you're testing the \"auto topic\" harvesting feature, and the change to the repo isn't showing up...)"}
{"iteration": 5, "tag": "yes", "repo": "linkedin/venice", "url": "https://github.com/linkedin/venice/pull/331#discussion_r1157860019", "body": "Since we are shutting down the scheduler in `clear()` I'm wondering if we should also add defensive code to prevent attempts to call `start()` again after calling `clear()`"}
{"iteration": 5, "tag": "language", "repo": "weibocom/motan", "url": "https://github.com/weibocom/motan/pull/124#discussion_r67804199", "body": "\u6b64\u5904\u9700\u8981\u6539\u4e3acount >= MAX_COUNT_PER_MILLIS\n"}
{"iteration": 5, "tag": "yes", "repo": "crate/crate", "url": "https://github.com/crate/crate/pull/15776#discussion_r1549190517", "body": ">  what we want to prevent here.\r\n\r\nWe want to prevent unprivileged users by-passing access restrictions. If there are other services running on a machine which are only bound to loopback, users shouldn't gain access to them by using the fdw mechanism. \r\nThe main candidates we had in mind are a second CrateDB instance or PostgreSQL, where it would allow to by-pass the default HBA configuration, but similar mechanisms could exist for other services.\r\n\r\nI'm not sure how we can solve the URL format issue, but I'd rather we have some false positives here that can be worked around with `fdw.allow_local` then to open up restricted services to users."}
{"iteration": 5, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/6149#discussion_r252175719", "body": "`null` keys are not allowed -- that is the assumption in this check. We can add the `!isValid` as safe guard if you want."}
{"iteration": 5, "tag": "no", "repo": "smallrye/smallrye-config", "url": "https://github.com/smallrye/smallrye-config/pull/871#discussion_r1063680935", "body": "Yep, as I mentioned the instanceof check was just to keep a more similar codepath if it was already a `SmallRyeConfig`, but we should be able to use unwrap directly with no checking."}
{"iteration": 5, "tag": "unclear", "repo": "uber/NullAway", "url": "https://github.com/uber/NullAway/pull/869#discussion_r1405511396", "body": "Is it possible that deleting the extant metadata will cause some important info to be lost, unrelated to nullability?  Not sure how easily we can answer this, just curious"}
{"iteration": 5, "tag": "no", "repo": "OpenCubicChunks/CubicChunks", "url": "https://github.com/OpenCubicChunks/CubicChunks/pull/646#discussion_r602097239", "body": "from what i can tell, unless there's another mod doing something totally wrong, this should be totally safe. all chunks will have been unloaded before the event is fired, the only stuff that happens afterwards should be `WorldServer#flush()` -> `AnvilSaveHandler#flush()` (which does nothing in cubic worlds), followed by `DimensionManager` marking the world as unloaded."}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/61427#discussion_r490992855", "body": "I am concerned that having charset with a regex of utf-8 could break someone using sql. This should be checked with the sql team"}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/62916#discussion_r507603676", "body": "> The name put looks a bit off in this context. I understand it is a carry over from the Rest action. But put or post is too HTTP specific and do not seem to blend in very well with other verbs like create, enable etc. I'd suggest to use upsert.\r\n\r\nIt is not a carry over. I gave it careful thinking. I think `put`, by it's analogy with the HTTP verb, carries the meaning that this is \"the new configuration taking effect\". No prob to use `upsert` if you like that more.\r\n\r\n> I also wonder whether we could have more consistency and simplicity in the names. The mixed usage of underscore and dot looks a bit standing out. Can we use just either of them, but not both? Some of the fields are named as verb.noun or verb_noun, is it possible to make these field more generic to contain only the verb. The noun part of it will be in the body anyway.\r\n\r\nI think we have to use both, but I'll take any specific suggestions you've got, we can brainstorm the naming if you're up to. Let me grab an exhaustive list of examples and we can discuss more to the point.\r\n\r\n"}
{"iteration": 5, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/9422#discussion_r928149585", "body": "The ` else {` with the corresponding closing `}` could be removed and the code in this branch could be un-indented. This would make the code visually less \"jagged\"."}
{"iteration": 5, "tag": "yes", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/3855#discussion_r76316464", "body": "Per our discussion, I think we should go with a more user-friendly (less-secure) way that once there's any `*` showing up in the ACL, we should relax the permission restriction and grant the account owner has the specific permission to the container. We can state this limitation explicitly in our docs. If any user need more specific regexp matching with their ACL policy, it should be easy for them to modify this.\n"}
{"iteration": 5, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/2350#discussion_r143056663", "body": "The contract of equals states it should work both ways. Thus reversing the variables should not give a different result. Meaning this check is dead code, as one of the above will already have returned or if `newState !=null`, but `oldstate == null` they are not equal and thus won't return here.  "}
{"iteration": 5, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/6948#discussion_r83723906", "body": "Do we need deprecation in ClientConfig? Do we guarantee backward compatibility for this class?\n"}
{"iteration": 5, "tag": "no", "repo": "triplea-game/triplea", "url": "https://github.com/triplea-game/triplea/pull/2044#discussion_r125979867", "body": "Ah, I missed that it was the return type of `TripleaHandler#getCurrentParent()`, which is protected.  In that case, should `PseudoElement` be a protected nested class within `TripleaHandler` since it's only intended to be used by subclasses of `TripleaHandler`?"}
{"iteration": 5, "tag": "no", "repo": "scalar-labs/scalardb", "url": "https://github.com/scalar-labs/scalardb/pull/841#discussion_r1172385362", "body": "No, I think this check is necessary for the following corner case.\r\n\r\nTX1: prepare record A to update deemed-commit-state record (i.e., TxID = null -> TX1)\r\nTX1: abort and start rollback (record A is still in prepare state)\r\nTX2: read record A, see prepare state, try to rollback and succeed (TxID = TX1 -> null)\r\nTX1: get the latest state and see TxID = null in this add method"}
{"iteration": 5, "tag": "no", "repo": "vaticle/typedb", "url": "https://github.com/vaticle/typedb/pull/6501#discussion_r778777261", "body": "we do a direct read and skip all the locking mechanisms/closed checks required in the previous version (`RocksStorage.java`) because we can be sure that no one is doing any concurrent operations on the storage during loading"}
{"iteration": 5, "tag": "yes", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/78358#discussion_r727663215", "body": "If the request allows remote indices, the checking is more complex (which is yet another issue with the CCS security model).\r\nIf there are remote indices then we can't rely on whether the action is authorized locally, because it's allowable to perform a cross cluster search even if you don't have access to search any indices in the local cluster.\r\nI'm not sure whether the check is right (it seems to only perform the action name check if there a _no_ indices, but I would think that we want to perform it if there are no _remote_ indices), but it's different for a reason.\r\n\r\nI think the logic behind doing it if there are _no_ indices, is that this is the only place where we can trigger an exception (because index checking won't happen).\r\nBut if there are _any_ indices, we'll also check whether each of those indices is allowed, and fail if they're not (locally for local indices, or on the remote cluster for remote indices).\r\n\r\nFor non-remoteable actions, the upfront action name check is a performance optimisation - no need to check indices for an action you can't perform. For remoteable actions, we have a backstop for when there are no indices to check.\r\n   "}
{"iteration": 5, "tag": "yes", "repo": "geoserver/geoserver", "url": "https://github.com/geoserver/geoserver/pull/4906#discussion_r603153057", "body": "I understand the service is meant to be kept simple, but can we at least base64 encode the username and password to avoid accidental discovery of credentials?"}
{"iteration": 5, "tag": "no", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/6847#discussion_r1029995719", "body": "This needs to be guarded by a lock if it is mutable."}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/23266#discussion_r102421336", "body": "Right - it should catch Exception instead (and also ensure that the listener get called anyway because I just notive that `performRequestAsync` throws an IllegalArgumentException too."}
{"iteration": 5, "tag": "no", "repo": "apache/calcite", "url": "https://github.com/apache/calcite/pull/3569#discussion_r1436581647", "body": "The first commit in this PR uses this type name, but in a comment on Jira @julianhyde suggested the new name so the third commit changes the name to this one. The truth is that the long name is very hard to read and is very easy to mistype."}
{"iteration": 5, "tag": "unclear", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/32183#discussion_r1024682561", "body": "Yes, both can enable secure boot and vTPM. This PR only added support for `TRUSTED_LAUNCH`. \r\n\r\nIf we want to support confidential VM, we can add \r\n```java\r\nWithSecurityFeatures withConfidentialVM();\r\n```\r\nunder `WithSecurityTypes` and share secure boot and vTPM settings. Maybe we can add it in the future?"}
{"iteration": 5, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16452#discussion_r511018901", "body": "No as that would cause the application potentially to be very chatty. If the customer would need to know if it is indeed returning `null` they can change the logging level."}
{"iteration": 5, "tag": "broken", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/44139#discussion_r1566770971", "body": "The most risky bug in this code is:\nThe use of the `return` statement in the catch block inside a loop can prematurely terminate the session cleaning process if any frontend service call fails.\n\nYou can modify the code like this:\n```java\nfor (Frontend frontend : frontends) {\n    try {\n        TNetworkAddress thriftAddress = new TNetworkAddress(frontend.getHost(), frontend.getRpcPort());\n        TListSessionResponse response = FrontendServiceProxy.call(\n                thriftAddress, 1000, Config.thrift_rpc_retry_times, client -> client.listSessions(request));\n        if (response.getSessions() != null) {\n            List<TSessionInfo> sessions = response.getSessions();\n            for (TSessionInfo sessionInfo : sessions) {\n                UUID sessionId = UUID.fromString(sessionInfo.getSession_id());\n                LOG.debug(\"alive session {} on fe {}:{}\",\n                        sessionId, frontend.getHost(), frontend.getRpcPort());\n                aliveSessions.add(sessionId);\n            }\n        }\n    } catch (Throwable e) {\n        LOG.info(\"listSessions return error from {}:{}, skip cleaning session for this frontend.\",\n                frontend.getHost(), frontend.getRpcPort(), e);\n        // Do not return; continue with the next iteration of the loop\n    }\n}\n```\nRemoving `return;` from the `catch` block ensures that even if an exception occurs while processing one frontend, the loop continues to process the remaining frontends rather than exiting prematurely."}
{"iteration": 5, "tag": "language", "repo": "alibaba/nacos", "url": "https://github.com/alibaba/nacos/pull/3678#discussion_r480617344", "body": "\u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u7528\u5230\u5c31\u5220\u9664\u5427"}
{"iteration": 5, "tag": "unclear", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/6718#discussion_r160455617", "body": "The message should also include the mode the ufs path is in, which should help with debugging."}
{"iteration": 5, "tag": "language", "repo": "apache/incubator-seata", "url": "https://github.com/apache/incubator-seata/pull/4053#discussion_r745459319", "body": "\u5982\u679c\u5141\u8bb8delay\uff0c\u5e94\u8be5\u52a0\u4e0atimeout\u53c2\u6570\uff0c\u5728\u5141\u8bb8\u7684\u5b9e\u9645\u5185\u81ea\u65cb/sleep\u7b49\u5f85\u4ee4\u724c\uff0c\u5982\u679c\u8d85\u51fa\u4e86\u65f6\u95f4\u6ca1\u5f97\u5230\u5e94\u8be5\u5931\u8d25\uff0c\u800c\u4e0d\u662f\u7b49\u4e00\u4f1a\u76f4\u63a5\u5c31\u5141\u8bb8\u901a\u8fc7"}
{"iteration": 5, "tag": "yes", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/20713#discussion_r1267481135", "body": "This kind of caching would still be vulnerable to a high frequency of calls, similar to a TCP SYN flood. Should we also put an upper limit on the number of in flight contexts so that old contexts are dropped? "}
{"iteration": 5, "tag": "yes", "repo": "broadinstitute/gatk", "url": "https://github.com/broadinstitute/gatk/pull/8362#discussion_r1235692134", "body": "This isn't unique to this PR, but should we be worried about injection attacks here? It seems like we should be sanitizing the inputs and probably using whatever bigquery query builder exists instead of directly munging strings from the user into our queries."}
{"iteration": 5, "tag": "no", "repo": "VoltDB/voltdb", "url": "https://github.com/VoltDB/voltdb/pull/4855#discussion_r138115881", "body": "I discussed this with Ruth. The concern is that the command log keeps growing to the point where a recovery becomes an outage. Her position was that any durability failure is a system failure. I would say that if the cluster goes down because of a command log that grows too big, it may well be on a different host from the snapshot failure. At least this way the host with the disk problem will be the host that is taken offline.\r\n\r\nTo your second point, the commandlogging filters out snapshot completion notifications that don't have the truncation flag set. The flag is only set when the path is commandlog snapshot path and a truncationRequestId was passed into the snapshot request. I suppose that someone could hack this up but right now commandlogging does not verify partial snapshots either. Also, the crash is not on the node issuing the truncation snapshot but on the node that had the IOException."}
{"iteration": 5, "tag": "yes", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/2727#discussion_r30747339", "body": "The purpose of having a username in the CLI prompt was for when interacting with a secure CDAP cluster, the user knows who they've been authenticated as. This will be useful when we implement per-user permissions and probably also useful now, just so the user knows who they are. Why are we showing the \"user.name\" property instead?\n"}
{"iteration": 5, "tag": "yes", "repo": "orphan-oss/ognl", "url": "https://github.com/orphan-oss/ognl/pull/59#discussion_r226902800", "body": "No, I meant that we check access first and if the field is not accessible we access it anyway. This can lead to a security vulnerability as basically we ignore if the field is accessible or not.\r\n\r\nWe should throw an exception here instead of `f.get(null);`"}
{"iteration": 5, "tag": "language", "repo": "skiptests/astraea", "url": "https://github.com/skiptests/astraea/pull/748#discussion_r979235795", "body": "\u9019\u908a\u6709\u500b\u554f\u984c\uff0c\u73fe\u5728\u624b\u4e0a\u6709\u4e00\u500b `List<Replica>`\uff0c\u90a3\u4ed6\u7684 leader \u662f\r\n\r\n1. `list.get(0)`\r\n2. `list` \u88e1\u9762 isLeader \u56de\u50b3 true \u90a3\u4f4d\r\n\r\n\u6539\u7528 `Replica` \u4e4b\u5f8c\uff0c\u9019\u908a\u6709\u591a\u7a2e\u7684 leader \u8868\u793a\u65b9\u6cd5\uff0c\u6211\u4e0d\u78ba\u5b9a\u8981\u4ee5\u54ea\u500b\u70ba\u6e96"}
{"iteration": 5, "tag": "no", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/2879#discussion_r954932638", "body": "Yes it is possible. Check out the test I added to ImportConfigurationTest in 688a5185de77d16879db684c0f83f10b65811097"}
{"iteration": 5, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/70259#discussion_r591766439", "body": "We probably don't need to catch this exception, since uncaught exceptions would cause the test to fail anyway. This also swallows the stacktrace which would make it slightly harder to investigate for someone triaging a failure."}
{"iteration": 6, "tag": "unclear", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/104840#discussion_r1470496937", "body": "As there might a security setting (thus the policy can exist but not be visible) might be better to have the \"cannot find enrich policy [countries], did you mean [...])."}
{"iteration": 6, "tag": "yes", "repo": "grpc-ecosystem/polyglot", "url": "https://github.com/grpc-ecosystem/polyglot/pull/9#discussion_r58692522", "body": "Please don't force people to pass plaintext credentials, but point to a file (like for refresh token). Also please make sure there's a metaVar (which goes into usage).\n"}
{"iteration": 6, "tag": "no", "repo": "microsoft/appcenter-sdk-android", "url": "https://github.com/microsoft/appcenter-sdk-android/pull/306#discussion_r96740237", "body": "Maybe not because it is private?"}
{"iteration": 6, "tag": "unclear", "repo": "strimzi/strimzi-kafka-operator", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/5073#discussion_r694346291", "body": "Yes, this part only to sets the scheme used by the probes without setting up the certs/keys since the kubelet skips certificate verification when the `scheme` is set to `HTTPS` [1] \r\n\r\nThe username/password bits in the other parts is setting up HTTP Basic authentication primarily used here for role based(authorization) access to the API \r\n\r\n[1] https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#http-probes "}
{"iteration": 6, "tag": "broken", "repo": "eclipse-edc/Connector", "url": "https://github.com/eclipse-edc/Connector/pull/2711#discussion_r1165242910", "body": "## Useless parameter\n\nThe parameter 'jsonObject' is never used.\n\n[Show more details](https://github.com/eclipse-edc/Connector/security/code-scanning/797)"}
{"iteration": 6, "tag": "broken", "repo": "hibernate/hibernate-orm", "url": "https://github.com/hibernate/hibernate-orm/pull/6186#discussion_r1122386084", "body": "## Useless parameter\n\nThe parameter 'currentValue' is never used.\n\n[Show more details](https://github.com/hibernate/hibernate-orm/security/code-scanning/14246)"}
{"iteration": 6, "tag": "yes", "repo": "apache/nifi-registry", "url": "https://github.com/apache/nifi-registry/pull/231#discussion_r328721941", "body": "Yes, without using a ServletHolder for the docs webapp, the Jetty filters and thereby the security headers are not applied correctly. This is something I experienced when attempting the change in NiFi. Basically when using a ResourceHandler, when the request is made to the docs the filters are not triggered. I did research into this, possibly emailed the Jetty dev distro, and eventually found that I had to use a ServletHolder."}
{"iteration": 6, "tag": "broken", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/877#discussion_r5535235", "body": "For the same reasons any web method which takes an action, rather than merely returning information, should require POST. An attacker cannot in this case steal secrets etc., but he could perhaps cause a denial of service. And there could be accidental problems from link prefetching, cache refreshing, etc.\n"}
{"iteration": 6, "tag": "no", "repo": "java-native-access/jna", "url": "https://github.com/java-native-access/jna/pull/738#discussion_r90708256", "body": "see comment on GetSecurityDescriptorOwner here for pGroup."}
{"iteration": 6, "tag": "broken", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/13788#discussion_r1102329460", "body": "## Useless parameter\n\nThe parameter 'tableName' is never used.\n\n[Show more details](https://github.com/apache/druid/security/code-scanning/4258)"}
{"iteration": 6, "tag": "unclear", "repo": "hashgraph/hedera-sdk-java", "url": "https://github.com/hashgraph/hedera-sdk-java/pull/631#discussion_r692307947", "body": "Exposing a way to switch these built-in endpoints to the TLS port without requiring clients to configure every IP would be nice."}
{"iteration": 6, "tag": "no", "repo": "pentaho/pentaho-kettle", "url": "https://github.com/pentaho/pentaho-kettle/pull/7345#discussion_r394317750", "body": "That could potentially flood logging if somebody has debug logging enabled."}
{"iteration": 6, "tag": "bot", "repo": "StarRocks/starrocks", "url": "https://github.com/StarRocks/starrocks/pull/32420#discussion_r1352854854", "body": "From a code review perspective, here are some improvement suggestions:\n\n1. **Bug Risks:** The code snippet seems fine from a bug risk perspective.\n\n2. **Naming:** The variable names `metaClient`, `hiveMetastore`, and `baseHiveMetastore` are descriptive and appropriate.\n\n3. **Code Style:** Overall, the code style looks good.\n\n4. **Best Practices:** The usage of TODO comments should ideally be accompanied by an explanation or a reference to an issue/feature. Consider providing more context about why the creator class abstraction is necessary.\n\n5. **Compatibility:** Compatibility issues are not apparent based on the given code snippet.\n\n6. **Simplicity:** The code appears to be straightforward and simple.\n\n7. **Optimization Points:**\n   - It's not clear if `metastoreType` is a required parameter for constructing `HiveMetastore`. If it is optional or could use a default value, consider making it an optional parameter with a default value in the constructor.\n   - Review the condition where `enableMetastoreCache` is checked. If caching is a common scenario, it might be worth optimizing the code further to utilize caching when it is enabled.\n\nImproved code patch:\n\n```java\npublic IHiveMetastore createHiveMetastore() {\n    // TODO(stephen): Abstract the creator class to construct hive meta client\n    HiveMetaClient metaClient = HiveMetaClient.createHiveMetaClient(hdfsEnvironment, properties);\n    IHiveMetastore hiveMetastore = new HiveMetastore(metaClient, catalogName, metastoreType);\n    IHiveMetastore baseHiveMetastore;\n    if (!enableMetastoreCache) {\n        baseHiveMetastore = hiveMetastore;\n    }\n    // Rest of the code...\n}\n```\n\nPlease note that without additional context or the complete codebase, it's challenging to provide more specific or accurate suggestions. It's always recommended to do a thorough review of the entire codebase and consider other factors such as performance requirements, architectural considerations, and project-specific conventions."}
{"iteration": 6, "tag": "no", "repo": "SpongePowered/SpongeAPI", "url": "https://github.com/SpongePowered/SpongeAPI/pull/1995#discussion_r325945074", "body": "Still better to have both inheritance and a simple method to find out if the server is local or not. Since everything API wise wraps around the idea of \"plugins are running on the server\", we still have to expose the fact that the server could be remotely controlled, i.e. in the client connecting to a game server, there's still an integrated server."}
{"iteration": 6, "tag": "unclear", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/1297#discussion_r177008602", "body": "> We need to use AuthenticationTls to SEND client certs whenever we enable requireTrustedClientCertificate\r\n\r\nIf TLS is enabled and we want to authenticate using the CNAME in the Client Certs (Default TLS authentication that pulsar provides) then we need to use AuthenticationTls irrespective of requireTrustedClientCertificate \r\n\r\nIf we want to use a different authentication method where the connection is TLS but we don't use client certs to authenticate then `requireTrustedClientCertificate` should be false.\r\n\r\n"}
{"iteration": 6, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/357#discussion_r477135998", "body": "No. But the token_keys endpoint provides the token differently. This can be managed with different key-ids....\r\nXSUAA:\r\nhttps://green-1.authentication.sap.hana.ondemand.com/token_keys\r\nIAS:\r\nhttps://xs2security.accounts400.ondemand.com/oauth2/certs\r\n\r\nSo, finally i would like to have both of them in preferably one file, e.g. token_keys.txt with two different entries one as default for ias and another as default for xsuaa...\r\n"}
{"iteration": 6, "tag": "no", "repo": "dnault/therapi-runtime-javadoc", "url": "https://github.com/dnault/therapi-runtime-javadoc/pull/15#discussion_r184848020", "body": "It might be wise indeed to make this safer, as this could indeed happen if someone uses the old annotation processor with the new runtime-javadoc dependency, or has a subproject using an older version of the processor.\r\nI'll try to have a look today."}
{"iteration": 6, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/10261#discussion_r1346699916", "body": "There should be only one instance of the AttributeKey. The AttributeKey is only usable in places where the netty channel context is present. \r\n\r\nIn the security PR its used [here](https://github.com/opensearch-project/security/pull/3418/files#diff-62eb3270a6f8cc2b9e7b4a92393d1ed9c3ed291ba7548cfddfbe1140e715b0d1R90) which is not in the same package or a subclass so I changed the access modifier to get access to this constant. There are subclasses of this class in the security plugin where the header verifier is instantiated and I can pass it in through object construction, but it felt neater to change the access modifier to public. "}
{"iteration": 6, "tag": "no", "repo": "typetools/checker-framework", "url": "https://github.com/typetools/checker-framework/pull/3922#discussion_r528963482", "body": "Does this need to be protected, or can it be public?"}
{"iteration": 6, "tag": "yes", "repo": "SonarSource/sonarqube", "url": "https://github.com/SonarSource/sonarqube/pull/3015#discussion_r167550996", "body": "The previous description should be kept: \"Server endpoint that will receive the webhook payload, for example 'http://my_server/foo'. If HTTP Basic authentication is used, HTTPS is recommended to avoid man in the middle attacks. Example: 'https://myLogin:myPassword@my_server/foo'\""}
{"iteration": 6, "tag": "yes", "repo": "strimzi/strimzi-kafka-operator", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/7654#discussion_r1027107428", "body": "Does this possibly lead to leaking sensitive information in logs, errors and exceptions? Would it be better to have some other method used to give you the String for the checksum (or even directly the checksum itself) to avoid the leakage know or by mistake in the future?\r\n\r\nAlso, does the hash need to be based on all the fields? The pods don't really use all of them for the broker certificates (Just wodnering -> not sure we really shoudln't use all of them)."}
{"iteration": 6, "tag": "no", "repo": "GlowstoneMC/Glowstone", "url": "https://github.com/GlowstoneMC/Glowstone/pull/753#discussion_r159554650", "body": "Marked as TODO to be safe."}
{"iteration": 6, "tag": "no", "repo": "braintree/braintree-android-drop-in", "url": "https://github.com/braintree/braintree-android-drop-in/pull/265#discussion_r687757129", "body": "Yeah visibility isn't a concern here, we just don't want to re-create a fragment if one already exists and is managed by the fragment manager. Guards us against those edge cases like a user double-tapping a button; we want to make sure we don't mistakenly put two Card Details fragments on the screen at once."}
{"iteration": 6, "tag": "no", "repo": "apache/solr", "url": "https://github.com/apache/solr/pull/2313#discussion_r1574789547", "body": "Yeah, it's really 2 things:\r\n1. throttles maximum number of outstanding requests across all hosts\r\n2. the number of requests per host that will be buffered waiting to send, once 1. hits its limit.\r\n\r\nThe second of these does buffering, but no actual throttling, and IMO it's not useful. If we proceed with making the \"per host\" part hardcoded (removing 2.), then the javadocs here for `withMaxOutstandingRequests(int)` will be completely accurate. And as it stands I'd say they're essentially accurate, practically speaking, since the per-host logic that they do influence is more of an internal detail."}
{"iteration": 6, "tag": "broken", "repo": "apache/incubator-baremaps", "url": "https://github.com/apache/incubator-baremaps/pull/757#discussion_r1306713161", "body": "## Potential input resource leak\n\nThis BufferedInputStream is not always closed on method exit.\n\n[Show more details](https://github.com/apache/incubator-baremaps/security/code-scanning/797)"}
{"iteration": 6, "tag": "no", "repo": "micrometer-metrics/micrometer", "url": "https://github.com/micrometer-metrics/micrometer/pull/2288#discussion_r503035470", "body": "We avoided using the non-OSS version due to license concerns. However since these tests don't run by default and we don't distribute them in releases, I believe we should be alright (so long as those that choose to run them agree and comply with the license). I'll try to check more into the Elasticsearch license. Perhaps we should make note of this licensing in the README, which we currently don't describe how to run the docker tests."}
{"iteration": 6, "tag": "no", "repo": "Alluxio/alluxio", "url": "https://github.com/Alluxio/alluxio/pull/2212#discussion_r46747254", "body": "this will swallow the exception in case it is caught here.\nis this behavior expected (rather than propagating it to upper layer)?\nit looks to me fairly scary if we simply resume from here, but maybe you have some other protection scheme behind?\n"}
{"iteration": 6, "tag": "no", "repo": "nordic-institute/X-Road", "url": "https://github.com/nordic-institute/X-Road/pull/359#discussion_r378228232", "body": "Note: Valid values for the countryName attribute are ISO 3166 alpha-2 codes (2-character country codes). It would be safer to map the instance identifier to e.g. \"O\" (and memberClass to OU) in case a CA uses strict validation."}
{"iteration": 6, "tag": "no", "repo": "apache/guacamole-client", "url": "https://github.com/apache/guacamole-client/pull/299#discussion_r194158582", "body": "This is too specific to LDAP. The `Credentials` object is intended to be generic, and shouldn't be tightly coupled to any one authentication mechanism.\r\n\r\nIf `Credentials` should include arbitrary attributes, I'd suggest implementing the `Attributes` interface: https://github.com/apache/guacamole-client/blob/7e6df7c1393be2df7c72f77d530a545edb473623/guacamole-ext/src/main/java/org/apache/guacamole/net/auth/Attributes.java\r\n\r\nBetter perhaps than that would be having `AuthenticatedUser` implement `Attributes` (as, semantically, it is the *user* that has these attributes, not their credentials)."}
{"iteration": 6, "tag": "no", "repo": "confluentinc/schema-registry", "url": "https://github.com/confluentinc/schema-registry/pull/1130#discussion_r290941664", "body": "Credential encoding feels would probably be better placed within the credential provider. Unfortunately we can't just change `getUserInfo` as its part of a public api but we could include `getCredentials` which returns the bas64 encoded representation of the requesters userinfo "}
{"iteration": 6, "tag": "yes", "repo": "molgenis/molgenis", "url": "https://github.com/molgenis/molgenis/pull/5708#discussion_r92106401", "body": "Can you document what makes an identifier secure? Should a secure identifier be unique?"}
{"iteration": 6, "tag": "broken", "repo": "liquibase/liquibase", "url": "https://github.com/liquibase/liquibase/pull/5220#discussion_r1394819205", "body": "## Useless parameter\n\nThe parameter 'changeLogParameters' is never used.\n\n[Show more details](https://github.com/liquibase/liquibase/security/code-scanning/845)"}
{"iteration": 6, "tag": "broken", "repo": "spring-attic/spring-xd", "url": "https://github.com/spring-attic/spring-xd/pull/1201#discussion_r18097563", "body": "Not sure what's the difference between the 2 (HTTPS is SSL). If 2 refers to customizing the client through the SSLContextBuilder, that is necessary in order to allow the trust chain to process the self-signed certificate we use for testing. It has no bearing on whether SSL is enabled or not on the server (which is what we try to establish). Probably some comments on that code could help.\n\nI see what you're saying about testing with HTTP, though, but quite frankly, I don't think that those tests are really necessary - they simply produce a timeout (which also adds to the duration of the tests). While it is technically possible to have HTTP and HTTPS listening on the same port, it's quite a complicated undertaking and it's far beyond what Spring Boot itself and its embedded servers support - so once we've established that the target port listens to HTTPS, we can safely assume that HTTP is not supported. (We do that kind of test in reverse - testing HTTP first for SingleNodeApplicationWithDefaultSecurityTest, but in that case there's no timeout of the client,  and the failure is quite immediate, so it is less expensive). \n"}
{"iteration": 6, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3802#discussion_r249519855", "body": "That is how we intend that to be used. Though from CSRF protection perspective it can be abused just the same. The rule of thumb is the GET method requests should not modify server state."}
{"iteration": 6, "tag": "yes", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528706929", "body": "changing this is also going to change some non-security uses, e.g. we optionally use it to obscure values printed from rfile metrics gathering. We'll need to enumerate these and release note the change in behavior. (or we could make something like a `NON_CRYPTO_USE_HASH_ALGORITHM` that we keep as SHA-256)"}
{"iteration": 6, "tag": "broken", "repo": "eclipse-edc/Connector", "url": "https://github.com/eclipse-edc/Connector/pull/3553#discussion_r1365778460", "body": "## Missing Override annotation\n\nThis method overrides [CredentialVerifier.verify](1); it is advisable to add an Override annotation.\n\n[Show more details](https://github.com/eclipse-edc/Connector/security/code-scanning/1108)"}
{"iteration": 6, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/90141#discussion_r976550983", "body": "This is because no permission group matched the resource, or its alias/datastream, so no FLS/DLS permissions are applicable."}
{"iteration": 6, "tag": "broken", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/11388#discussion_r1488371860", "body": "## Use of a broken or risky cryptographic algorithm\n\nCryptographic algorithm [SHA1](1) is weak and should not be used.\n\n[Show more details](https://github.com/jetty/jetty.project/security/code-scanning/484)"}
{"iteration": 6, "tag": "yes", "repo": "tony-framework/TonY", "url": "https://github.com/tony-framework/TonY/pull/126#discussion_r240746689", "body": "Hmm ok yeah I was thinking that we have our own private network so people can't even access it from outside, but we shouldn't expose extra details for the sake of security. I'll update this and other instances that use real hostname/path/etc."}
{"iteration": 6, "tag": "no", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/10563#discussion_r369627698", "body": "Good question. I think that all different types of authentication can be configured through CSR options and will be used by `CachedSchemaRegistryClient` if any:\r\nhttps://docs.confluent.io/current/schema-registry/security/index.html"}
{"iteration": 6, "tag": "broken", "repo": "pac4j/vertx-pac4j", "url": "https://github.com/pac4j/vertx-pac4j/pull/4#discussion_r22228649", "body": "I don't think so. If the authentication mechanism uses POSTed data, we have to register to the endHandler who is triggered when all the data are available. This is important because all data have to be available before sending an authentication message to the pac4j manager module.\n"}
{"iteration": 6, "tag": "yes", "repo": "eclipse/kura", "url": "https://github.com/eclipse/kura/pull/4105#discussion_r941481599", "body": "There is already a message for authentication failed. I believe this message here is used in audit log to report that the user has failed a login using the password provider.\r\nI think this can be helpful, while inspecting the logs, to understand when and where the user or attacker tried to access. "}
{"iteration": 6, "tag": "yes", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/11457#discussion_r302181903", "body": "Removed the other if as the firewall checks needs to be done for private instances too "}
{"iteration": 6, "tag": "unclear", "repo": "spring-projects/spring-boot", "url": "https://github.com/spring-projects/spring-boot/pull/26418#discussion_r632768642", "body": "We now require valid SSL properties as the `server.ssl.enabled` kicks on the SSL auto-config. "}
{"iteration": 6, "tag": "no", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/12709#discussion_r936261540", "body": "If `initializeSecurity()` makes an API call to Calimero, I would propose to explicitly guard that call:\r\n```\r\ntry {\r\n    callCalimero();\r\n}\r\ncatch (Exception e) {\r\n    // This is a bug, handle gracefully - just as example:\r\n    logger.trace(\"\", e);\r\n    throw KnxException(\"Unexpected Calimero exception\", e)\r\n}\r\n```\r\n\r\nHere and below I would then explicitly catch checked exceptions from own code and documented runtime exceptions from Calimero if they are not mapped/rethrown from own code.\r\n\r\nIn other words: Yes, it would be fine to remove it, if at the same time making sure we have guards elsewhere to make sure the binding works reliably even if Calimero misbehaves."}
{"iteration": 6, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/10271#discussion_r622786068", "body": "@satishd interesting, so are you saying `RemoteLogSegmentMetadata` being public means it could be used outside the Broker binary? If so, where?"}
{"iteration": 6, "tag": "no", "repo": "apache/hadoop", "url": "https://github.com/apache/hadoop/pull/3956#discussion_r803961478", "body": "Actually, it isn't. I was more concerned with what would happen with an encryption zone or snapshot root. You'd need to make a mock child file system that implements a custom getTrashRoot(path)."}
{"iteration": 6, "tag": "broken", "repo": "microsoft/appcenter-sdk-android", "url": "https://github.com/microsoft/appcenter-sdk-android/pull/55#discussion_r72143538", "body": "More importantly why is it there at all? Seems like noone else accesses it, should be private.\n"}
{"iteration": 6, "tag": "unclear", "repo": "confluentinc/schema-registry", "url": "https://github.com/confluentinc/schema-registry/pull/1949#discussion_r668924991", "body": "It's still used by the SR ACL Authorizer security plugin (for now)."}
{"iteration": 6, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/3758#discussion_r136075618", "body": "On the broker-side this is not fatal, but typically caused by a mis-configured client. For clients, it is typically fatal, but could sometimes just be a clock-mismatch where a retry could succeed."}
{"iteration": 6, "tag": "no", "repo": "Netflix/mantis", "url": "https://github.com/Netflix/mantis/pull/159#discussion_r841955757", "body": "nit: in this case IMO null check is enough to shutdown pushServerSse and httpServer, which is slightly safer if for any reason both of them got created."}
{"iteration": 6, "tag": "unclear", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/899#discussion_r379252079", "body": "what if whole hdfs root is encrypted and user does not want non-encrypted CMroot ?"}
{"iteration": 6, "tag": "no", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4599#discussion_r539705336", "body": "Tiny issue here is that the comment refers to SSL still being available for outgoing connections but this switched the order so now it's implying TLS is still available for outgoing connections to legacy services. "}
{"iteration": 6, "tag": "broken", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5055#discussion_r1142722885", "body": "## Useless parameter\n\nThe parameter 'unusedBlock' is never used.\n\n[Show more details](https://github.com/hyperledger/besu/security/code-scanning/858)"}
{"iteration": 6, "tag": "no", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/79#discussion_r330779918", "body": "IntelliJ detected they were only used in package private use cases.  Principal of least privilege."}
{"iteration": 6, "tag": "no", "repo": "Karumi/Rosie", "url": "https://github.com/Karumi/Rosie/pull/28#discussion_r47632361", "body": "A possible scenario is if you want to persist information for long time. The user profile or any kind of long live entity. You need to persist the TTL to be able to keep the information from the data base if the app dies.\n"}
{"iteration": 6, "tag": "broken", "repo": "hibernate/hibernate-orm", "url": "https://github.com/hibernate/hibernate-orm/pull/7384#discussion_r1340046236", "body": "## Useless parameter\n\nThe parameter 'intField' is never used.\n\n[Show more details](https://github.com/hibernate/hibernate-orm/security/code-scanning/25266)"}
{"iteration": 6, "tag": "broken", "repo": "jenkinsci/email-ext-plugin", "url": "https://github.com/jenkinsci/email-ext-plugin/pull/441#discussion_r1161322548", "body": "## Stapler: Missing POST/RequirePOST annotation\n\nPotential CSRF vulnerability: If MailAccountDescriptor#doCheckCredentialsId connects to user-specified URLs, modifies state, or is expensive to run, it should be annotated with @POST or @RequirePOST\n\n[Show more details](https://github.com/jenkinsci/email-ext-plugin/security/code-scanning/24)"}
{"iteration": 6, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/309#discussion_r459798455", "body": "Protected?"}
{"iteration": 6, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/10031#discussion_r955321517", "body": "It does in case one deliberate accesses the same instance from multiple threads, but there are no thread-safety guarantees for RandomAccessFile. The same shared buffer approach is used in `DataInputStream` so I think we can use it here as well."}
{"iteration": 6, "tag": "yes", "repo": "google/fhir-data-pipes", "url": "https://github.com/google/fhir-data-pipes/pull/485#discussion_r1104065731", "body": "by user-input, we typically consider values being fed from UI which might potentially pose the threat of SQL injection, for which its advised to use PreparedStatements"}
{"iteration": 6, "tag": "yes", "repo": "wildfly/wildfly", "url": "https://github.com/wildfly/wildfly/pull/3281#discussion_r1884181", "body": "Good point, I'll change the setContextID method to check for a security manager and avoid unnecessary use of a privileged action to set the context.\n"}
{"iteration": 6, "tag": "no", "repo": "apache/geode", "url": "https://github.com/apache/geode/pull/1478#discussion_r169462413", "body": "I thought the intent was that the user should see a message like:\r\n\r\n`Security Manager is enabled - unable to auto-connect. Please connect with --user and --password` when they start a locator."}
{"iteration": 6, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/4388#discussion_r963900094", "body": "Its a dummy action that is used to filter the permitted PITs.\r\n\r\nSo `NodesGetAllPitAction` -----makes a transport call to `GetAllPitsAction` ---> Which security plugin interjects and **replaces the list of PITs with list of permitted PITs**\r\n\r\nThis works because `GetAllPitsAction` is of type `indices:data/read` action, so PITs will be filtered based on user index permissions."}
{"iteration": 6, "tag": "yes", "repo": "confluentinc/ksql", "url": "https://github.com/confluentinc/ksql/pull/1664#discussion_r206468874", "body": "This is an interesting one. Not sure what is the best approach. It might be that the UDF needs security information to do its job. (Think UDF that calls out to external service, e.g. DB, or maybe Kafka).\r\n\r\nHumm....\r\n\r\nHow about we limit passed config to anything prefixed with `ksql.functions`?"}
{"iteration": 6, "tag": "no", "repo": "geonetwork/core-geonetwork", "url": "https://github.com/geonetwork/core-geonetwork/pull/6494#discussion_r967044267", "body": "Is there a reason the AUTOLOGIN option was not added?\r\nIn our case, we don't want anonymous user access on our system so we use the AUTOLOGIN so that the user is automatically redirected to the login if they are not logged in."}
{"iteration": 6, "tag": "yes", "repo": "openhab/openhab-core", "url": "https://github.com/openhab/openhab-core/pull/1735#discussion_r510257246", "body": "This is only when the page cannot be loaded from the bundle resources, I don't think it will ever happen. I didn't know how to handle this exception, any suggestion is welcome.\r\nIn general authentication failures are logged but not shown in detail to the user on the webpage (it only says \"Please try again\") because you don't want to divulge too much (i.e. does the account exist, and only the password is wrong, etc.)."}
{"iteration": 6, "tag": "unclear", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/6021#discussion_r763473759", "body": "Something for later would be to remove the option if (new) telemetry reveals this is never used. We chose to add this for safety in a security update just in case `SessionFixationProtectionStrategy` failed for some realms."}
{"iteration": 6, "tag": "broken", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/1070#discussion_r36176229", "body": "The registry is used to authorize which users are actually allowed to use Yubikey. A separate registration process may be available that allows users to register their device with their userid and only then they can use YubiKey with a registered device. Otherwise, I could just log in with my own Yubikey as you! Just because the OTP is a valid token, it doesnt mean it's actually authorized and is a valid credential.\n"}
{"iteration": 6, "tag": "no", "repo": "lavalink-devs/lavaplayer", "url": "https://github.com/lavalink-devs/lavaplayer/pull/50#discussion_r1429323283", "body": "Probably worth keeping until we know for sure logging in isn't required, similar to the YT age restriction stuff. If it comes to light that some videos require being logged in then the option is there for users."}
{"iteration": 6, "tag": "no", "repo": "syndesisio/syndesis", "url": "https://github.com/syndesisio/syndesis/pull/1184#discussion_r163485524", "body": "Could we catch GeneralSecurityException here instead?"}
{"iteration": 6, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3545#discussion_r202173920", "body": "It makes an assumption that the logs are stored on the disk.\r\nSome plugins like Logstash plugin do not actually do that, especially if there is External Logging implementation like https://github.com/jenkinsci/logstash-plugin/pull/18 in place\r\n\r\nNot a big problem for this PR as long as the method is overridable. \r\nBut it would great to ensure it does not blow up if the log file does not exist\r\n"}
{"iteration": 6, "tag": "broken", "repo": "Aiven-Open/klaw", "url": "https://github.com/Aiven-Open/klaw/pull/2102#discussion_r1420447986", "body": "## Disabled Spring CSRF protection\n\nCSRF vulnerability due to protection being disabled.\n\n[Show more details](https://github.com/Aiven-Open/klaw/security/code-scanning/294)"}
{"iteration": 6, "tag": "no", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/945#discussion_r622474180", "body": "This might be a good idea though, this way the plugin cannot get access to classes that we want to keep more hidden."}
{"iteration": 6, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/11033#discussion_r202469188", "body": "To answer your question, it could be any character that is a reserved noncharacter in unicode spec (http://www.unicode.org/faq/private_use.html#nonchar_codes). This is to ensure that customers don't use it intentionally in their files. Another requirement is that it could be encoded with UTF-8 to construct S3Select XML request string as described in https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html"}
{"iteration": 6, "tag": "no", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441792099", "body": "For SAS based auth? Yes. Users of this SDK always have to have their SSLContext trust iothub's certs. This isn't something that the JVM just picks up from the physical device's certificate store"}
{"iteration": 6, "tag": "yes", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/7890#discussion_r1289414253", "body": "I talked with @tinker-michaelj about this same question and we concluded this was the safest thing to do. The only circumstance where the hash can be missing is during genesis, and only for the first 3 transactions. And even then, it may be that it isn't null or empty, because the genesis account creation should populate it, and UtilPrng calls don't happen that early in genesis.\r\n\r\nBut if it were to ever happen, there really isn't a way for a bad guy to exploit it. Certainly on mainnet there is no way. And if it ever did happen, working is probably better than not. But we do at least get a log message. Maybe we should make it a warning instead of info and put a trigger on it. If it ever happened, we'd want to know."}
{"iteration": 6, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/8466#discussion_r1293625952", "body": "I kept metadata attributes only instead of encryptionMetadata to allow handler to be created even with ParsedCiphertext which contains same info but is a different object type. One use case could be where we have to re-encrypt some content. In this use case, we will have a ParsedCipherText and will need to create encryption handler for encryption. We don't have this use case yet though."}
{"iteration": 6, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/40246#discussion_r1580944067", "body": "> even say that it could be seen as a potential security issue if you can easily fill the logs with stacktraces by disconnecting clients\r\n\r\nDefinitely. \r\n\r\nAlso, I am fairly sure we **don't** log these errors (or warnings) in our REST stack when the connection goes away before the response can be written"}
{"iteration": 6, "tag": "broken", "repo": "camunda/zeebe", "url": "https://github.com/camunda/zeebe/pull/16931#discussion_r1526524335", "body": "## Useless parameter\n\nThe parameter 'var2' is never used.\n\n[Show more details](https://github.com/camunda/zeebe/security/code-scanning/4620)"}
{"iteration": 6, "tag": "yes", "repo": "traccar/traccar", "url": "https://github.com/traccar/traccar/pull/3373#discussion_r128489533", "body": "Oh, looks like I misplaced it, it should be upper before the loop.\r\nJust security and DOS, it is possible that someone pass JSON with a lot of object we should not loop over it."}
{"iteration": 6, "tag": "no", "repo": "IQSS/dataverse", "url": "https://github.com/IQSS/dataverse/pull/7958#discussion_r658256093", "body": "Possibly. I'll check with Sciences PO in particular. (The idea of allow per-collection restrictions on metadata language has come up, which could eventually make just using \":Languages\" more palatable if people do want to limit the metadata languages to a subset of what can be used in the UI.)"}
{"iteration": 6, "tag": "no", "repo": "geoserver/geoserver", "url": "https://github.com/geoserver/geoserver/pull/3568#discussion_r293719182", "body": "That should only be perforamnce related, the AdvertisedCatalog class should be filtering away layers that are not advertised regardless (and there might well be a bug in there)"}
{"iteration": 6, "tag": "no", "repo": "jenkinsci/bitbucket-branch-source-plugin", "url": "https://github.com/jenkinsci/bitbucket-branch-source-plugin/pull/334#discussion_r462691602", "body": "As you noted, it may not be safe to hold a reference to this.  I don't know either. Let's assume for the moment that it is safe."}
{"iteration": 6, "tag": "unclear", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4508#discussion_r482575747", "body": "You raise an interesting question, AFAIK basic HTTP authentication requires a username, but will work with a password that is an empty string.  \r\n\r\nA quick search found bugs in other projects where they are failing to support null passwords.  **_From my point of view the question is really whether we should allow empty passwords or not._**  \r\n\r\nIn your review of the original PR in April, you suggested that  customValidate for the controller be enhanced to throw an error if auth type was basic and either username or password were unset.  \r\n\r\nI've done as  you requested in that orignal PR, and the UX will display a validation error with a meaningful message that both username and password are required when auth type is basic.  \r\n\r\nBottom line here is I'll bend to your judgement on this, let me know what you think we should do "}
{"iteration": 6, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/3020#discussion_r219712821", "body": "Our policy so far has been that passwords do not support expression language, for a couple reasons:\r\n1. How to evaluate if a password `abc${def}` should be interpreted as `abc` + *the value of(`def`)* or the literal string `abc${def}`\r\n1. The variable registry is not designed to store sensitive values securely, so if a password is stored here, it can be accessed by an unauthorized user"}
{"iteration": 6, "tag": "no", "repo": "eclipse-edc/Connector", "url": "https://github.com/eclipse-edc/Connector/pull/235#discussion_r748487944", "body": "Sure claims are verifiable presentations provided in a token or verifiable credentials provided by another system such as an Identity Hub. Attributes are decorations added by an extension in the provider connector to denote further characteristics about a participant agent. For example, an attribute could be the partner category the agent is in. This information could be obtained by the extension from a backend system. "}
{"iteration": 6, "tag": "no", "repo": "apache/hudi", "url": "https://github.com/apache/hudi/pull/4363#discussion_r771772917", "body": "While i agree that this is improbable -- we can't rule out tho that JLS does not rule out possibility that W2 will be able to grab the lock first (b/c there're no explicit sync barriers between those that will guarantee happens-before relationship)"}
{"iteration": 6, "tag": "yes", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/733#discussion_r205907157", "body": "> it launches two codepaths\r\n\r\nIt's not exactly like there will be two codepaths based on `allowInsecureRegistries`. They cross-over, for example, you can first contact an HTTP server (failover-to-HTTP occurred) which redirects you to a secure HTTPS server (or vice versa). With `callWithInsecureRegistryHandling()`, you don't have to think about those things anymore. You just pass a URL to `callWithInsecureRegistryHandling()` recursively and it will handle things correctly.\r\n\r\n> From the function call here, it seems like insecure registry handling is the default.\r\n\r\nYou are saying the naming `callWithInsecureRegistryHandling` is giving you the impression that it will attempt insecure communication, right? I'll think about a better name, but if you have some suggestions, let me know."}
{"iteration": 6, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/2897#discussion_r319662958", "body": "> please at least rename readSecret to readSecrets given that all of them are returned and to keep an option for a readSecret shortcut returning a single value open\r\n\r\ndone\r\n\r\n> I'd vote for an 'internal' package qualifier for VaultClient - but if you prefer to keep where it is now then it is fine.\r\n\r\ndone\r\n\r\n> Absolutely, there should be a single type of the http client only (let it be okhttp for now), why there would be more than one...\r\n\r\ndone\r\n\r\n> I agree that the right way forward is indeed to have VaultKvService and VaultDbService to support the other stores in the future and avoid mixing everything in the same interface.\r\n\r\ndone\r\n\r\n> But as I said earlier, I'm not sure about a dedicated VaultAuthService - would users use it on its own ?\r\n\r\nthis would serve 2 purposes:\r\n- I need it as a singleton because it is keeping the current token with information to renew it if necessary\r\n- I am still convinced that there is a use case for direct vault access (ie the VaultClient operations). and if we open that up, people will need a client token, which would be provided by the VaultAuthService.\r\nI have always believed that there was room for 2 abstraction levels: service level with the magic, and client level with direct access to vault, such as https://github.com/BetterCloud/vault-java-driver\r\npeople would use one or the other level, or both in the same project if some operations are not provided at the service level. they would always have the option of going to the client level.\r\nright now, if everything they need is not in the quarkus vault service level, they would have to bring vault-java-driver in their project for the extra operations they are missing. and they would have to do auth themselves. everything the extension does very well.\r\n\r\nbut we have had this discussion several times. I can see you have not been convinced so far. and I have refactored the code so many times. so let's move on.\r\n\r\n> And to keep it simple, please consider just having the VaultServiceImpl, implementing both VaultKvService and VaultDbService\r\n\r\nconceptually I need the vault client and the vault auth manager to be singletons. since they are cdi objects, I decided to move all business logic into a set of managers, held by a single VaultManager. now VaultKvService and VaultDbService are just empty shells delegating to managers. there is enough logic to separate code into different kv manager from db.\r\n\r\n> perhaps all of these service interfaces should live in the vault.services package, instead of vault.api\r\n\r\nI have reorganized packages:\r\n- io.quarkus.vault: cdi objects\r\n- io.quarkus.vault.internal\r\n- io.quarkus.vault.config\r\n\r\nhopefully this should be clearer now.\r\n\r\n> the configuration property for the VaultKvService key to be used to retrieve an individual secret from a map; and I guess the same for the dbrole for the VaultDbService\r\n\r\nsecrets will be fetched using the vault config source: configure a quarkus.vault.secret-config-path and everyting at that path will be mounted as properties in MP Config.\r\nfor all the other uses cases, the developer will user VaultKvService by providing the path. I do not think we should do an extra property. this would be confusing with quarkus.vault.secret-config-path\r\nthe dbrole is a property of the datasource. see VaultDataSourceRuntimeConfig\r\n\r\nhow does it sound?"}
{"iteration": 6, "tag": "unclear", "repo": "apache/incubator-fury", "url": "https://github.com/apache/incubator-fury/pull/1398#discussion_r1518581862", "body": "How about set the `suppressClassRegistrationWarnings` to true by default. Users can set it to false if they want to do some security audit"}
{"iteration": 6, "tag": "no", "repo": "apache/hbase", "url": "https://github.com/apache/hbase/pull/4019#discussion_r781593686", "body": "I don't think we actually need to register a provider with the JCA security provider framework because we don't actually use it. IIRC, Kafka relies on JAAS to automatically perform the logins for them, whereas HBase explicitly sets up the implementation to use (via the AuthenticationProviderSelector). I think we can drop this class entirely."}
{"iteration": 6, "tag": "unclear", "repo": "apache/camel", "url": "https://github.com/apache/camel/pull/12769#discussion_r1457569548", "body": "The `CertificateConfigurationHelper` is not generally needed. Usually the DtlsConnectorConfig.Builder creates one automatically and applies that to the certificate provider and verifier. The idea behind this is, if remote implementations are used, traversing the credentials may fail and so someone can pass in the default values according the requirements. If local \"stores\" are used, then the default traverse them and collect the default parameters automatically. \r\nI would remove it here. \r\nOtherwise, if you want to keep it, you would need to apply it to the certificate provider and verifier in order to get the defaults filled (see ConfigurationHelperSetup)."}
{"iteration": 6, "tag": "no", "repo": "eclipse-sw360/sw360", "url": "https://github.com/eclipse-sw360/sw360/pull/941#discussion_r477119912", "body": "I was under the impression that this is not possible due to Thrift not being threadsafe.\r\nSince the calls are made via Spring we can't control the threads. Hence the client could be corrupted.\r\nSince I am not sure what exactly thrift does under the hood to its client in a thread I would opt for the safest option, which is to declare a new one for each thread."}
{"iteration": 6, "tag": "no", "repo": "googleapis/java-bigtable-hbase", "url": "https://github.com/googleapis/java-bigtable-hbase/pull/372#discussion_r35463671", "body": "Can credentials be null? Can you document or log warning?\n"}
{"iteration": 6, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/5711#discussion_r703750810", "body": "I would suggest `@Restricted(Beta.class)` so this is only offered to `bouncycastle-api`. I fear that plugin developers will otherwise abuse this as a way to load third-party libraries into their plugin from disk without bundling them (e.g. picking up an SDK JAR from some product) rather than creating a new `URLClassLoader` as they should."}
{"iteration": 6, "tag": "yes", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/214#discussion_r45092336", "body": "This probably should be a post instead of an get. The url for the get request includes the access token which is insecure. If this is switched to a post, all the parameters are passed in the body of the https request, which will be secure.\n"}
{"iteration": 6, "tag": "unclear", "repo": "apache/hadoop", "url": "https://github.com/apache/hadoop/pull/4692#discussion_r944520433", "body": "Should we be permissive of case-insensitive matches?\r\n\r\nOr perhaps a subsequent audit of hostname comparisons is in order.\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc4343"}
{"iteration": 6, "tag": "broken", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/13686#discussion_r1073002236", "body": "## Javadoc has impossible 'throws' tag\n\nJavadoc for populateCatalog claims to throw DuplicateKeyException but this is impossible.\n\n[Show more details](https://github.com/apache/druid/security/code-scanning/3688)"}
{"iteration": 6, "tag": "broken", "repo": "eclipse-edc/Connector", "url": "https://github.com/eclipse-edc/Connector/pull/4086#discussion_r1551386404", "body": "## Unread local variable\n\nVariable 'Object messages' is never read.\n\n[Show more details](https://github.com/eclipse-edc/Connector/security/code-scanning/1331)"}
{"iteration": 6, "tag": "no", "repo": "apache/samza", "url": "https://github.com/apache/samza/pull/1403#discussion_r462642571", "body": "Agree I've seen partial protection in several places of Samza so I think it would be fine here. Labeling only what you need to as protected is also better for the reader because it will restrict the set of functionality a subclass can override. IMO, I'd be in favor of labeling only what you need to as protected."}
{"iteration": 6, "tag": "no", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/3479#discussion_r211332698", "body": "In the mechanism I used in 3.6, our X509 authentication requests didn't contain a body, it was just a POST request with the client authentication.  Without this required=false, spring throws an exception as the RequestBody is required by default."}
{"iteration": 6, "tag": "yes", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/6580#discussion_r556878033", "body": "should this always be true?  We don't support auth over insecure connections, so I would assume this is always true."}
{"iteration": 6, "tag": "yes", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/106371#discussion_r1528878245", "body": "Yes, we definitely _do not_ want to give any non-system users access to the `.secrets-inference` index. We want the secrets to be write-only from end users' point-of-view, and this index must only be accessed by system \"users\" inside the Elasticsearch code."}
{"iteration": 6, "tag": "broken", "repo": "apache/iotdb", "url": "https://github.com/apache/iotdb/pull/8432#discussion_r1056466177", "body": "## Credentials should not be hard-coded\n\n<!--SONAR_ISSUE_KEY:AYU_w0hAEQh_Wttxqc5Y-->Revoke and change this password, as it is compromised. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=apache_incubator-iotdb&issues=AYU_w0hAEQh_Wttxqc5Y&open=AYU_w0hAEQh_Wttxqc5Y&pullRequest=8432\">SonarCloud</a></p>\n\n[Show more details](https://github.com/apache/iotdb/security/code-scanning/101)"}
{"iteration": 6, "tag": "yes", "repo": "apache/knox", "url": "https://github.com/apache/knox/pull/433#discussion_r613009311", "body": "Two notes here:\r\n- It's not part of any of the public API invocations so there is no risk here in terms of DOS\r\n- Even if we are talking about a large number of tokens, getting them from the database should not be a problem\r\n\r\nI'm going to run our own performance testing tool with this implementation to see actual numbers (e.g. having 1 million tokens in the DB) but I doubt that querying even millions of tokens from a DB causes a problem."}
{"iteration": 6, "tag": "broken", "repo": "camunda/zeebe", "url": "https://github.com/camunda/zeebe/pull/11792#discussion_r1119846265", "body": "## Unread local variable\n\nVariable 'MutableProcessMessageSubscriptionState subscriptionState' is never read.\n\n[Show more details](https://github.com/camunda/zeebe/security/code-scanning/3248)"}
{"iteration": 6, "tag": "no", "repo": "dhis2/dhis2-core", "url": "https://github.com/dhis2/dhis2-core/pull/10682#discussion_r863796870", "body": "I would not use count if all we want is know whether there is a relationship with the UID and there is a possibility for more than one relationship with the UID (so no unique index).\r\n\r\nSomething like\r\n\r\n`select uid from relationship where uid=:uid limit 1;`\r\n\r\nwould be enough I assume"}
{"iteration": 6, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/25517#discussion_r782576399", "body": "update authentication with Client secret credential for China cloud."}
{"iteration": 6, "tag": "unclear", "repo": "eclipse/hawkbit", "url": "https://github.com/eclipse/hawkbit/pull/721#discussion_r246740341", "body": "Would it make sense to make this configurable via HawkbitSecurityProperties (it was configurable before via Spring)?"}
{"iteration": 6, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/19519#discussion_r1106693259", "body": "I used `MockAlwaysExpiredAuthenticationProvider` to test authentication refresh because it guaranteed the `ServerCnx` would send the `AuthChallenge` command."}
{"iteration": 6, "tag": "broken", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/1285#discussion_r1356516272", "body": "## Insertion of sensitive information into log files\n\nThis [potentially sensitive information](1) is written to a log file.\n\n[Show more details](https://github.com/SAP/cloud-security-services-integration-library/security/code-scanning/374)"}
{"iteration": 6, "tag": "yes", "repo": "constellation-app/constellation", "url": "https://github.com/constellation-app/constellation/pull/461#discussion_r416283749", "body": "The lookup service is used for discovering the secret key (and now init vector) needed to encrypt/decrypt."}
{"iteration": 6, "tag": "no", "repo": "rsocket/rsocket-java", "url": "https://github.com/rsocket/rsocket-java/pull/944#discussion_r504136246", "body": "Sometimes (many times?) an interceptor might not care about the metadata. I'm wondering if we can avoid the slice in that case? We could for example pass the request `Payload` and then the interceptor can access the metadata from that if it needs it. "}
{"iteration": 6, "tag": "broken", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5030#discussion_r1092660098", "body": "## Potential input resource leak\n\nThis FileReader is not always closed on method exit.\n\n[Show more details](https://github.com/hyperledger/besu/security/code-scanning/799)"}
{"iteration": 6, "tag": "no", "repo": "jitsi/jitsi", "url": "https://github.com/jitsi/jitsi/pull/479#discussion_r188422980", "body": "And I even had timeouts without any validation failures. Granted, I was on a VPN, but both sides with >= 100 MBit/s"}
{"iteration": 6, "tag": "unclear", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/5087#discussion_r151003865", "body": "I could move the authorization check into the resource, but to skip authentication I'd still need to setup the UnsecuredResourceFilter with the unsecured paths (since the authentication checks happen before the request hits the resource handler methods).\r\n\r\nMaybe another approach for authentication could be to have the resources with unsecured endpoints register with some singleton injected registry object that UnsecuredResourceFilter checks (and have UnsecuredResourceFilter apply to all paths), but I'd rather handle that in a separate PR."}
{"iteration": 6, "tag": "unclear", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/1398#discussion_r48650325", "body": "What's the callback for? Does it work like the OAuth server support as a facade which delegates to the CAS server for authentication?\n"}
{"iteration": 6, "tag": "yes", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/13945#discussion_r1201622626", "body": "Trust settings are stored per certificate. That is, when you do `security add-trusted-cert`, you have to pass a certificate that the entry is created for. It does not matter then, if the certificate is actually present/loaded into any keychain. If the certificate is not in the keychain, a `security dump-trust-settings` will not show the trust entry then but after you add it, it gets visible.\r\n\r\nSo, that means, if two certificates are the same, no matter if they were loaded from different keychains or under different aliases (don't know whether the latter is possible though), they will share the same trust records."}
{"iteration": 6, "tag": "broken", "repo": "aws-greengrass/aws-greengrass-nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/1417#discussion_r1135772428", "body": "## Unread local variable\n\nVariable 'Consumer<GreengrassLogMessage> listener' is never read.\n\n[Show more details](https://github.com/aws-greengrass/aws-greengrass-nucleus/security/code-scanning/121)"}
{"iteration": 6, "tag": "no", "repo": "PGMDev/PGM", "url": "https://github.com/PGMDev/PGM/pull/338#discussion_r389088976", "body": "> But when i enter in `player#getBukkit#getDisplayName` it keeps the colors and everything when displaying the best, does this also work with UUID? I only see a potential error if players use /nick, but it should be prevented to disguise as someone existing anyways.\r\n\r\nPlayer names are not unique so you shouldn't use them as a key anywhere.\r\n\r\n> And why private? It is accessed by StatCommands\r\n\r\nhttps://dzone.com/articles/following-oop-principles-hermetization-in-java"}
{"iteration": 6, "tag": "yes", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/4207#discussion_r336149747", "body": "We authenticated the server with SSL as some entity that we trusted. So, we're either being man-in-the-middled or the OP's metadata has been poisoned. Later, when the OP issues an ID token, we'll reject it if its issuer doesn't match the config one. If we're really scared of this, we should be verifying the signature of the ID token as well. I think that this is not a risk and something that we should do in the name of interop."}
{"iteration": 6, "tag": "broken", "repo": "apache/incubator-baremaps", "url": "https://github.com/apache/incubator-baremaps/pull/712#discussion_r1245174308", "body": "## Information exposure through a stack trace\n\n[Error information](1) can be exposed to an external user.\n\n[Show more details](https://github.com/apache/incubator-baremaps/security/code-scanning/733)"}
{"iteration": 6, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420441690", "body": "IIUC `add` and `terminate` maybe called concurrently?\r\n- If so this is a best effort check and we may still add items unless there is external synchronization. Should we remove the check as it isn't reliable (it may provide a false sense of security from code inspection and depending upon usage pattern)?\r\n- if not can you clarify the threading/ordering semantics on the base interface?"}
{"iteration": 6, "tag": "broken", "repo": "openhab/openhab1-addons", "url": "https://github.com/openhab/openhab1-addons/pull/4458#discussion_r66720134", "body": "In this case, someone's added a key that's not recognized by the system, like <code>myInvalidKey=7</code>.\n\nThis shouldn't cause any problems for the binding, however, as it only examines known keys. So it's merely a nicety for the user. \"Hey, we found this setting we don't recognize. It's no problem for us since we're ignoring it completely. Why's it here again?\"\n"}
{"iteration": 6, "tag": "broken", "repo": "jenkinsci/git-plugin", "url": "https://github.com/jenkinsci/git-plugin/pull/1221#discussion_r912506581", "body": "## Jenkins: Plaintext password storage\n\nVariable should be reviewed whether it stored a password and is serialized to disk: passVariable\n\n[Show more details](https://github.com/jenkinsci/git-plugin/security/code-scanning/89)"}
{"iteration": 6, "tag": "no", "repo": "openjdk/jdk", "url": "https://github.com/openjdk/jdk/pull/14839#discussion_r1267148387", "body": "@ferakocz So, with this approach, we are paying the extra cost of encode signature + pad (for the omit null case) even for impls conforming to RFC 8017 spec. Based on the current interoperability testing, do you still feel that this is worthwhile to do?"}
{"iteration": 6, "tag": "no", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/8641#discussion_r679126678", "body": "how about logging access token too?"}
{"iteration": 6, "tag": "broken", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5670#discussion_r1252099851", "body": "## Useless parameter\n\nThe parameter '_ommers' is never used.\n\n[Show more details](https://github.com/hyperledger/besu/security/code-scanning/959)"}
{"iteration": 6, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/41400#discussion_r279338634", "body": "Maybe add a comment here on why this is safe? My head is still spinning on whether this is safe or not, but I currently think the cluster block and primary all permit is enough.\r\n\r\nAlso, I think we can assert that we hold all permits."}
{"iteration": 6, "tag": "no", "repo": "projectnessie/nessie", "url": "https://github.com/projectnessie/nessie/pull/5901#discussion_r1082951796", "body": "I think keeping the `maxRecords` parameter can be helpful. With it we could get a full uncensored page from storage then do all access checks in one batch.\r\n\r\nWe'd have to support getting a page token from an arbitrary element of the result set, though. I think technically it should be possible, because our paging tokens are likely going to be derived either from commit hashes or element names (or both), which are all available from the elements themselves (unless I'm missing something).\r\n\r\nIn that regard, we may have to change `PaginationIterator` to something that holds one page of results and provides continuation tokens for any requested element (roughly similar to [this](https://github.com/stargate/stargate/blob/4971762851c78280dda8564f480d0424b58e7e67/persistence-test/src/main/java/io/stargate/it/PersistenceTest.java#L1810)).\r\n\r\nGranted, we may end up with an empty page in the end, but I think it is ok from the API POV. Also, it might be possible to re-request from upstream if the page ends up being empty."}
{"iteration": 6, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/5782#discussion_r351248333", "body": "My point is you can still have `web-app` type applications as public (although much more secure would be if people just configure their clients as confidential)."}
{"iteration": 6, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/14564#discussion_r981631765", "body": "Can we use the existing [`UnauthenticatedException`](https://github.com/cdapio/cdap/blob/develop/cdap-security-spi/src/main/java/io/cdap/cdap/security/spi/authentication/UnauthenticatedException.java) here instead of creating a new exception?"}
{"iteration": 6, "tag": "broken", "repo": "zinggAI/zingg", "url": "https://github.com/zinggAI/zingg/pull/778#discussion_r1493595216", "body": "## Logger calls should be surrounded by log level guards.\n\nLogger calls should be surrounded by log level guards.\n\n[Show more details](https://github.com/zinggAI/zingg/security/code-scanning/112)"}
{"iteration": 6, "tag": "broken", "repo": "apache/inlong", "url": "https://github.com/apache/inlong/pull/9619#discussion_r1465824212", "body": "## Server-side request forgery\n\nPotential server-side request forgery due to a [user-provided value](1).\n\n[Show more details](https://github.com/apache/inlong/security/code-scanning/72)"}
{"iteration": 6, "tag": "no", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/10499#discussion_r510514679", "body": "Can you add a part to the javadoc about when the input types would not be trustable (is it because of the string nulls from numeric columns, or are there other cases)?"}
{"iteration": 6, "tag": "broken", "repo": "openhab/openhab-addons", "url": "https://github.com/openhab/openhab-addons/pull/2066#discussion_r107887861", "body": "Maybe bugs might come from storing the copies of configuration everywhere imho its more fault-tolerant to refer to the configuration."}
{"iteration": 6, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/3078#discussion_r301108796", "body": "Yeah, that is the idea. So that you just rely on the roles available through a `SecurityIdentity.getRoles` call.\r\n\r\nElytron is very flexible in regards to role mapping and in the future we could also allow apps to customized how roles are actually mapped by using a `RoleMapper`."}
{"iteration": 6, "tag": "yes", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/8125#discussion_r702850548", "body": "There seems to be a security issue, can I send messages to any topic?"}
{"iteration": 6, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/5930#discussion_r234887037", "body": "I think it's not clean code, to wrap an `IllegalArgumentException` with another one. Maybe it's better to update `validateMillisecondDuration()` with a third parameter, that allow to pass a prefix String for the error message? Also, it would be nice to use the same format for the prefix. Here you use `..., value : \" + size` but below you use `interval(%d ms)`.\r\n\r\nI was also checking the usage of `validateMillisecondDuration()` and it's actually used on many other places, and we should improve the exception messages for all IMHO.\r\n\r\nThoughts?"}
{"iteration": 6, "tag": "yes", "repo": "spring-projects/spring-boot", "url": "https://github.com/spring-projects/spring-boot/pull/26418#discussion_r631306764", "body": "We have the `server.ssl.enabled` property. It's possible that SSL may have been enabled through manual configuration, but perhaps it's reasonable to lose auto-configuration of SSL-related metrics in that case."}
{"iteration": 6, "tag": "no", "repo": "apple/servicetalk", "url": "https://github.com/apple/servicetalk/pull/1377#discussion_r579495372", "body": "ideally yes. Ideally this would come from the JDK but [X509TrustManagerImpl](https://github.com/openjdk/jdk11u-dev/blob/master/src/java.base/share/classes/sun/security/ssl/X509TrustManagerImpl.java#L454-L464) just uses the raw string value as well. We could introduce our own constants but we don't really determine what algorithms are and are not supported (we just pass through)."}
{"iteration": 6, "tag": "unclear", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/1532#discussion_r98831865", "body": "Should we add some kind of way of disabling ECP/PAOS support in the secure rest client?  Might be helpful if we run into interoperability issues with other ECP implementations due to vagueness or misunderstandings in the spec.\r\n\r\nIf we do the client then we should also consider if we can disable the ECP server as well.\r\n\r\nIt would be nice if we could setup an another ECP server and client implementation to test compatibility.  Being able to disable the feature might be a good fallback if it takes too long to setups other ECP implementations."}
{"iteration": 6, "tag": "no", "repo": "SAP/cloud-security-services-integration-library", "url": "https://github.com/SAP/cloud-security-services-integration-library/pull/1137#discussion_r1159426269", "body": "how about:\r\nResolves an user token from the configured XSUAA service instance via password grant flow using the Basic HTTP credentials from the request header."}
{"iteration": 6, "tag": "no", "repo": "wso2-attic/product-emm", "url": "https://github.com/wso2-attic/product-emm/pull/91#discussion_r52251890", "body": "\"Authentication Failure...., here Failure could be \"failure\", no need to make it start with a capital.\nAlso error message is bit unclear as it just mentions \"failure due to binary security token\"\n"}
{"iteration": 6, "tag": "yes", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/20885#discussion_r1346747205", "body": "we don't plan to store skewed key values at the moment due to privacy implications regarding user data; rather we will store flags whether the data is skewed or not"}
{"iteration": 6, "tag": "no", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5301#discussion_r1156704880", "body": "The start is called by the Runner.startExternalServices. So initially we will toggle the SSL. There is also a 10-second delay between each retry. So if we expect to use SSL we try without SSL fail wait for 10s and then connect with SSL. This doesn't seem right to me.\r\n\r\nWhy do we need to flip-flop between SSL and non-SSL?"}
{"iteration": 6, "tag": "no", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2396#discussion_r406898309", "body": "I will file an issue around these questions. Ultimately, we should guard accidental misuse and confusion.\r\n\r\nUPDATE: filed #2398."}
{"iteration": 6, "tag": "broken", "repo": "vespa-engine/vespa", "url": "https://github.com/vespa-engine/vespa/pull/508#discussion_r76977584", "body": "We're back to TLS as the default?\n"}
{"iteration": 6, "tag": "no", "repo": "microsoft/team-explorer-everywhere", "url": "https://github.com/microsoft/team-explorer-everywhere/pull/190#discussion_r114116852", "body": "Some users may be confused if they can enter a username with a personal access token.  If they select PAT as the credential type, can we keep the username field disabled or hide it and give it some default value?  Maybe you're already doing something like this and I just need to see the UI."}
{"iteration": 6, "tag": "unclear", "repo": "hyperledger/fabric-gateway", "url": "https://github.com/hyperledger/fabric-gateway/pull/123#discussion_r639833850", "body": "If this is to support state-based endorsement (rather than private data) then it might need to be sent to other orgs to satisfy the chaincode endorsement policy"}
{"iteration": 6, "tag": "no", "repo": "hyperledger/besu", "url": "https://github.com/hyperledger/besu/pull/5192#discussion_r1143498297", "body": "The curve kind (ECDSA vs Edwards) is the same across all current configurations.  The curve parameters (secp256k1 or secp256r1) are applied to the key generator after this construction.\r\n\r\nAlso, this is not for the whole of the public key encryption used in the system, just the key pair generators.  I updated the use of imports to clarify that."}
{"iteration": 6, "tag": "broken", "repo": "hibernate/hibernate-orm", "url": "https://github.com/hibernate/hibernate-orm/pull/7087#discussion_r1282053677", "body": "## Inner class could be static\n\nChildEntity should be made static, since the enclosing instance is not used.\n\n[Show more details](https://github.com/hibernate/hibernate-orm/security/code-scanning/24938)"}
{"iteration": 6, "tag": "no", "repo": "apache/hadoop", "url": "https://github.com/apache/hadoop/pull/2470#discussion_r538859450", "body": "It gets caught by the FileMonitoringTimerTask and from there it's logged. It won't cause any damage, but it will keep logging the error on every reload interval if it's not resolved, potentially filling the logs and disk space."}
{"iteration": 6, "tag": "no", "repo": "apache/commons-bcel", "url": "https://github.com/apache/commons-bcel/pull/46#discussion_r439098739", "body": "-1: We cannot include GPL 2 or GPL 3 code. Please see:\r\n- https://www.apache.org/licenses/GPL-compatibility.html\r\n- https://www.apache.org/foundation/license-faq.html#GPL"}
{"iteration": 6, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2631#discussion_r150914349", "body": ":question: Is there any concern that the system property security.audit.roles can be maliciously modified to turn off auditing for roles?"}
{"iteration": 6, "tag": "no", "repo": "VirtusLab/git-machete-intellij-plugin", "url": "https://github.com/VirtusLab/git-machete-intellij-plugin/pull/174#discussion_r405668489", "body": "Actually, this introduces a possible threat to plugin stability... know what? let's prevent that statically!"}
{"iteration": 6, "tag": "no", "repo": "VoltDB/voltdb", "url": "https://github.com/VoltDB/voltdb/pull/7311#discussion_r449307078", "body": "better safe than sorry"}
{"iteration": 6, "tag": "no", "repo": "ome/openmicroscopy", "url": "https://github.com/ome/openmicroscopy/pull/4850#discussion_r86449141", "body": "same here could remove //Third-party etc.\n"}
{"iteration": 6, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2879#discussion_r165700767", "body": "\u270f\ufe0f Can you add JavaDoc explaining how this helps with the security manager?"}
{"iteration": 6, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/38334#discussion_r1476821783", "body": "After reading on the subject, I think swallowing the exception is the wrong choice. If we cannot create a `SecureRandom` we cannot generate a nonce/iv and therefore we cannot properly perform AES encryption."}
{"iteration": 6, "tag": "unclear", "repo": "confluentinc/schema-registry", "url": "https://github.com/confluentinc/schema-registry/pull/474#discussion_r96604527", "body": "The decision to use a separate `security.protocol` config for the clients was done before my time, but it makes sense from the perspective that only one security protocol is supported. The fact that we don't validate it makes it a bit confusing and it may make sense to add a consistency check in the future (i.e. if a security protocol is defined in `bootstrap.servers`, it must match `security.protocol`)."}
{"iteration": 6, "tag": "broken", "repo": "eclipse-edc/Connector", "url": "https://github.com/eclipse-edc/Connector/pull/3966#discussion_r1514317225", "body": "## Spurious Javadoc @param tags\n\n@param tag \"id\" does not match any actual type parameter of type \"AccessTokenData\".\n\n[Show more details](https://github.com/eclipse-edc/Connector/security/code-scanning/1216)"}
{"iteration": 6, "tag": "unclear", "repo": "apache/hive", "url": "https://github.com/apache/hive/pull/2020#discussion_r582833185", "body": "I am wondering if there are some loopholes here. What happens if lock free drop is enabled and someone drops and recreated an acid table with manually given location? Shouldn't we only allow lock free drop if the table location is managed by hive (that would mean there won't be lockless reads for tables with manual location)"}
{"iteration": 6, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3866#discussion_r251505137", "body": "The class is expected to be public as the `isFullyActive` method could be used by any security realm. \r\n\r\nThe `final` / `private` is \"common\" depending on the project. In Jenkins, in general I would say nope, you can look at `Util` or other classes in the core.\r\nI do not have a really strong opinion about that, but I prefer to keep consistency (to ease future change?) instead of everybody \"bringing his own salt\".\r\n\r\nIn SonarQube, we will have a warning, that a static class must have such stuff."}
{"iteration": 6, "tag": "no", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/15155#discussion_r487667929", "body": "Since this cache is on the driver's side, is there any sanity check in protection from oom? just curious if this cache size can be stored for monitoring so caching on the driver is in a controlled manner."}
{"iteration": 6, "tag": "no", "repo": "apache/doris", "url": "https://github.com/apache/doris/pull/33058#discussion_r1547321512", "body": "Because the data in userinfo requires permissions and password policies, FE can better directly determine the data that needs to be sent."}
{"iteration": 6, "tag": "unclear", "repo": "adobe/aem-core-wcm-components", "url": "https://github.com/adobe/aem-core-wcm-components/pull/1411#discussion_r584151837", "body": "My personal opinion: I wouldn't even allow getting the target page for a link. \r\nIf models want to provide pages, they can provide pages. I feel that including a mechanism to go backwards from a link to a page is going to lead people to abuse the Link interface as a vehicle for passing Page object references. \r\n\r\nThis would be fine, except for the fact that the concept of a Link should be (IMHO) target-agnostic (e.g. page, asset, external, whatever); thus, it's a weak interface that can't be trusted to provide the target page of a link and should not be relied upon to provide that Page object. It requires me to know how the implementation that provided the Link constructed it.\r\n\r\nIt should be just as valid to add a `getTargetAsset()`, or half a dozen other things that it could point to. \r\n\r\nIf we really wanted a reliable mechanism for doing this then I think we would need to have a `PageLink` and `AssetLink` extensions of `Link`, that promise to provide the underlying [not null] object.\r\n"}
{"iteration": 6, "tag": "unclear", "repo": "apache/hadoop", "url": "https://github.com/apache/hadoop/pull/3440#discussion_r751193165", "body": "I am advocating in favor of the encoded version of the key for the following reasons:\r\n\r\n- it might be easier to manage base 64 encoded strings in the configuration\r\n- in ingestion flows where users use azCopy to upload data and then use the ABFS client to access them, they would need to provide both encoded (azCopy) and unencoded (this PR) version of the key.\r\n\r\nAlternatively, we could also use both precomputed values (key and sha) in the provided configuration for the client. "}
{"iteration": 6, "tag": "yes", "repo": "tronprotocol/java-tron", "url": "https://github.com/tronprotocol/java-tron/pull/1857#discussion_r243737941", "body": "![Vulnerability](https://sonarsource.github.io/sonar-github/vulnerability.png 'Vulnerability') Vulnerability: Explicitly declare the visibility for \"settings\". ([squid:S2039](https://sonarcloud.io/organizations/tron-zhaohong/rules#rule_key=squid%3AS2039))\n\n[See it in SonarCloud](https://sonarcloud.io/project/issues?id=java-tron&pullRequest=1857&issues=AWfWTLOAUMkE2J58IJw9&open=AWfWTLOAUMkE2J58IJw9)\n\n[ISSUE_KEY]: AWfWTLOAUMkE2J58IJw9"}
{"iteration": 6, "tag": "broken", "repo": "hibernate/hibernate-orm", "url": "https://github.com/hibernate/hibernate-orm/pull/8366#discussion_r1598647772", "body": "## Useless parameter\n\nThe parameter 'dialect' is never used.\n\n[Show more details](https://github.com/hibernate/hibernate-orm/security/code-scanning/26557)"}
{"iteration": 6, "tag": "broken", "repo": "odpi/egeria", "url": "https://github.com/odpi/egeria/pull/8130#discussion_r1550094111", "body": "## Potential database resource leak\n\nThis PreparedStatement is not always closed on method exit.\n\n[Show more details](https://github.com/odpi/egeria/security/code-scanning/17499)"}
{"iteration": 6, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/83155#discussion_r798716714", "body": "It mirrors the Files.readBytes() which takes a byte count.\r\n\r\nAlso, I do foresee the possibility of using this to read 1 byte. That can be used to check if a URL exists, contents are non-empty, or TLS settings are valid, without downloading the full contents."}
{"iteration": 6, "tag": "unclear", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3604#discussion_r219645388", "body": "Not sure it is really anonymous. It may contain classes of private-source plugins, for example"}
{"iteration": 6, "tag": "no", "repo": "cdapio/cdap", "url": "https://github.com/cdapio/cdap/pull/7037#discussion_r86009984", "body": "All of these are security related, we store similar config for router SSL in security config as well.\n"}
{"iteration": 6, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/91101#discussion_r1005125038", "body": "It seems that security is disabled by default for `INTEG_TEST` distribution. \r\nhttps://github.com/elastic/elasticsearch/blob/0ac81ce52a5474082465d48d68a2a8d5363e758f/build-tools/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchCluster.java#L355-L356\r\n\r\nI think that means most FIPS related stuff will *not* be excercised in tests with `INTEG_TEST` distribution even the `fips.gradle` file configures a bunch of settings, e.g. `xpack.security.fips_mode.enabled`. Theoretically, this is probably a reduced coverage for FIPS since we are currently forcing `DEFAULT` distribution for FIPS tests? \r\n\r\nThat said, there are still tons of tests that use the `DEFAULT` distribution so that coverage is not really an issue. And we can later look into whether it is necessary and how to enable security for INTEG_TEST. "}
{"iteration": 6, "tag": "no", "repo": "apache/kafka", "url": "https://github.com/apache/kafka/pull/5582#discussion_r227408464", "body": "Not sure.  My gut says the benefit would be minimal and the downside to exposing the `Authenticator` (adding complexity to code that now simply asks the `KafkaChannel` to do stuff) would outweigh any benefit, but regardless, if you decide it is something you would like to do maybe it can be addressed as a separate ticket?"}
{"iteration": 6, "tag": "unclear", "repo": "Azure/azure-iot-sdk-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1100#discussion_r568165714", "body": "AMQP itself does not define CBS authentication so much as it allows for services to design systems like it, after all"}
{"iteration": 6, "tag": "yes", "repo": "Netflix/genie", "url": "https://github.com/Netflix/genie/pull/752#discussion_r197878734", "body": "At the very least I would prefer you return some sort of Unmodifiable view out of this method using `Collections` class so that if some malicious piece of code tries to use this it can't actually modify your internal state. I don't even like the idea of exposing this at all."}
{"iteration": 6, "tag": "broken", "repo": "odpi/egeria", "url": "https://github.com/odpi/egeria/pull/8078#discussion_r1516073484", "body": "## Unread local variable\n\nVariable 'String methodName' is never read.\n\n[Show more details](https://github.com/odpi/egeria/security/code-scanning/17220)"}
{"iteration": 6, "tag": "broken", "repo": "apache/avro", "url": "https://github.com/apache/avro/pull/2203#discussion_r1187149458", "body": "## Potential input resource leak\n\nThis SeekableFileInput is not always closed on method exit.\n\n[Show more details](https://github.com/apache/avro/security/code-scanning/2985)"}
{"iteration": 6, "tag": "unclear", "repo": "HubSpot/Singularity", "url": "https://github.com/HubSpot/Singularity/pull/1692#discussion_r160683112", "body": "I would argue that some protection is better than none. Maybe we at least check for exact matches and call it good? That or another way to ensure it is to only take the override if it is set and ignore the executor settings"}
{"iteration": 6, "tag": "yes", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/34180#discussion_r221619331", "body": "I agree that it hurts the API, unfortunately I didn't see a better way of exposing the request information in the log message since the cache key is the wire-protocol bytes of the request and converting the cache key back into a request object would have exposed things on the request that we wouldn't want either. Happy to add a comment as you suggest, also happy to implement a better way of supplying this information if someone can think of one"}
{"iteration": 6, "tag": "no", "repo": "fossasia/open-event-organizer-android", "url": "https://github.com/fossasia/open-event-organizer-android/pull/1120#discussion_r198009709", "body": "I meant decrypted value. Even if you'd be loading value from 15 sources doesn't mean you need 15 functions to get it. You already have a live data for email and password, use that to send the value to view, "}
{"iteration": 6, "tag": "yes", "repo": "cloudfoundry/uaa", "url": "https://github.com/cloudfoundry/uaa/pull/2771#discussion_r1534257406", "body": "Is RS256 what we want as a default? Should this not default to a more secure algorithm?"}
{"iteration": 6, "tag": "broken", "repo": "linkedin/ambry", "url": "https://github.com/linkedin/ambry/pull/231#discussion_r55325983", "body": "The answer seems to say that multiple cookie header _fields_ are prohibited i.e. you cannot have multiple header fields with the key \"COOKIE\". It does not preclude having multiple cookies in the _same_ header. Infact, the question starts off with an illustration of how multiple cookies can be sent in the header\n\n(Quoting from the question)\n\n> Usually, a browser groups cookies into a single Cookie header, such as:\n> Cookie: a=1; b=2\n"}
{"iteration": 6, "tag": "no", "repo": "java-native-access/jna", "url": "https://github.com/java-native-access/jna/pull/738#discussion_r90708981", "body": "You are using ACL in the SetSecurityDescriptorDacl you could check if WinNT#ACL could be used if it enhanced with a subclass that implements Structure.ByReference"}
{"iteration": 6, "tag": "no", "repo": "elastic/elasticsearch", "url": "https://github.com/elastic/elasticsearch/pull/93396#discussion_r1164666431", "body": "I would do this for safety in all places where we are serializing additional info. in some internal places it could even be an assert though probably."}
{"iteration": 6, "tag": "broken", "repo": "apache/accumulo", "url": "https://github.com/apache/accumulo/pull/56#discussion_r46314927", "body": "> No, we need it to be accessible to invoke the method later, I believe\n\nRight, `setAccessible` makes the `protected isOneway` method available for us to bypass Java security and actually invoke the method. We need to keep this instance of the `Method` accessible.\n"}
{"iteration": 6, "tag": "broken", "repo": "enonic/xp", "url": "https://github.com/enonic/xp/pull/10210#discussion_r1250943770", "body": "Unnecessary use of fully qualified name 'Mockito.mock' due to existing static import 'org.mockito.Mockito.mock'\n\n[Show more details](https://github.com/enonic/xp/security/code-scanning/6547)"}
{"iteration": 6, "tag": "broken", "repo": "tink-crypto/tink", "url": "https://github.com/tink-crypto/tink/pull/19#discussion_r14379987", "body": "added support for more algorithms (MD5, SHA1, SHA256, SHA384, SHA512)\n"}
{"iteration": 6, "tag": "broken", "repo": "kestra-io/kestra", "url": "https://github.com/kestra-io/kestra/pull/2272#discussion_r1352917273", "body": "```suggestion\r\n            \"Make sure to keep the webhook key secure. It's the only security mechanism to protect your endpoint from bad actors, and must be considered as a secret. You can use a random key generator to create the key.\\n\" +\r\n```"}
{"iteration": 6, "tag": "yes", "repo": "SasanLabs/VulnerableApp", "url": "https://github.com/SasanLabs/VulnerableApp/pull/357#discussion_r827121014", "body": "Hi, \r\n\r\nWe implemented DoS vulnerability, as we discussed. All levels are vulnerable to DoS, except level 9 where we block DoS, by checking if the file size is bigger than 100000 kB. Only one file can be uploaded for each level."}
{"iteration": 6, "tag": "unclear", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/3542#discussion_r296350601", "body": "Please add the guard check using `StandardSensitivePropertyProvider.handlesProtectionScheme()` or similar to log warning message and return protected value without attempting (and failing) to create a provider implementation for a protection scheme we can't handle. "}
{"iteration": 6, "tag": "yes", "repo": "apache/nifi", "url": "https://github.com/apache/nifi/pull/4603#discussion_r507808251", "body": "My reason for implementing it this way is that I did not want any existing functionality to be available via the new port. The use case when it is reasonable to configure a separate port for health checks is when 2-way SSL is used on the primary port, and the LB can't provide a client certificate. Since the health check port can be used without client authentication, I do not want any information from the primary service (not even header data) to be accessible via that port."}
{"iteration": 6, "tag": "yes", "repo": "IQSS/dataverse", "url": "https://github.com/IQSS/dataverse/pull/7916#discussion_r712473564", "body": "what exactly are we passing here via flash? Is it the password (encrypted or not, should we have any concerns about security here?)\r\n\r\ntagging @qqmyers also to see his thoughts"}
{"iteration": 6, "tag": "yes", "repo": "trinodb/trino", "url": "https://github.com/trinodb/trino/pull/12664#discussion_r891618065", "body": "This is a matter of trust, access and refresh tokens are entrusted to Trino, they are **not** entrusted to the client. Thus giving the user access to the tokens (even if they're their own) breaks our contract with the token issuer (IdP). We don't control the client environment and there's no way for us to ensure or validate that no third-party has access to any storage mechanism the client supports and/or uses, and that is in addition to the possible malicious action of the client/credential holder themselves. Access tokens (and by extension refresh tokens) can grant access to resources which are _not_ directly entrusted to the credential holder. In a way the ability to act on behalf of another user can be more dangerous than what that user could do themselves."}
{"iteration": 6, "tag": "no", "repo": "bazelbuild/bazel-buildfarm", "url": "https://github.com/bazelbuild/bazel-buildfarm/pull/1462#discussion_r1341607464", "body": "I agree that this is hacky and likely not used by anyone. But the fact that the new mechanism only work on aws with lifecycle hook, i'm wondering if we want to keep this functionalities so that users on other cloud platforms can still use graceful shutdown through this. "}
{"iteration": 6, "tag": "unclear", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/3377#discussion_r280167342", "body": "Hm. That's one way to authenticate with Key Vault. You can also use a service principal, in which case there is no such thing as a connection string. You would use the keyvault URL, client ID and client secret."}
{"iteration": 6, "tag": "yes", "repo": "line/centraldogma", "url": "https://github.com/line/centraldogma/pull/890#discussion_r1379569530", "body": "Printing a key file may result in a credential leak. Should we only show minimum information such as file names?"}
{"iteration": 7, "tag": "no", "repo": "confluentinc/rest-utils", "url": "https://github.com/confluentinc/rest-utils/pull/38#discussion_r63087498", "body": "@ijuma, do you know of any issues we may encounter if we made special helper methods for creating security configurations (with a prefix, eg in the schema registry, `kafkastore.ssl.*`)? Thinking about this more, I think this will be straightforward. Let me know if you disagree. Thanks!\n"}
{"iteration": 7, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/3817#discussion_r246440444", "body": "I do not understand what you are describing here as a \"new\" timing attack in the sense that any attempt to authenticate allow the user to determine the log number of rounds."}
{"iteration": 7, "tag": "no", "repo": "prometheus/client_java", "url": "https://github.com/prometheus/client_java/pull/155#discussion_r86962682", "body": "You're presuming that basic auth is the only way that a use would like to authenticate. Someone might want ssl, kerberos or something else. Can you do something more generic?\n"}
{"iteration": 7, "tag": "yes", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/21855#discussion_r639917450", "body": "We might have to hide few properties from public API (such as secrets), we don't have the full list as we're waiting for the service team to confirm. We can do that once we get a response, not a blocker for this pr."}
{"iteration": 7, "tag": "no", "repo": "microsoft/mssql-jdbc", "url": "https://github.com/microsoft/mssql-jdbc/pull/1284#discussion_r398987517", "body": "- SecurityException is thrown if a security manager exists and its method denies access to add a new provider. So there can be multiple reasons why this exception is thrown, not only when the provider exists.\r\n- Why is this approach better than just checking if provider is loaded using `Security.getProvider(name)`?"}
{"iteration": 7, "tag": "broken", "repo": "VoltDB/voltdb", "url": "https://github.com/VoltDB/voltdb/pull/2844#discussion_r40462848", "body": "That's why every tests in this suites has to include the username and password at the beginning when the security is turned on like this. \n\nIf not setting in this way, the \"getClient()\" will use the default client which has little privilege with call procedure. \n"}
{"iteration": 7, "tag": "no", "repo": "micronaut-projects/micronaut-core", "url": "https://github.com/micronaut-projects/micronaut-core/pull/10660#discussion_r1542959492", "body": "it's only a sanity check, the callers do not invoke the constructor at all in this case"}
{"iteration": 7, "tag": "no", "repo": "cloudant/sync-android", "url": "https://github.com/cloudant/sync-android/pull/348#discussion_r78006172", "body": "I was concerned about thead safety in the case that methods accessing the map came from a different thread than those calling `hasChanged`, but nearly concurrently - a `volatile boolean` would also handle that scenario - maybe I'm being too paranoid! Do you have a preference or think that we don't need to worry about it?\n"}
{"iteration": 7, "tag": "bot", "repo": "PBH-BTN/PeerBanHelper", "url": "https://github.com/PBH-BTN/PeerBanHelper/pull/80#discussion_r1593484165", "body": "Review the logic for banning peers based on subnet activity. Consider refactoring to reduce complexity and improve readability. Ensure that the method's behavior is thoroughly unit tested, especially given the potential for false positives as noted in the PR comments.\n\n<!-- This is an auto-generated comment by CodeRabbit -->"}
{"iteration": 7, "tag": "unclear", "repo": "FabricMC/fabric", "url": "https://github.com/FabricMC/fabric/pull/200#discussion_r292031036", "body": "Kit's suggestion is good practice for long-lived state like this.  I'd be more open to naked public fields if this were simply a short-lived data object, but it's a durable collection and reasonable guards against misuse are sensible."}
{"iteration": 7, "tag": "bot", "repo": "vaadin/spring", "url": "https://github.com/vaadin/spring/pull/839#discussion_r646918033", "body": "*HTTPONLY_COOKIE:*  Cookie without the HttpOnly flag could be read by a malicious script in the browser [(details)](https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE)\n(at-me [in a reply](https://docs.muse.dev/docs/talk-to-muse/) with `help` or `ignore`)"}
{"iteration": 7, "tag": "unclear", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/24577#discussion_r1471782220", "body": "@rmartinc Can you elaborate on why this is the case? Isn't the intention of `options.isAllowAnyFrameAncestor()` so that we can allow some resources to be loaded under any third-party domains? If that is the case, then we should remove frame ancestors regardless whether it is defined to be default or not, right?"}
{"iteration": 7, "tag": "yes", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/23171#discussion_r791931869", "body": "Yeah exactly, I'm worried about system property leaks"}
{"iteration": 7, "tag": "unclear", "repo": "elastic/apm-agent-java", "url": "https://github.com/elastic/apm-agent-java/pull/1631#discussion_r827072659", "body": "This is an \"intentional leak\" to have a similar behavior like our Agent Public API where spans/transactions are not recycled.\r\nGiven the OTel API provides ways to wrap an active span into `Callable` or `Runnable` there are less opportunities for end-users to mis-use it, so maybe in the future we could optionally enable recycling.\r\n\r\nWe don't have any way to distinguish OTel API usages, so \"custom instrumentation\" and \"library that explicitly uses it\", at best we could make some heuristics by the provided fields and values but that sounds quite brittle. What would be the benefit to see a difference between the two ?"}
{"iteration": 7, "tag": "no", "repo": "google/fhir-data-pipes", "url": "https://github.com/google/fhir-data-pipes/pull/283#discussion_r972460632", "body": "Is it OK to expose the constructor to the public or is it overkill to have a builder method?"}
{"iteration": 7, "tag": "yes", "repo": "google/data-transfer-project", "url": "https://github.com/google/data-transfer-project/pull/566#discussion_r212370761", "body": "For a future change, what do you think about making the backend determine which scheme to accept? I think it would be more secure than allowing the frontend request to specify it and allow cleartext.\r\n\r\nAm I understanding it correctly that the backend defines a set of allowed schemes, and the frontend specifies which one (of the allowed) on a per-request basis?"}
{"iteration": 7, "tag": "unclear", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/1780#discussion_r96259798", "body": "I was able to drop quite a few packages here and it looked a bit suspicious. \r\nAre all these packaged no longer exposed?"}
{"iteration": 7, "tag": "unclear", "repo": "AzureAD/microsoft-authentication-library-for-android", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1126#discussion_r476584047", "body": "@iambmelt - One of the goals of our libraries is not to expose refresh tokens.  Anyone can access the refresh token if they really want to... but we don't want to make it easy.  Also, what will we do when we enable refresh token PoP?  Are we planning to allow them to export the private key as well?"}
{"iteration": 7, "tag": "yes", "repo": "spring-projects/spring-security", "url": "https://github.com/spring-projects/spring-security/pull/9513#discussion_r608145323", "body": "It's possible to easily put a lot of `OAuth2AuthorizationRequest`s in this map, resulting in Bad Things :tm: happening. This limit prevents that from being possible.\r\n\r\nI contacted security@pivotal.io with the details. Let me know if I should post them here."}
{"iteration": 7, "tag": "unclear", "repo": "googleapis/google-cloud-java", "url": "https://github.com/googleapis/google-cloud-java/pull/6148#discussion_r320363302", "body": "Ideally, the transaction ID handling would not be exposed in the public API. We currently don't use the transaction ID in any of our customer facing APIs, but instead have helper methods that use them internally."}
{"iteration": 7, "tag": "no", "repo": "aws/aws-encryption-sdk-java", "url": "https://github.com/aws/aws-encryption-sdk-java/pull/147#discussion_r358455093", "body": "My thinking was that since decryption failures are ignored, as a user of this method I would like the method to fail fast if I am passing in bad inputs. Otherwise I would not understand why a particular key was not being used for decryption. "}
{"iteration": 7, "tag": "unclear", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/5204#discussion_r62371835", "body": "Yes this seems reasonable ... only concern is if a childchan uses an API which intends to throw a \"Connection Error\" (which would typically be converted into a GO_AWAY) ... although it seems like most of these scenarios should be on the parent channel decoding stuff before it gets to the childchan\n"}
{"iteration": 7, "tag": "no", "repo": "googleapis/google-cloud-java", "url": "https://github.com/googleapis/google-cloud-java/pull/6754#discussion_r371424520", "body": "Explain that these are base64 encoded. Also could you add context of what kind of encryption key it needs to be?"}
{"iteration": 7, "tag": "no", "repo": "jenkinsci/stapler", "url": "https://github.com/jenkinsci/stapler/pull/370#discussion_r899559630", "body": "Presumably we are not concerned about concurrent callers because this is just a cache? Could use [double-checked locking](https://errorprone.info/bugpattern/DoubleCheckedLocking) here to eliminate the possibility of concurrent callers getting different cached values, which I think is a nice property to have in theory but likely does not matter much in practice."}
{"iteration": 7, "tag": "unclear", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/678#discussion_r58565838", "body": "There's a possibility of using \"..\" or \"/\" as a qualifier, so this should at least be validated.  Ideally there would be a class to encapsulate this String and prevent the creation of illegal values.\n"}
{"iteration": 7, "tag": "yes", "repo": "jaegertracing/jaeger-client-java", "url": "https://github.com/jaegertracing/jaeger-client-java/pull/359#discussion_r171171711", "body": "There is no easy way to prevent partial injection.\r\n* Tracing data shouldn't affect the business logic so we're safe here.\r\n* I agree that it can possibly cause problems on the other side of the wire if it's not \"resilient\" enough, but still, it is improvement over dying right away IMHO :)"}
{"iteration": 7, "tag": "no", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/3217#discussion_r77926531", "body": "I think the intent is not that it becomes non-thread-safe after persist is called, but rather:\n- it is expected that a single persist thread is the only thing calling the methods that deal with getting sorted value; i.e. multithreaded persisting is not ok\n- after that thread starts calling those methods, writes are no longer safe\n\nThis is meant to codify existing usage (incrementalindexes are persisted using a single persist thread, after all writes are complete)\n"}
{"iteration": 7, "tag": "no", "repo": "vespa-engine/vespa", "url": "https://github.com/vespa-engine/vespa/pull/11037#discussion_r337389951", "body": "Should have a similar warning for `HOSTNAME` too then? Seems a little extreme anyway. I believe the user is still able to override the dimension if they want, and its not _wrong_ to set this to `Vtag.currentVersion`, just redundant?"}
{"iteration": 7, "tag": "broken", "repo": "GlowstoneMC/Glowstone-Legacy", "url": "https://github.com/GlowstoneMC/Glowstone-Legacy/pull/251#discussion_r17396419", "body": "I don't think this should be exposed.\n"}
{"iteration": 7, "tag": "no", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/21151#discussion_r1325301785", "body": "Can we remove this method directly? It's not a user-facing public API."}
{"iteration": 7, "tag": "yes", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/6220#discussion_r559176025", "body": "This has security leak. You need to use safe constructor. Read `org.apache.skywalking.oap.server.core.alarm.provider.RulesReader` again, please."}
{"iteration": 7, "tag": "no", "repo": "neo4j/neo4j", "url": "https://github.com/neo4j/neo4j/pull/7960#discussion_r79358697", "body": "This is about exposing a way for tests to force a checkpoint, no biggie\n"}
{"iteration": 7, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/21147#discussion_r1238485909", "body": "Thanks for replying. We will add logging.\r\n\r\nIt's the admin api and you need a valid user to create or update a user, otherwise you get an error \"HTTP 401 Unauthorized\". So I see no risk in answering with a more detailed answer. The reason for rejecting the password is also shown in the webinterface.\r\n\r\nIn our case, we can give the user a concrete indication of what is wrong."}
{"iteration": 7, "tag": "unclear", "repo": "spring-projects/spring-security", "url": "https://github.com/spring-projects/spring-security/pull/7244#discussion_r312535657", "body": "Would you please add a simple test to `OAuth2LoginTests` that confirms that an application-provided security context repository is correctly picked up?"}
{"iteration": 7, "tag": "no", "repo": "apache/skywalking", "url": "https://github.com/apache/skywalking/pull/845#discussion_r177621122", "body": "This field could be `final`, but I doubt it is thread security issue related. CallableWrapper is only created in parent thread, and didn't provide any way to update it. I can't see the thread issue."}
{"iteration": 7, "tag": "no", "repo": "googleapis/google-cloud-java", "url": "https://github.com/googleapis/google-cloud-java/pull/6523#discussion_r339373220", "body": "What's weird is that you're doing this to avoid exposing an internal class in the API, but the API is internal so why not just leave it as is? "}
{"iteration": 7, "tag": "unclear", "repo": "gravitee-io/gravitee-api-management", "url": "https://github.com/gravitee-io/gravitee-api-management/pull/4962#discussion_r1296948843", "body": "I think duplicating V1 API should not be allowed. Do we need to return a 400 bad request in that case ? "}
{"iteration": 7, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/9641#discussion_r789613565", "body": "One thing here though. The value is not yet \"taken from a secure place\" but the raw value passed to the CLI. That message happens in an early stage, prior to resolving values from config sources."}
{"iteration": 7, "tag": "yes", "repo": "DataDog/dd-trace-java", "url": "https://github.com/DataDog/dd-trace-java/pull/5950#discussion_r1340040443", "body": "I have added a false positive test. We were testing for the vulnerability if the header we look for was missing, but since we were looking for the wrong header, it was always missing."}
{"iteration": 7, "tag": "broken", "repo": "SonarSource/sonarqube", "url": "https://github.com/SonarSource/sonarqube/pull/236#discussion_r28769654", "body": "This is on purpose: the goal is to test that the anonymous user only sees what is allowed/configured for them, whereas a connected user gets their own configuration.\n"}
{"iteration": 7, "tag": "unclear", "repo": "apache/guacamole-client", "url": "https://github.com/apache/guacamole-client/pull/988#discussion_r1605097332", "body": "I'm not really in favor of doing this - in this case, checking for \"misplaced attributes in connection parameters\" just encourages people to intentionally \"misplace\" attributes in (as) connection parameters. I don't think we should enable a mistaken behavior that 1) we don't really want, and 2) up to now hasn't been allowed."}
{"iteration": 7, "tag": "yes", "repo": "apache/cloudstack", "url": "https://github.com/apache/cloudstack/pull/8251#discussion_r1412328577", "body": "can we make this more clear, this string is just as insecure but less inviting to change\r\n\r\n```suggestion\r\n    \"password\",\r\n```\r\nor\r\n```suggestion\r\n    \"C'est vraiment secret\",\r\n```"}
{"iteration": 7, "tag": "no", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/13374#discussion_r1626477033", "body": "This logic is making some assumptions about the behavior of the the security plugin, which doesn't quite feel right.\r\n\r\nFrom a separation-of-concerns standpoint, it feels like it would be better to let plugins implement `Rule`s, which would get registered with `RuleBasedLabelingService`. Then the security plugin should implement `DefaultUserInfoLabelingRule`."}
{"iteration": 7, "tag": "broken", "repo": "pentaho/pentaho-platform", "url": "https://github.com/pentaho/pentaho-platform/pull/2936#discussion_r62729811", "body": "extra roles are \"Authenticated\" and \"Anonymous\" in our platform. The user has an option of adding to that list and will be added to the role retrieved from the third party security provider. In this case we will mostly have \"Authenticated\" as an extra role.\n"}
{"iteration": 7, "tag": "no", "repo": "pac4j/pac4j", "url": "https://github.com/pac4j/pac4j/pull/217#discussion_r35794642", "body": "You're right: HTTPS is the foundation of security. But what about the development environment and local tests? I guess it would be better for this kind of scenario to allow `http`:  don't you think?\n"}
{"iteration": 7, "tag": "no", "repo": "Discord4J/Discord4J", "url": "https://github.com/Discord4J/Discord4J/pull/355#discussion_r142006617", "body": "How is this a breaking change? It's a non-public API, it shouldn't have ever been utilized externally."}
{"iteration": 7, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2866#discussion_r162667026", "body": "Can we just add a check in here to ensure that whatever is passed in is part of the list in the system property `jdk.tls.client.protocols` so that way no one can drop this to a less secure protocol and go around the settings that we try to use for the rest of the JVM."}
{"iteration": 7, "tag": "broken", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/5343#discussion_r1317377773", "body": "## Information exposure through a stack trace\n\n[Error information](1) can be exposed to an external user.\n\n[Show more details](https://github.com/ibissource/iaf/security/code-scanning/666)"}
{"iteration": 7, "tag": "broken", "repo": "cryostatio/cryostat", "url": "https://github.com/cryostatio/cryostat/pull/1105#discussion_r992689775", "body": "In theory probably not, because the backing storage should be using atomic transactions, so what we get for a get request should either be the complete state before or complete state after any other mutation transaction (like a plugin publishing a new subtree). In this case I don't think there is any risk of deadlocking or other similar structural concurrency issues so it may just reduce throughput somewhat. We can try removing the locking here and see if performance is improved while also still ensuring data consistency and correctness, but I think we should hold onto that experiment until after the 2.2 release branching is done."}
{"iteration": 7, "tag": "broken", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/1076#discussion_r36717818", "body": "OK, that snippets makes more sense to me. There are still a few concerns:\n1. The `DefaultTicketRegistry` does not need encryption support at all. If you are running a single node CAS instance, there is no need for you to encrypt ticket data. Safety is not an issue here. Your data is kept in memory only, and never goes anywhere else. We could keep encrypted data in memory, but that seems overkill to me. The default config should remain exactly the same.\n2. Using the wrapper solution breaks existing overlays because XML config is required that would be missing.\n3. The idea of `AbstractCrypticRegistry` is effectively the same as adding that boolean to note encryption support. If you extend that class, you automatically get that support. For example, Ehcache would return `true` for that property while JPA may not. If you extend that class, you automatically have declared support, so there is no need to do this. The disadvantage of that boolean is, it breaks backwards compatibility because it requires API changes which we cannot do for a minor release. Alternatively, we could declare an interface, a marker interface that each registry implements to note that they support encryption. (Similar to `Serializable`)  but then again, you're back to the same solution where you extend/implement something to note support for encryption, which is the same as you extending `AbstractCrypticRegistry`. So we are not gaining much there. \n4. I don't entirely follow your description of events that would produce errors. Can you elaborate further plz? We have to consider that encryption MUST be optional. We should not change the default behavior to force that. Many ticket registries automatically provide that support automatically, or the adopter may choose to run the registry in a private network that is totally secure. The onus would be on them to figure out whether they need that support. So by default, if you have deployed Ehcache, your configuration should work exactly the same as it did before. Encryption is an extra feature you can then turn on. Whether you use composition or inheritance, you do need to create a cipher. Without it, you always run that risk. It's something you need to consult the docs for to figure out how to enable it. \n5. The biggest problem I see from a design POV is that the `innerTicketRegistry` can be anything. See #3 for more info. We need to protect against what's passed to us, because if we can make it work without any additional errors that is ideal. Another problem is that it breaks existing XML configuration in existing overlays which makes upgrades difficult. If we can make it work without any additional breakage, then why not? \n6. I still don't quite understand why the wrapper solution is better. I see the cons outweighing the pros. What benefits do we get, that are not already provided? \n"}
{"iteration": 7, "tag": "unclear", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/24473#discussion_r1385237070", "body": "The FIPS implication as I understand it are due to the additional password/encryption restrictions.  Since pem is unencrypted and does not use a password there are no issues there."}
{"iteration": 7, "tag": "no", "repo": "apache/solr", "url": "https://github.com/apache/solr/pull/146#discussion_r1037551228", "body": "Yes, it is java security manager. I checked & wrote a test the relative configName path to configSetBase and throw IOException. "}
{"iteration": 7, "tag": "yes", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/330#discussion_r156723653", "body": "What can all this prevent or be helpful for?\r\n\r\nThe only thing that I see is that whoever sees the log can read the length of the password."}
{"iteration": 7, "tag": "yes", "repo": "DataDog/dd-trace-java", "url": "https://github.com/DataDog/dd-trace-java/pull/6300#discussion_r1425347521", "body": "As @anderruiz said there is a risk of losing vulnerabilities if the path is not correctly initialized"}
{"iteration": 7, "tag": "unclear", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/5074#discussion_r346134556", "body": "Basically for the other case where we want to deny it only applies if there is another security annotation on the CdI bean. This means the existing logic in the other branch should discover them."}
{"iteration": 7, "tag": "no", "repo": "eclipse-archived/smarthome", "url": "https://github.com/eclipse-archived/smarthome/pull/4148#discussion_r140732940", "body": "This is likely an \"external\" issue like a client that closes the connection. If we want to log it at all, we at least should not include the stacktrace here as it is no bug on our end."}
{"iteration": 7, "tag": "no", "repo": "SonarSource/sonar-php", "url": "https://github.com/SonarSource/sonar-php/pull/395#discussion_r246294865", "body": "Since we want to distinguish between local filesystem and network accesses, it might be easier to use a whitelist (for `http`, `https`, `ftp`, and `ssh*`) instead of a blacklist to validate the hardcoded strings."}
{"iteration": 7, "tag": "unclear", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/6094#discussion_r221496466", "body": "Yes this lock is required. And I have tried to keep the data safe, do you see any safety issues ? How do you suggest to simplify ?"}
{"iteration": 7, "tag": "yes", "repo": "google/tsunami-security-scanner-plugins", "url": "https://github.com/google/tsunami-security-scanner-plugins/pull/320#discussion_r1455933263", "body": "I understand, but this vulnerability by itself (unless I mis-understood it) only gets you authenticated-level privileges to the strapi content. It does not allow you to perform any administrative actions on the strapi instance itself.\r\n\r\nAnd I would agree that combined with the RCE, it creates a critical chain. But by itself it would be only HIGH. In any case, let's keep it as critical for now, I will discuss it internally and I might change it back later depending on the outcome.\r\n\r\n_~tooryx_"}
{"iteration": 7, "tag": "broken", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/40365#discussion_r1587570597", "body": "This property is a workaround for applications that didn't realise they were exposed prior to the Agroal change and will give such compromised applications some time to re-code their applications to either use XA resources or to put the resource access code into separate transactions."}
{"iteration": 7, "tag": "broken", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/14307#discussion_r1197158148", "body": "## Local information disclosure in a temporary directory\n\nLocal information disclosure vulnerability due to use of file readable by other local users.\n\n[Show more details](https://github.com/apache/druid/security/code-scanning/4973)"}
{"iteration": 7, "tag": "broken", "repo": "signalapp/Signal-Android", "url": "https://github.com/signalapp/Signal-Android/pull/807#discussion_r10131534", "body": "Thanks for pointing this out. The message id's aren't unique, so calling this twice will have a potentially undesirable destructive effect.  A perfectly innocuous message that shouldn't be deleted over in the MMS database could get deleted.\n"}
{"iteration": 7, "tag": "unclear", "repo": "openhab/openhab-core", "url": "https://github.com/openhab/openhab-core/pull/3057#discussion_r1117561110", "body": "Is there something the user can do about it? If I understand your code correctly, no harm is done and the user will get the requested value. At DEBUG level it might make sense to either log the full stack trace, or just the message (`e.getMesage()`), so we get a hint what went wrong.\r\n\r\n```suggestion\r\n            logger.debug(\"Cannot get audio from cache, fallback to TTS service.\", e);\r\n```"}
{"iteration": 7, "tag": "yes", "repo": "molgenis/molgenis", "url": "https://github.com/molgenis/molgenis/pull/7027#discussion_r157946719", "body": "Security: as a user can a decorate a repository that I don't have permission to read and e.g. email all traffic to my mail address?"}
{"iteration": 7, "tag": "yes", "repo": "opencast/opencast", "url": "https://github.com/opencast/opencast/pull/2804#discussion_r668575495", "body": "Not sure why this check on series was removed, if this is giving issues we need to find a different way to resolve this cause this is indeed a security issue! What would be the default ACL in opencast when no series is applied, read/write for admin and read for user I suppose ?\r\n"}
{"iteration": 7, "tag": "no", "repo": "Wynntils/Artemis", "url": "https://github.com/Wynntils/Artemis/pull/2001#discussion_r1294014201", "body": "As I general rule, try to finish the internal processing before posting events. I don't think anything can go wrong in this case, but it is more robust if you reset the  onlineMessageStatus back to ListStatus.IDLE before sending out the event, in case the event handler calls back into this model etc."}
{"iteration": 7, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/21235#discussion_r744525734", "body": "Even when encryption is not required by the client, the connection can be encrypted (if the client and the server agree) while exchanging credentials."}
{"iteration": 7, "tag": "no", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/9564#discussion_r326177474", "body": "Sure, so the idea is to not make it public until a later time when we're reasonably certain that this interface is stable?  That sounds reasonable to me, as long as there is _some_ public way to pass these parameters along."}
{"iteration": 7, "tag": "no", "repo": "Telegram-FOSS-Team/Telegram-FOSS", "url": "https://github.com/Telegram-FOSS-Team/Telegram-FOSS/pull/715#discussion_r1423738066", "body": "yes, but I don't use webpush since telegram server still uses the draft encoding (https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-encryption-encoding-03) that sends the keys in headers and it requires a gateway + modifications of the code that complicates stuff a lot so I choose to just use SIMPLE push https://core.telegram.org/api/push-updates that is ONLY a put with version=NUMBER and so FEATURE_BYTE_MESSAGE is not needed"}
{"iteration": 7, "tag": "yes", "repo": "apache/camel", "url": "https://github.com/apache/camel/pull/1280#discussion_r89076732", "body": "Avoid leaking messaging details in toString methods as there may be sensitive data that gets logged"}
{"iteration": 7, "tag": "no", "repo": "PGMDev/PGM", "url": "https://github.com/PGMDev/PGM/pull/111#discussion_r358019453", "body": "Make this private, it's internal data that i don't think needs to be exposed"}
{"iteration": 7, "tag": "no", "repo": "opencast/opencast", "url": "https://github.com/opencast/opencast/pull/4237#discussion_r1010338455", "body": "But we are not using the default value, we're throwing an exception, right?\r\n\r\nAnd throwing an exception make sense, since if the user went out of their way to modify the default they probably don't want the default, so we should notify them at the earliest opportunity?"}
{"iteration": 7, "tag": "broken", "repo": "frankframework/frankframework", "url": "https://github.com/frankframework/frankframework/pull/5725#discussion_r1389239269", "body": "## I/O function calls should not be vulnerable to path injection attacks\n\n<!--SONAR_ISSUE_KEY:AYu42aDqAhUpV16yalqp-->Change this code to not construct the path from user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=ibissource_iaf&issues=AYu42aDqAhUpV16yalqp&open=AYu42aDqAhUpV16yalqp&pullRequest=5725\">SonarCloud</a></p>\n\n[Show more details](https://github.com/ibissource/iaf/security/code-scanning/712)"}
{"iteration": 7, "tag": "no", "repo": "opensearch-project/data-prepper", "url": "https://github.com/opensearch-project/data-prepper/pull/2994#discussion_r1258983962", "body": "But SSL requires additional config like pointers to certificates, etc. Where as no-encryption does not require any config, right?"}
{"iteration": 7, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/26756#discussion_r1480031045", "body": "@pruivo - what is the default that Infinispan uses? \r\n\r\nFrom a security point of view, I'd like to see `SCRAM-SHA-256` or better."}
{"iteration": 7, "tag": "no", "repo": "oVirt/ovirt-engine", "url": "https://github.com/oVirt/ovirt-engine/pull/238#discussion_r843607116", "body": "I'm not sure if relying on filesystem attributes is a good option, those can be changed accidentally. Using our file with timestamp written in it is much more protected against accidental change"}
{"iteration": 7, "tag": "yes", "repo": "hashgraph/hedera-services", "url": "https://github.com/hashgraph/hedera-services/pull/7877#discussion_r1287646751", "body": "If I understand what this is doing, this introduces a vulnerability. After we replay the preconsensus event stream, this causes us to accept events created by nodes that are no longer in the address book.\r\n\r\nAlso, this is incompatible with a node's signing key changing, since both keys would take up the same slot in `keyMap`.\r\n\r\nI think the proper way to do this is to use the old address book to validate the PCES, then to switch this out for the new address book."}
{"iteration": 7, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/2409#discussion_r143322127", "body": "Worst that will happen is that only one alert would show. Now that being said, it will create problems any way since there is only one zip file and only one system to restore to. During threat analysis we identified the need to limit the number of simultaneous exports and imports to 1. We have a ticket for that."}
{"iteration": 7, "tag": "no", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/4339#discussion_r258217015", "body": "\u2753 Do we want to encrypt blank, non-empty strings? Would `encrypt(\"     \")` be valid input?"}
{"iteration": 7, "tag": "yes", "repo": "openjdk/crac", "url": "https://github.com/openjdk/crac/pull/7#discussion_r774663081", "body": "Unfortunately sun.security.provider.SecureRandom class is final. I think it was done intentionally for security reasons.\r\nisSeedGenerator can be easily replaced by comparison with SeederHolder.seeder but it'll eat time during restore."}
{"iteration": 7, "tag": "yes", "repo": "apache/tinkerpop", "url": "https://github.com/apache/tinkerpop/pull/1838#discussion_r1023999319", "body": "This handler should go \"after\" authN has taken place. Else an attacker may perform a DoS attack by sending unauthenticated large string in user agent. "}
{"iteration": 7, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/6096#discussion_r429455094", "body": "Is this a potential security risk? Depending on what is placed on `ProcessingDetails`?"}
{"iteration": 7, "tag": "yes", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/15319#discussion_r511493057", "body": "I could be wrong, but I think that the rest of the code is also susceptible to failing when the controller fails. So it may be okay to just propagate the exception, since it is not like you are adding a new vulnerability.\r\n\r\nWhere is the Pinot Server's GRPC port specified in the Pinot configuration (ie on the Pinot cluster side): If there too, the port is fixed (how does that work for k8s then, which does not like fixed ports), then I can see why having a fall back port specified in the pinot config makes sense. \r\n\r\nI don't have a strong feeling here, and I am totally fine with having this config. It just seems weird to me to use some pre-configured port value when we couldn't get the real thing :-). Either way the query will fail."}
{"iteration": 7, "tag": "unclear", "repo": "Peergos/Peergos", "url": "https://github.com/Peergos/Peergos/pull/388#discussion_r253241111", "body": "One solution to that would be to give the transaction folder a different signing key. That would almost minimise the excess privilege being passed around. "}
{"iteration": 7, "tag": "yes", "repo": "MovingBlocks/Terasology", "url": "https://github.com/MovingBlocks/Terasology/pull/3118#discussion_r143058980", "body": "In line with the comment above, this method could also throw an exception if the given FC is not found.\r\n\r\nNow, I don't know if it's worth thinking about some degree of security here. \r\nAs this method is public, a module could decide to remove any FC it knows of. \r\nIs it worth to implement a receipt mechanism? I.e.:\r\n- string receipt addConfig(uri, config) throws exception\r\n- void removeConfig(receipt) throws exception\r\n\r\nThis way, only objects that have been given the receipt can remove the FC.\r\n"}
{"iteration": 7, "tag": "yes", "repo": "Graylog2/graylog2-server", "url": "https://github.com/Graylog2/graylog2-server/pull/17248#discussion_r1395634524", "body": "I'd suggest moving this to a different controller (management?), to keep the operations separated. \r\n\r\nThe management controller probably shouldn't be accessible if the datanode is started in an insecure mode and there is no auth that would guard these, potentially very dangerous, actions. "}
{"iteration": 7, "tag": "unclear", "repo": "addthis/hydra", "url": "https://github.com/addthis/hydra/pull/233#discussion_r112022688", "body": "Given that `parameters` is a non-threadsafe collection that is exposed directly via a getter, I think that some protection is necessary. There is nothing to stop someone from calling job.getParameters.add(something) at an inopportune moment. \r\n\r\nChanging the getter to return a copy rather than the actual list might be a more lightweight solution"}
{"iteration": 7, "tag": "yes", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/2498#discussion_r1646443855", "body": "It uses `secureRandom` to create the `btcECKey.` Since we agree on avoiding indeterministic tests, I think you should pass the seed to make it deterministic."}
{"iteration": 7, "tag": "yes", "repo": "opensearch-project/data-prepper", "url": "https://github.com/opensearch-project/data-prepper/pull/3065#discussion_r1328964093", "body": "The `insecure_skip_verify` flag tells the HTTP client to use SSL, but to not verify that the server is who it claims to be. It is not directly related to how we configure the SSL certificate.\r\n\r\nBy default, the Apache HTTP client will verify. So to implement this flag, you need to trust any server. You won't load any certificates (from file, S3, ACM, etc.). But, you will trust any certificate."}
{"iteration": 7, "tag": "no", "repo": "apache/metron", "url": "https://github.com/apache/metron/pull/995#discussion_r184141881", "body": "As a general access pattern, I think exposing fields for use via inheritance opens up the possibility for hiding fields and non-explicit side effects. Can you either expose this via a `getAccessConfig()` method or invoke it in the subclass via `super.accessConfig`?\r\n\r\nhttps://docs.oracle.com/javase/tutorial/java/IandI/hidevariables.html"}
{"iteration": 7, "tag": "no", "repo": "apache/helix", "url": "https://github.com/apache/helix/pull/2549#discussion_r1260129836", "body": "I agree with protected security but what I am not quite sure I understand the use case for a getter method here. I can create a helper method that increments the counter but it would also be accessing the member variable the same way."}
{"iteration": 7, "tag": "no", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/5539#discussion_r1013825413", "body": "In this case, it's not that something went wrong. An API endpoint should be free to report back an error code without having to produce a response body. Body is optional. So the exception that would be produced and logged in this case would just be *noise*. You should consume the body only if the response code is a success. We don't strictly need to log it here on the CAS side, or, there should be a way to consume the body without causing an exception (consuming and catching the error is not an option). "}
{"iteration": 7, "tag": "yes", "repo": "apache/poi", "url": "https://github.com/apache/poi/pull/85#discussion_r158314049", "body": "Since this is used to generate an encryption key, shouldn't this be SecureRandom?"}
{"iteration": 7, "tag": "yes", "repo": "Activiti/Activiti", "url": "https://github.com/Activiti/Activiti/pull/2098#discussion_r229591238", "body": "@cristianflorescu @erdemedeiros this might introduce a security risk, because the caller can add the groups in the payload and override the real groups coming from the userGroupManager. \r\n@erdemedeiros please be careful if you are reviewing these changes. "}
{"iteration": 7, "tag": "yes", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/4035#discussion_r239181649", "body": "\u270f\ufe0f Since this API actually provide access to data, it should document that it could throw a SecurityException if the specific permissions are not granted to the caller and document what those permissions are."}
{"iteration": 7, "tag": "no", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4369#discussion_r363531053", "body": "I cannot see that making any difference; one way or another it needs to handle the incoming message.\r\n\r\nMaybe I will just restrict this to administrators. (Unlike TCP connections, it is trivial to pass authentication.)"}
{"iteration": 7, "tag": "yes", "repo": "wildfly/wildfly", "url": "https://github.com/wildfly/wildfly/pull/12626#discussion_r323307216", "body": "@darranl I don't think this test has valid objective. EntryBean is unsecured stateless remote bean, so its principal is anonymous. This bean should not propagate guest identity to the injected SecurityInformation EJB in my opinion. The returned identity should be anonymous and not guest IMO. I do not think this test should be present for Elytron if the test objective is invalid."}
{"iteration": 7, "tag": "broken", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/784#discussion_r64306524", "body": "This isn't actually authenticating any users via our security infrastructure.  I understand this is experimental and this will likely be done in another ticket. Can you add a comment and the ticket number so we know when this will be updated.\n"}
{"iteration": 7, "tag": "unclear", "repo": "samtools/htsjdk", "url": "https://github.com/samtools/htsjdk/pull/810#discussion_r105097484", "body": "In this case, because it is package protected, I do not think that is going to harm at all (unless someone is subclassing in the same package outside HTSJDK).\r\n\r\nIf we are breaking compatibiity anyway, as it is unused, why don't we just remove the field (no the constructor arg)? It is only used for get the index creators..."}
{"iteration": 7, "tag": "unclear", "repo": "apache/ozone", "url": "https://github.com/apache/ozone/pull/2945#discussion_r824945091", "body": "Is is possible that GRPC TLS is enabled but Ozone security is not. What would happen in that case?"}
{"iteration": 7, "tag": "yes", "repo": "Netflix/denominator", "url": "https://github.com/Netflix/denominator/pull/258#discussion_r11979583", "body": "I think it is safer to assume UTF-8, as this is allowing users to specify passwords.  While it is possible that the service does not allow UTF-8, I would be very surprised.  Most tools you find on the web that use ultradns use UTF-8.  Let's stop bleeding time on this.  We know that not specifying is bad, and it is more risky to constrain something that accepts passwords to ASCII than UTF-8.\n"}
{"iteration": 7, "tag": "yes", "repo": "azkaban/azkaban", "url": "https://github.com/azkaban/azkaban/pull/284#discussion_r14911474", "body": "If the client does not include the projectUser param, will the client be able to write to anybody's project?  Also, the client is able to spoof any user by just setting projectUser to any user, right?\n"}
{"iteration": 7, "tag": "yes", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/8730#discussion_r815275526", "body": "Since the credentialModel may have the secret removed for security reasons, I'm having to add this guard clause."}
{"iteration": 7, "tag": "yes", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/4935#discussion_r319328904", "body": "I haven't been concerned about it because the network layer we're sending it to shouldn't be changing the data, and I don't think there's any more risk here of the data being transferred getting modified than in the other upload methods. Unless I'm missing something?"}
{"iteration": 7, "tag": "yes", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/9733#discussion_r1187685012", "body": "RFC 3875 (https://datatracker.ietf.org/doc/html/rfc3875) does not define `HTTPS`, but apparently for PHP it must be set to a non-empty value to indicate that the request was secure (https://www.php.net/manual/en/reserved.variables.server.php).\r\n\r\nWe use `HTTPS=on` for compatibility with PHP applications such as WordPress, but other applications require `true` or `1`, see for example: https://build.trac.wordpress.org/browser/branches/6.2/wp-includes/load.php#L1473\r\n\r\nSo `HTTPS=false` as per PHP spec would still mean that the request is secure because it's non-empty, but it really depends on the application.\r\n\r\n\ud83e\udd37\ud83c\udffc "}
{"iteration": 7, "tag": "no", "repo": "gchq/Gaffer", "url": "https://github.com/gchq/Gaffer/pull/1075#discussion_r128255062", "body": "We shouldn't need to expose these store properties."}
{"iteration": 7, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/4803#discussion_r440219222", "body": "I hope not - most of the tests passed (did not run ATH) - and any security authN/AuthZ plugin using `toString()` has a huge bug anyway as `fullNames` can be user controlled.\r\n\r\nI anticipate some test failures in some plugins if they are checking logs contain some message (as `\"Jane Doe\"` will now be `\"janedoe\"` or similar) but I am not expecting production code to break - but I also have not actively gone looking."}
{"iteration": 7, "tag": "yes", "repo": "aws/aws-sdk-java-v2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2976#discussion_r789972071", "body": "What if we just copied all `executionAttributes` to the request, rather than selectively choosing which ones to copy? Are we worried that would leak abstractions that are not relevant to the request?"}
{"iteration": 7, "tag": "yes", "repo": "radixdlt/olympia-node", "url": "https://github.com/radixdlt/olympia-node/pull/705#discussion_r914791457", "body": "Do we want some kind of lock around this?\r\n\r\nTo ensure we only generate this once, and that lots of people spamming the endpoint around epoch change time don't crash / lag the node?\r\n\r\n(I imagine node runners may EG wish to expose this endpoint, and I'd like this to be safe)"}
{"iteration": 7, "tag": "no", "repo": "aimacode/aima-java", "url": "https://github.com/aimacode/aima-java/pull/265#discussion_r106163451", "body": "You could loosen this restriction by just insisting on a fully qualified class name as input argument. It would make the code more usable as the user would just need to ensure their own Map classes were on the classpath without having to restrict their package names (i.e. most people shouldn't be modifying the core packages)."}
{"iteration": 7, "tag": "broken", "repo": "alfio-event/alf.io", "url": "https://github.com/alfio-event/alf.io/pull/1194#discussion_r1103682973", "body": "## Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks\n\n<!--SONAR_ISSUE_KEY:AYZB6iYHz3UmW1pqLkgF-->Change this code to not reflect user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=alfio-event_alf.io&issues=AYZB6iYHz3UmW1pqLkgF&open=AYZB6iYHz3UmW1pqLkgF&pullRequest=1194\">SonarCloud</a></p>\n\n[Show more details](https://github.com/alfio-event/alf.io/security/code-scanning/90)"}
{"iteration": 7, "tag": "no", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/5987#discussion_r338842513", "body": "yes, I don't see any need to expose this. Let's make it package private"}
{"iteration": 7, "tag": "unclear", "repo": "killbill/killbill", "url": "https://github.com/killbill/killbill/pull/1162#discussion_r303295929", "body": "I don't think we should require the `accountId`: the point of this API is to retrieve the subscription with only the key (the associated account might not be known).\r\n\r\nTake a look at how we do it for `getActiveSubscriptionBundleForExternalKey`: there's a dao call to first get the mapping between the key and the id. From the id, we can then build the right context (`createInternalTenantContext(final UUID objectId, final ObjectType objectType, final TenantContext context)`) and plug into the methods to fully populate the object."}
{"iteration": 7, "tag": "yes", "repo": "grpc/grpc-java", "url": "https://github.com/grpc/grpc-java/pull/6805#discussion_r402468718", "body": "It is surprising this is being set, since these variables are normally set elsewhere are _read_ within the trust manager as configuration. This looks suspicious. It will also permanently change the parameters, which seems concerning. Have you verified that it is safe to disable endpoint identification here and it not impact any other code?"}
{"iteration": 7, "tag": "yes", "repo": "jenkinsci/jenkins", "url": "https://github.com/jenkinsci/jenkins/pull/8693#discussion_r1410722735", "body": "> Should it be change?\r\n\r\nlet's not do it here - can be done in a follow up as it may require some thought as to if it can be abused (I do not see a vector to escalate here - but at least it would require a security review)"}
{"iteration": 7, "tag": "yes", "repo": "opensearch-project/OpenSearch", "url": "https://github.com/opensearch-project/OpenSearch/pull/5925#discussion_r1109122479", "body": "I understand the concerns about hardcoding security credentials, but in this particular case, I believe it may be an acceptable approach given the experimental nature of the code. Hardcoding credentials would allow us to quickly test the code without the added complexity of the support systems.\r\n\r\nPragmatically; we already use default credentials to setup a cluster."}
{"iteration": 7, "tag": "yes", "repo": "apereo/cas", "url": "https://github.com/apereo/cas/pull/5997#discussion_r1489048249", "body": "I tend to agree, yes, but it's not about stealing an id per se. If you \"cook up\" your own token, you run the risk of hitting the registry with an invalid token and that would put load on the system only to come back and say \"no ticket is invalid\". The goal here was to prevent unnecessary calls to the registry if the ticket id is malformed or unknown such that we can be sure the ticket was created by CAS before we hit the registry, but even so, I am not sure I buy the advantages of that approach any more nowadays so it seems best that we deprecate and remove."}
{"iteration": 7, "tag": "unclear", "repo": "vitalidze/traccar-web", "url": "https://github.com/vitalidze/traccar-web/pull/54#discussion_r22288273", "body": "OK, going to change that.\n\nBtw and just as side note, in my past works (no java related) I usually used variable names different between GET/POST and \"inner\" logic. That way a little more security was added (because the \"inner variable names\" were not disclosed.\n"}
{"iteration": 7, "tag": "yes", "repo": "elastic/apm-agent-java", "url": "https://github.com/elastic/apm-agent-java/pull/1230#discussion_r447370114", "body": "It could be powerful to have this capability in `trace_methods`. Users can abuse this config regardless. I think the benefit of being able to trace specific methods from these packages exceeds the value of protecting users. "}
{"iteration": 7, "tag": "no", "repo": "apache/ignite-3", "url": "https://github.com/apache/ignite-3/pull/1976#discussion_r1180312623", "body": "I'll fix it. It's not really dangerous right now, I guess, because all insertions are protected by external locks in transactions, but nonetheless. Code hygiene is never a bad thing "}
{"iteration": 7, "tag": "no", "repo": "fcrepo/fcrepo", "url": "https://github.com/fcrepo/fcrepo/pull/1376#discussion_r204475022", "body": "I'm wondering if we said something more about the allowed path.    How would a user of the system learn what the allowed path was?  That's a larger question then this PR, really.  Should we expose that information somewhere so folks using the system know what it is, or should we point them to the system administrator for more information about allowed paths? "}
{"iteration": 7, "tag": "no", "repo": "apache/paimon", "url": "https://github.com/apache/paimon/pull/326#discussion_r1002844838", "body": "It seems that there is a concurrency security problem. Maybe we should prohibit the use of multithreading in testing."}
{"iteration": 7, "tag": "unclear", "repo": "getodk/collect", "url": "https://github.com/getodk/collect/pull/1702#discussion_r156719847", "body": "Is it totally necessary for this to be exposed? "}
{"iteration": 7, "tag": "unclear", "repo": "zsmartsystems/com.zsmartsystems.zigbee", "url": "https://github.com/zsmartsystems/com.zsmartsystems.zigbee/pull/464#discussion_r241672643", "body": "Please remove the TODO. The response to the method is not used, but it is there for a reason, and that is so that the security state is logged."}
{"iteration": 7, "tag": "yes", "repo": "grpc-ecosystem/java-grpc-prometheus", "url": "https://github.com/grpc-ecosystem/java-grpc-prometheus/pull/35#discussion_r720674537", "body": "Can we return unmodifiable lists where possible? I think that it easier to grasp what's happening downstream of these calls (i.e., the the lists aren't being tampered with)"}
{"iteration": 7, "tag": "unclear", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/24316#discussion_r832522157", "body": "Steph, can you explain a bit more about these routes - are they all protected, or can a user without a WebAuthn registration invoke on any of these routes ? "}
{"iteration": 7, "tag": "yes", "repo": "opensearch-project/data-prepper", "url": "https://github.com/opensearch-project/data-prepper/pull/2846#discussion_r1227234401", "body": "Why accept unsecure server?"}
{"iteration": 7, "tag": "unclear", "repo": "ReactiveX/RxJava", "url": "https://github.com/ReactiveX/RxJava/pull/3937#discussion_r63234396", "body": "Okay, in that case, I'd consider a public static AtomicBoolean instead of the hash-lookup and string comparison. From security perspective, if you can set System properties, you could just as set an AtomicBoolean, right?\n"}
{"iteration": 7, "tag": "yes", "repo": "apache/maven", "url": "https://github.com/apache/maven/pull/549#discussion_r714627355", "body": "The dreaded pseudo security..."}
{"iteration": 7, "tag": "unclear", "repo": "supertokens/supertokens-core", "url": "https://github.com/supertokens/supertokens-core/pull/942#discussion_r1510034211", "body": "this is not very obvious, so it's easy for others to miss out on catching UnknownUserIdException and then using public storage. So maybe a pattern here would be to add an extra boolean to getStorageAndUserIdMappingForAppSpecificApi called `isAuthRecipeAPI` which would be false here, and in the function, if this boolean is false, then instead of throwing UnknownUserIdException (if the User id type is ANY), we actually call enforcePublicTenantAndGetPublicTenantStorage(req) and return the storage with no user id mapping. So that way, lesser change of someone missing out on this pattern."}
{"iteration": 7, "tag": "yes", "repo": "DataDog/dd-trace-java", "url": "https://github.com/DataDog/dd-trace-java/pull/3909#discussion_r984252445", "body": "I think that, at some point, we might add the full stacktrace to reported vulnerabilities. However, that would not solve the problem here. We use a location (in Java, class+line) to deduplicate vulnerabilities, and that runs in a performance-sensitive path. We'd like to make this path even faster, which would increase our ability to cover more vulnerabilities within reasonable overheads. Going for the full stacktrace from the beginning would just run counter our performance requirements. There's some more aspects to it we can discuss (e.g. at product level)."}
{"iteration": 7, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/4413#discussion_r335649783", "body": "This approach will not work if we want to support multiple authentication mechanisms (which we will in future)."}
{"iteration": 7, "tag": "unclear", "repo": "NiklasMerz/cordova-plugin-fingerprint-aio", "url": "https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio/pull/236#discussion_r453556227", "body": "I don't think changing the name of the suffix would be needed, as the SECRET_KEY is only to complement when storing the encryption data. I do believe this would be out of the scope for this PR and wouldn't add more value to it."}
{"iteration": 7, "tag": "yes", "repo": "stripe/stripe-java", "url": "https://github.com/stripe/stripe-java/pull/687#discussion_r265394051", "body": "Sure but things are secret and gated and we should avoid leaking them in public libraries really that's all"}
{"iteration": 7, "tag": "no", "repo": "checkstyle/checkstyle", "url": "https://github.com/checkstyle/checkstyle/pull/11342#discussion_r818398412", "body": "We can investigate later on, let's not block this PR."}
{"iteration": 7, "tag": "yes", "repo": "aws/aws-sdk-java-v2", "url": "https://github.com/aws/aws-sdk-java-v2/pull/3490#discussion_r997581557", "body": "We can't get a size since it's untyped within this publisher. We could log the type, but that's not as useful. Since it's at the trace level, and we already log sensitive data elsewhere at the debug level, shouldn't it be safe?"}
{"iteration": 7, "tag": "yes", "repo": "spring-projects/spring-security", "url": "https://github.com/spring-projects/spring-security/pull/7855#discussion_r369609751", "body": "@rwinch Do you have a preference/recommendation on the approach for encrypting/securing the access token and refresh token?"}
{"iteration": 7, "tag": "unclear", "repo": "LinuxForHealth/FHIR", "url": "https://github.com/LinuxForHealth/FHIR/pull/2816#discussion_r717038962", "body": "just given we have a 'security' label on this, I think we should."}
{"iteration": 7, "tag": "unclear", "repo": "thorntail/thorntail", "url": "https://github.com/thorntail/thorntail/pull/864#discussion_r179424339", "body": "Hi Ladislav, I'm not sure; in this case the remote user is technically a client which invokes on behalf of user1 unless KC impersonates the client as a user1 (but given that it a non-code flow KC SecurityContext's IdToken is also null, which would otherwise point to a live user). \r\nThe test simply asserts that the KC SC is available in the context, but I've been planning to enhance a bit the examples/security/keycloak later on, and may be use a filter to provide a custom JAX-RS SecurityContext and get the service code use the injected SecurityContext to get the info."}
{"iteration": 7, "tag": "yes", "repo": "apache/ignite-3", "url": "https://github.com/apache/ignite-3/pull/172#discussion_r649857861", "body": "It's a good rule to execute all \"security-sensitive\" operations in privileged sections. Otherwise code may fail when security manager enabled."}
{"iteration": 7, "tag": "no", "repo": "opensearch-project/security", "url": "https://github.com/opensearch-project/security/pull/2053#discussion_r963832933", "body": "Please add validation for the returned response, the proper status code is good, but knowing that we have the right data in the output would make sure that the feature is working correctly.\r\n\r\nExample of this kind of validation:\r\nhttps://github.com/opensearch-project/security/blob/ce599445364326f4c16ce6dd45af1b4956ab1da5/src/test/java/org/opensearch/security/multitenancy/test/MultitenancyTests.java#L422-L424"}
{"iteration": 7, "tag": "yes", "repo": "logzio/sawmill", "url": "https://github.com/logzio/sawmill/pull/291#discussion_r821538457", "body": "there are two things we can do:\r\n1. do not allow urls without that header (makes things more complex for users, but protects our system better)\r\n2. add some validation while iterating the file - like we count the lines, we can roughly count the bytes/chars per line"}
{"iteration": 7, "tag": "yes", "repo": "pravega/pravega", "url": "https://github.com/pravega/pravega/pull/2587#discussion_r188451864", "body": "To my knowledge the only legit scenario for disabling hostname verification is when the truststore is specially crafted to allow ONLY the server's TLS certificate.   Please be extra careful about this."}
{"iteration": 7, "tag": "yes", "repo": "apache/ozone", "url": "https://github.com/apache/ozone/pull/3971#discussion_r1098117151", "body": "> The original problem is: volumes are returned to unauthorized users. Why don't we just filter volumes to only return those that the requesting user (remoteUserUgi) has access to?\r\n\r\nHi @duongkame , I understand your thought of returning the **intersection** of volumes that both users has LIST permission to. But IMO that would lead to further confusing behavior, and would expose some of the volumes the other user has LIST permission to (partially leaking ACL). Rejecting outright for non-admin and non-owner here is what I would prefer. Unless there is a use-case for that?\r\n\r\nAlso a note: The reason we check ACL against `OZONE_ROOT` is because of `ozone.om.volume.listall.allowed`, where we want to mimic HDFS list `/` behavior in ofs. When `ozone.om.volume.listall.allowed` is set to `true`, `checkAcls(OZONE_ROOT)` would pass for every Ozone user. So everyone would be allowed to list any other users' volumes (as expected)."}
{"iteration": 7, "tag": "broken", "repo": "apache/druid", "url": "https://github.com/apache/druid/pull/13609#discussion_r1055009028", "body": "## HTTP response splitting\n\nThis header depends on a [user-provided value](1), which may cause a response-splitting vulnerability.\n\n[Show more details](https://github.com/apache/druid/security/code-scanning/3572)"}
{"iteration": 7, "tag": "yes", "repo": "haveno-dex/haveno", "url": "https://github.com/haveno-dex/haveno/pull/216#discussion_r800243273", "body": "The Scrypt algorithm is important when persisting the password hash because it is much slower than standard key derivation and also requires memory. Since I persist that Scrypt derived key to validate the password, it must be different from the key used to encrypt the user's private keys (which is used to identify a particular user in the p2p system). \r\n\r\nIf I persist the same derived key, the encryption of the user's private keys would be pointless as an attacker with the files will immediately decrypt the private key data and be able to impersonate the user. "}
{"iteration": 7, "tag": "yes", "repo": "LinuxForHealth/FHIR", "url": "https://github.com/LinuxForHealth/FHIR/pull/2671#discussion_r685534835", "body": "I could have but I actually liked this one more because it gives the end user / app developer a better idea of why their request didn't go through (while still not leaking anything confidential).\r\nI wouldn't mind making the more generic \"Requested interaction is not permitted by any of the passed scopes.\" a little *less* generic, but for now I just focused on adding this new check."}
{"iteration": 7, "tag": "no", "repo": "apache/incubator-kie-kogito-runtimes", "url": "https://github.com/apache/incubator-kie-kogito-runtimes/pull/2098#discussion_r833538180", "body": "Im not fan of defensive copy in non public interfaces. I mean, these are public method, but they are \"internal\" to the parser, they are not part of a public, well documented, java library. So we do not need to protect them. \r\nIf we were developing a Java library to be uploaded to maven central, yes, I agree, of course ;)"}
{"iteration": 7, "tag": "yes", "repo": "hapifhir/hapi-fhir", "url": "https://github.com/hapifhir/hapi-fhir/pull/2697#discussion_r645678996", "body": "how are we handling security here? I imagine I will discover as i keep reading, but asking here in case. "}
{"iteration": 7, "tag": "yes", "repo": "apache/struts", "url": "https://github.com/apache/struts/pull/292#discussion_r241553243", "body": "Yeah basic stuff should work. I actually meant the idea itself - to prevent hacker from the ability of resetting those values that menaces overall security."}
{"iteration": 7, "tag": "no", "repo": "AthenZ/athenz", "url": "https://github.com/AthenZ/athenz/pull/1071#discussion_r464101992", "body": "not sure why we need this? we should be able to hide the constructions of the metric within the newResourceContext api call so we don't need to expose this"}
{"iteration": 7, "tag": "no", "repo": "quarkusio/quarkus", "url": "https://github.com/quarkusio/quarkus/pull/28391#discussion_r988958503", "body": "What I'm a bit concerned about here is that it is quite easy now for users to break things, for example, OIDC `AuthenticationFailedException`, if thrown by `quarkus-oidc` is better be handled by `quarkus-oidc` to prepare a correct challenge,  and if the user has registered a mapper then this mapper is in total control now. For ex, a few users combine Basic and OIDC code flow, so if the mapper will blindly return 401 then it is a problem.\r\nI know, when it was not possible to customize with the proactive auth being on, it was a problem, and now that it is fixed, I'm looking for new problems :-).\r\nI'm not sure, it feels like for some cases, we should just not allow intercepting it. If it is only 401 which is returned by default, then sure, why not let users customize it. If it is a redirect to Keycloak that has to be returned, then the custom mapper will not be able to form a redirect URL correctly - as the way it is done it depends on OIDC config, and other factors\r\n "}
{"iteration": 7, "tag": "yes", "repo": "apache/pulsar", "url": "https://github.com/apache/pulsar/pull/3677#discussion_r262433470", "body": "This is depending on implicit behaviour in getAnonymousUserRole to be secure. Instead of throwing the exception in getAnonymousRole, getAnonymousRole should return an Optional<String> and if this is empty, you should throw the exception here (or explicitly send the authentication error)."}
{"iteration": 7, "tag": "yes", "repo": "eclipse-sw360/sw360", "url": "https://github.com/eclipse-sw360/sw360/pull/292#discussion_r196174481", "body": "hmm.. I am absolutely not familiar with `Sw360SecurityObfuscator` :hear_no_evil:\r\nBut you are right, this is just to obfuscation the password field."}
{"iteration": 7, "tag": "broken", "repo": "cryostatio/cryostat", "url": "https://github.com/cryostatio/cryostat/pull/703#discussion_r725272136", "body": "Does this API need to be protected in some way? This would allow any user to use the TokenReview API to find out which user owns a particular token. I'm not sure how big of a problem that is, if any."}
{"iteration": 7, "tag": "no", "repo": "VertaAI/modeldb", "url": "https://github.com/VertaAI/modeldb/pull/3346#discussion_r1018239231", "body": "I *think* I'm ok with things blowing up if somehow a null record got into the set that uses this.  I think if we put explicit null handling into this method, it would just blow up in a more explicit way? Also, I don't think TreeSet allows null values to be put into it, so I _think_ we're safe with assuming no nulls?"}
{"iteration": 7, "tag": "no", "repo": "apache/ozone", "url": "https://github.com/apache/ozone/pull/4014#discussion_r1061896005", "body": "There are no comments or description about what algorithm is being used to remove the replicas and how it also ensure the placement policy is not violated etc. Can you please describe the algorithm used here, perhaps in a javadoc comment above the method and add some comments indicating what is going on in the code."}
{"iteration": 7, "tag": "no", "repo": "reactor/reactor-core", "url": "https://github.com/reactor/reactor-core/pull/1979#discussion_r380329176", "body": "I'll go one step further and add a `isConfiguredForBackoff` flag. This has the added benefit of being exposed to the user, which means they can avoid using that builder eg. if it is intended as a \"template\" and they know they don't need backoff."}
{"iteration": 7, "tag": "yes", "repo": "GIScience/openrouteservice", "url": "https://github.com/GIScience/openrouteservice/pull/959#discussion_r717316224", "body": "The only potential problem I can see with this approach is that by providing the hidden `options` matrix API parameter one could now trigger the use of `DijkstraMatrixAlgorithm`. Such requests would use up considerably more hardware resources than RPHAST ones exposing a possible vulnerability of our service. @rabidllama Is this something we should be worried about?"}
{"iteration": 7, "tag": "yes", "repo": "prestodb/presto", "url": "https://github.com/prestodb/presto/pull/12176#discussion_r245824186", "body": "It makes sense to 404 from a security perspective, but I'm wondering whether we can make this case easier to spot and debug. I think we also want to write a log line when this happens."}
{"iteration": 7, "tag": "yes", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/5827#discussion_r199625942", "body": "I'm not sure what happens if `.config/gcloud` already exists, but it seems unlikely to exist in the base image, at the very least for security reasons. I think we can be relatively confident this will not collide.\r\n\r\nIn any case, if we wanted to use `lconfig`, we would at the very least have to set a special environment variable. For example, `CLOUDSDK_CONFIG=$HOME/lconfig/gcloud` would work for `gcloud`. I'm not even sure that would be picked up by the Java code that actually requires authentication."}
{"iteration": 7, "tag": "no", "repo": "rsksmart/rskj", "url": "https://github.com/rsksmart/rskj/pull/868#discussion_r291322338", "body": "I don't think we can trust humans. We plan to take the Pantheon approach and have immutable objects that can be safely passed around (`BytesValue`), but we can't do it now without interfering with other humans' schedules.\r\n\r\nSee: https://github.com/PegaSysEng/pantheon/blob/master/util/src/main/java/tech/pegasys/pantheon/util/bytes/BytesValue.java"}
{"iteration": 7, "tag": "unclear", "repo": "watson-developer-cloud/java-sdk", "url": "https://github.com/watson-developer-cloud/java-sdk/pull/842#discussion_r159322424", "body": "Would it be wrong to set this authentication header even if the request is targeting a public instance of VR?\r\n\r\nIf not, then why not just supply it always and keep the code simple.\r\n\r\nBut if it is a problem, then I worry that the endpoint might be changed because it is for a service instance in a different region.  In that case, we don't want to provide this authorization header."}
{"iteration": 7, "tag": "no", "repo": "senx/warp10-platform", "url": "https://github.com/senx/warp10-platform/pull/891#discussion_r546217931", "body": "I was thinking of enforcing authentication in each case (capability or not), since it allows for checking if another thread in the jvm has a stack that is authenticated with the same token and also try to use HTTP, so that we can prevent nested call of HTTP and network loops.\r\nIs it a valid concern?"}
{"iteration": 7, "tag": "yes", "repo": "OpenNMS/opennms", "url": "https://github.com/OpenNMS/opennms/pull/4549#discussion_r852299115", "body": "done. It will prevent the plugins from accessing OpenNMS internals but not from spying on each other."}
{"iteration": 7, "tag": "unclear", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/3401#discussion_r201076445", "body": "This POC functionality was added as leadup to a feature that never got implemented. That feature was to allow the POC of a metacard to see that metacard regardless of their security markings. The purpose being to circumvent the scenario where someone ingests a resource that they can't then query for.\r\n\r\nThat being said, I don't think this is an issue. The POC of a metacard should definitely be set to the value of the Subject who originally ingested the resource, so if it's already there we shouldn't be modifying it."}
{"iteration": 7, "tag": "no", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/9896#discussion_r1227678671", "body": "I went through several different names.... but ultimately called it what the security layer calls it, as that also went through similar name doubts."}
{"iteration": 7, "tag": "yes", "repo": "geonetwork/core-geonetwork", "url": "https://github.com/geonetwork/core-geonetwork/pull/6785#discussion_r1091816448", "body": "@cmangeat can you check the regular expression used here? Code scanning is reporting a potential _Polynomial regular expression used on uncontrolled data_ vulnerability. See https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS for refernce."}
{"iteration": 7, "tag": "no", "repo": "box/mojito", "url": "https://github.com/box/mojito/pull/586#discussion_r439527896", "body": "minor: I wouldn't do any treatment on the prefix (removing last \".\"), people should type exactly what they want there or else the behavior should be documented clearly to the user "}
{"iteration": 7, "tag": "yes", "repo": "apache/fineract", "url": "https://github.com/apache/fineract/pull/370#discussion_r122465169", "body": "Do we need to validate this query string not to have cases where authorized users sending malicious SQL statements?"}
{"iteration": 7, "tag": "yes", "repo": "google/gson", "url": "https://github.com/google/gson/pull/2358#discussion_r1518306962", "body": "Maybe this should have a warning that users should be careful when implementing security critical validation with this, and should add extensive tests. Because if they forget to call `setMissingFieldValueStrategy` or use a default `Gson` instance somewhere, then their custom strategy will not be used."}
{"iteration": 7, "tag": "broken", "repo": "codice/ddf", "url": "https://github.com/codice/ddf/pull/631#discussion_r56857114", "body": "How does your code handle password protected documents?\n"}
{"iteration": 7, "tag": "yes", "repo": "open-telemetry/opentelemetry-java", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r369856122", "body": "I remember we didn't want to expose the `SpanContext.getInvalid()` instance, in order to prevent users abusing it. So we either lift that restriction or we use, for the TraceContext propagator, our own INVALID instance (build out from invalid ids).\r\n\r\ncc @yurishkuro "}
{"iteration": 7, "tag": "unclear", "repo": "apache/beam", "url": "https://github.com/apache/beam/pull/10115#discussion_r360187408", "body": "Is there any reason to expose this at all?\r\nIt seems as though `BeamWorkerStatusGrpcService` could have that as an inner private class and instead just expose a method `Map<String, String> getConnectedSdkHarnessStatuses();` (note that the key is the environment id and the value is the current SDK harness status.\r\n\r\nThis would allow for the majority of the methods in `BeamWorkerStatusGrpcService` to be private or package private (for testing)."}
{"iteration": 7, "tag": "no", "repo": "googleapis/java-bigtable-hbase", "url": "https://github.com/googleapis/java-bigtable-hbase/pull/2191#discussion_r313911879", "body": "I don't think you need to log anything...no reason to panic the user. But otherwise  LGTM"}
{"iteration": 7, "tag": "yes", "repo": "opensearch-project/data-prepper", "url": "https://github.com/opensearch-project/data-prepper/pull/1001#discussion_r801734910", "body": "This seems to be quite a bit of scope creep. And it adds security implications which we may not want to add.\r\n\r\nThe current goal is to support expression evaluation. Maybe there would eventually be overlap with scripting, but that overlap need not exist.\r\n\r\nI'd like to use a name that is specifically tied to expressions and expression evaluation."}
{"iteration": 7, "tag": "yes", "repo": "PhoenicisOrg/phoenicis", "url": "https://github.com/PhoenicisOrg/phoenicis/pull/1833#discussion_r257455428", "body": "I\u2019m not sure that it is secure. Have you checked that we cannot inject some code?"}
{"iteration": 7, "tag": "unclear", "repo": "novoda/merlin", "url": "https://github.com/novoda/merlin/pull/77#discussion_r60505643", "body": "Then you shouldn't let people pass an arbitrary url, because you don't know beforehand what's the HTTP code going to be returned. You should have ALWAYS an endpoint whose response is known beforehand so that if it changes you know something's going on not working.\n\nSo in that case the cause for success would be only 204 for the connectivity url provided by android. And that wouldn't be part of the dependencies of this class.\n"}
{"iteration": 7, "tag": "yes", "repo": "open-telemetry/opentelemetry-java-contrib", "url": "https://github.com/open-telemetry/opentelemetry-java-contrib/pull/4#discussion_r475333703", "body": "Instead of adding our own options for authentication, can we just let users use the standard JMX pattern like `com.sun.management.jmxremote.password.file`? Less surface for security that we have to think about, the better, even if the current implementation is sane."}
{"iteration": 7, "tag": "no", "repo": "molgenis/molgenis", "url": "https://github.com/molgenis/molgenis/pull/4667#discussion_r56995077", "body": "I will look at the possibility of giving the anonymous user the right permissions to use SORTA without exposing other information. Then we can happily remove the SORTA_Anonymous controller\n"}
{"iteration": 7, "tag": "unclear", "repo": "netty/netty", "url": "https://github.com/netty/netty/pull/10584#discussion_r490980552", "body": "Ok I was just wondering what will happen to users that \"depend\" on this... So you think there is no \"risk\" ?"}
{"iteration": 7, "tag": "no", "repo": "SkriptLang/Skript", "url": "https://github.com/SkriptLang/Skript/pull/6207#discussion_r1437295688", "body": "It's to mirror how event priority is presented in the API, and provides an easy way to forbid any listening behavior on an event (eg. you have an event that can be cancelled, but you don't want to allow listening to the cancelled version). I suppose it's pretty niche but I think it's worth including."}
{"iteration": 7, "tag": "yes", "repo": "apache/ignite", "url": "https://github.com/apache/ignite/pull/9313#discussion_r701897007", "body": "> Is it worth?\r\n\r\nBut masterKeyDigest() is method of _public_ interface EncryptionSpi that can be overloaded with Ignite user, you never knows what is going under the hood. It can goes by to external storage over unreliable network. Let's prevent this."}
{"iteration": 7, "tag": "no", "repo": "cBioPortal/cbioportal", "url": "https://github.com/cBioPortal/cbioportal/pull/7639#discussion_r531726567", "body": "I'm not clear on what this is doing, but I'm guessing that this also is a workaround for incomplete support of the spring profile selection from applicationContext-security. We seem to be manually injecting the permission evaluator class. The following two lines seem to be programming a mock of the class."}
{"iteration": 7, "tag": "yes", "repo": "apache/ozone", "url": "https://github.com/apache/ozone/pull/2822#discussion_r751776893", "body": "I have moved to a version comparison scheme and should protect in a future safe way for only secure S3G communication."}
{"iteration": 7, "tag": "unclear", "repo": "Azure/azure-sdk-for-java", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529810813", "body": "The intent is for this context value being used internally but there is nothing preventing a user from creating a custom HttpPipelinePolicy that sets this context value to something else."}
{"iteration": 7, "tag": "unclear", "repo": "GoogleContainerTools/jib", "url": "https://github.com/GoogleContainerTools/jib/pull/2065#discussion_r335015858", "body": "Then again, we do still have this issue #1923, so we may end up changing `getAllowInsecureRegistries()` in the future. Either way I'm also fine with `getAlwaysCacheBaseImage()`."}
{"iteration": 7, "tag": "yes", "repo": "openid/AppAuth-Android", "url": "https://github.com/openid/AppAuth-Android/pull/662#discussion_r585462922", "body": "Perhaps this should be documented/log a big warning that this is very unsafe? That way people don't disable it without being sure it's the right thing they want to do.\r\n"}
{"iteration": 7, "tag": "unclear", "repo": "hortonworks/streamline", "url": "https://github.com/hortonworks/streamline/pull/1324#discussion_r226514718", "body": "These can be overridden via config, but wanted to add values for basic security headers by default even if user forgets to add (and right now theres no way for users to add this via Ambari)."}
{"iteration": 7, "tag": "yes", "repo": "jetty/jetty.project", "url": "https://github.com/jetty/jetty.project/pull/2449#discussion_r182471812", "body": "I think this opens up a vulnerability - a malicious server can make the client stack overflow.\r\nYou can easily switch to iteration using `m.find()`."}
{"iteration": 7, "tag": "no", "repo": "elastic/apm-agent-java", "url": "https://github.com/elastic/apm-agent-java/pull/229#discussion_r222583099", "body": "In this case, it looks like a potential leak- sooner or later one of our Instrumentation classes will hold a reference to a helper class loaded by some contextual class loader, which will prevent an entire context to be collected. It can even happen with the JDBC or Servlet instrumentation if someone decides to package these API jars with their app and using a class loader that looks locally before delegating lookup upwards (e.g. the default Tomcat webapp CL, at least in older versions).\r\nIf this code is here, I would assign a unique ID for each instrumentation and map to that instead of the instrumentation class, even if it's just for debug purposes. "}
{"iteration": 7, "tag": "unclear", "repo": "neoforged/NeoForge", "url": "https://github.com/neoforged/NeoForge/pull/425#discussion_r1436128638", "body": "Hmmm. I wonder if there's the potential for accidental uses of the NF registry for (modded) entity data serializer for retrieving the serializer ID, instead of the proper way through `EntityDataSerializers#getSerializedId` (which calls this method). Should we be concerned about that possibility?\r\n\r\nAlso, a fun note is the tiny mismatch between this method `getSerializerId` and `EntityDataSerializers`' `getSerializedId`. \ud83d\ude04 (Perhaps we ought to fix that?)"}
{"iteration": 7, "tag": "unclear", "repo": "keycloak/keycloak", "url": "https://github.com/keycloak/keycloak/pull/27629#discussion_r1549029338", "body": "I would not expose this as first class citizen. We do not expose it for [normal HTTP interface](https://github.com/keycloak/keycloak/blob/553d7c296c16f7c5fd0e995ea4743a60a66daaa6/operator/src/main/java/org/keycloak/operator/crds/v2alpha1/deployment/spec/HttpSpec.java), so I'd align it with that."}
{"iteration": 7, "tag": "no", "repo": "yahoo/elide", "url": "https://github.com/yahoo/elide/pull/1922#discussion_r599073202", "body": "A couple of problems with this:\r\n1. We don't want to put internal validation logic into public contracts (Join configuration class).\r\n2. validation functions should be idempotent as callers will expect them to be stateless.\r\n\r\nWe need to find another way to do this.  Maybe we need to parse all the join expressions and pull out their required arguments as step one.  At a later step, we can validate that any column which references the join also has all required arguments.  \r\n\r\nWe also want to make sure we are not duplicating work done by the SQL Reference Table (which does some validation work as well with respect to cycles).  SQL reference table is the only place today that understand the expansion of a join (joins can depend on other joins and so on).  I think we need to rethink how this validation logic responsibility is shared with the SQL Reference table.\r\n"}
{"iteration": 7, "tag": "broken", "repo": "OpenGamma/Strata", "url": "https://github.com/OpenGamma/Strata/pull/821#discussion_r55555752", "body": "Is the main reason for the extra level of indirection to retain the ability we have with `SecurityLink` to directly link the contract details from the trade without having to go via a reference data lookup?\n\nI worry about creating a domain model that might make sense from an engineering point of view but not to someone with domain knowledge.\n"}
{"iteration": 7, "tag": "broken", "repo": "wso2-attic/product-emm", "url": "https://github.com/wso2-attic/product-emm/pull/82#discussion_r52826214", "body": "unnecessary logging since this method is not exposed to outside\n"}
{"iteration": 7, "tag": "yes", "repo": "senx/warp10-platform", "url": "https://github.com/senx/warp10-platform/pull/1209#discussion_r1129232570", "body": "No, this would leak some potentially sensitive information."}
{"iteration": 7, "tag": "yes", "repo": "google/data-transfer-project", "url": "https://github.com/google/data-transfer-project/pull/296#discussion_r177495446", "body": "OK cool, that sounds good. Maybe just add a comment reflecting that this should come from somewhere secure like a Kubernetes secret, so someone writing a distribution knows to do that and not set a raw cred in as an env variable in the container, for example."}
{"iteration": 7, "tag": "no", "repo": "spring-projects/spring-security", "url": "https://github.com/spring-projects/spring-security/pull/9483#discussion_r642176416", "body": "If the logout profile is initiated by a session participant, it examines the authentication assertion(s) it\r\nreceived pertaining to the session(s) being terminated, and collects the SessionIndex value(s) it\r\nreceived from the identity provider.  from the open saml docment ,i find it use sessionIndex ,but in this commit , i can`t find use the sessionIndex? where is understand error?"}
{"iteration": 7, "tag": "no", "repo": "pentaho/pentaho-kettle", "url": "https://github.com/pentaho/pentaho-kettle/pull/2694#discussion_r71624077", "body": "So what is being protected here by synchronizing at all ? This is code that only runs in a thick-client (Spoon) as it's the dialog. This code doesn't run on the server. So we're protecting someone that ostensibly starts a transformation or job using one or more SlaveServers, and then has edits the SlaveServer definition while the transformation/job is running. Seems to me that's irrational and they get what they get. That's a \"don't do that\".\n\nWith that behavior, I think the right answer is that the dialog should work solely on a clone of the SlaveServer. Only at the moment when the \"Save\" is performed should the underlying SlaveServer be mutated. But there's no knowing what will happen to the executing job/transformation.\n"}
